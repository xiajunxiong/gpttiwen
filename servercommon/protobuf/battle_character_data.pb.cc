// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: battle_character_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "battle_character_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PB_BattleCharacterData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_BattleCharacterData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_BattleCharacterData_SkillItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_BattleCharacterData_SkillItem_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_battle_5fcharacter_5fdata_2eproto() {
  protobuf_AddDesc_battle_5fcharacter_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "battle_character_data.proto");
  GOOGLE_CHECK(file != NULL);
  PB_BattleCharacterData_descriptor_ = file->message_type(0);
  static const int PB_BattleCharacterData_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_BattleCharacterData, character_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_BattleCharacterData, id_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_BattleCharacterData, character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_BattleCharacterData, is_use_cur_hp_mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_BattleCharacterData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_BattleCharacterData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_BattleCharacterData, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_BattleCharacterData, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_BattleCharacterData, race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_BattleCharacterData, weapon_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_BattleCharacterData, weapon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_BattleCharacterData, attr_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_BattleCharacterData, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_BattleCharacterData, is_long_range_unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_BattleCharacterData, skill_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_BattleCharacterData, capability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_BattleCharacterData, fly_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_BattleCharacterData, wear_element_type_),
  };
  PB_BattleCharacterData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_BattleCharacterData_descriptor_,
      PB_BattleCharacterData::default_instance_,
      PB_BattleCharacterData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_BattleCharacterData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_BattleCharacterData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_BattleCharacterData));
  PB_BattleCharacterData_SkillItem_descriptor_ = PB_BattleCharacterData_descriptor_->nested_type(0);
  static const int PB_BattleCharacterData_SkillItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_BattleCharacterData_SkillItem, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_BattleCharacterData_SkillItem, skill_level_),
  };
  PB_BattleCharacterData_SkillItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_BattleCharacterData_SkillItem_descriptor_,
      PB_BattleCharacterData_SkillItem::default_instance_,
      PB_BattleCharacterData_SkillItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_BattleCharacterData_SkillItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_BattleCharacterData_SkillItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_BattleCharacterData_SkillItem));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_battle_5fcharacter_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_BattleCharacterData_descriptor_, &PB_BattleCharacterData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_BattleCharacterData_SkillItem_descriptor_, &PB_BattleCharacterData_SkillItem::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_battle_5fcharacter_5fdata_2eproto() {
  delete PB_BattleCharacterData::default_instance_;
  delete PB_BattleCharacterData_reflection_;
  delete PB_BattleCharacterData_SkillItem::default_instance_;
  delete PB_BattleCharacterData_SkillItem_reflection_;
}

void protobuf_AddDesc_battle_5fcharacter_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033battle_character_data.proto\"\324\003\n\026PB_Bat"
    "tleCharacterData\022\024\n\014character_id\030\001 \001(\005\022\020"
    "\n\010id_param\030\002 \001(\005\022\026\n\016character_type\030\003 \001(\005"
    "\022\030\n\020is_use_cur_hp_mp\030\004 \001(\010\022\r\n\005level\030\005 \001("
    "\005\022\014\n\004name\030\006 \001(\t\022\017\n\007quality\030\007 \001(\005\022\022\n\nprof"
    "ession\030\010 \001(\005\022\014\n\004race\030\t \001(\005\022\023\n\013weapon_typ"
    "e\030\n \001(\005\022\021\n\tweapon_id\030\013 \001(\005\022\021\n\tattr_list\030"
    "\014 \003(\005\022\r\n\005param\030\r \001(\005\022\032\n\022is_long_range_un"
    "it\030\016 \001(\005\0225\n\nskill_list\030\017 \003(\0132!.PB_Battle"
    "CharacterData.SkillItem\022\022\n\ncapability\030\020 "
    "\001(\005\022\020\n\010fly_flag\030\021 \001(\005\022\031\n\021wear_element_ty"
    "pe\030\022 \001(\005\0322\n\tSkillItem\022\020\n\010skill_id\030\001 \001(\r\022"
    "\023\n\013skill_level\030\002 \001(\r", 500);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "battle_character_data.proto", &protobuf_RegisterTypes);
  PB_BattleCharacterData::default_instance_ = new PB_BattleCharacterData();
  PB_BattleCharacterData_SkillItem::default_instance_ = new PB_BattleCharacterData_SkillItem();
  PB_BattleCharacterData::default_instance_->InitAsDefaultInstance();
  PB_BattleCharacterData_SkillItem::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_battle_5fcharacter_5fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_battle_5fcharacter_5fdata_2eproto {
  StaticDescriptorInitializer_battle_5fcharacter_5fdata_2eproto() {
    protobuf_AddDesc_battle_5fcharacter_5fdata_2eproto();
  }
} static_descriptor_initializer_battle_5fcharacter_5fdata_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PB_BattleCharacterData_SkillItem::kSkillIdFieldNumber;
const int PB_BattleCharacterData_SkillItem::kSkillLevelFieldNumber;
#endif  // !_MSC_VER

PB_BattleCharacterData_SkillItem::PB_BattleCharacterData_SkillItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PB_BattleCharacterData.SkillItem)
}

void PB_BattleCharacterData_SkillItem::InitAsDefaultInstance() {
}

PB_BattleCharacterData_SkillItem::PB_BattleCharacterData_SkillItem(const PB_BattleCharacterData_SkillItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PB_BattleCharacterData.SkillItem)
}

void PB_BattleCharacterData_SkillItem::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0u;
  skill_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_BattleCharacterData_SkillItem::~PB_BattleCharacterData_SkillItem() {
  // @@protoc_insertion_point(destructor:PB_BattleCharacterData.SkillItem)
  SharedDtor();
}

void PB_BattleCharacterData_SkillItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_BattleCharacterData_SkillItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_BattleCharacterData_SkillItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_BattleCharacterData_SkillItem_descriptor_;
}

const PB_BattleCharacterData_SkillItem& PB_BattleCharacterData_SkillItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_5fcharacter_5fdata_2eproto();
  return *default_instance_;
}

PB_BattleCharacterData_SkillItem* PB_BattleCharacterData_SkillItem::default_instance_ = NULL;

PB_BattleCharacterData_SkillItem* PB_BattleCharacterData_SkillItem::New() const {
  return new PB_BattleCharacterData_SkillItem;
}

void PB_BattleCharacterData_SkillItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PB_BattleCharacterData_SkillItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(skill_id_, skill_level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_BattleCharacterData_SkillItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PB_BattleCharacterData.SkillItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skill_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_skill_level;
        break;
      }

      // optional uint32 skill_level = 2;
      case 2: {
        if (tag == 16) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PB_BattleCharacterData.SkillItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PB_BattleCharacterData.SkillItem)
  return false;
#undef DO_
}

void PB_BattleCharacterData_SkillItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PB_BattleCharacterData.SkillItem)
  // optional uint32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skill_id(), output);
  }

  // optional uint32 skill_level = 2;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skill_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PB_BattleCharacterData.SkillItem)
}

::google::protobuf::uint8* PB_BattleCharacterData_SkillItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_BattleCharacterData.SkillItem)
  // optional uint32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skill_id(), target);
  }

  // optional uint32 skill_level = 2;
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skill_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_BattleCharacterData.SkillItem)
  return target;
}

int PB_BattleCharacterData_SkillItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }

    // optional uint32 skill_level = 2;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_BattleCharacterData_SkillItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_BattleCharacterData_SkillItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_BattleCharacterData_SkillItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_BattleCharacterData_SkillItem::MergeFrom(const PB_BattleCharacterData_SkillItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_BattleCharacterData_SkillItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_BattleCharacterData_SkillItem::CopyFrom(const PB_BattleCharacterData_SkillItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_BattleCharacterData_SkillItem::IsInitialized() const {

  return true;
}

void PB_BattleCharacterData_SkillItem::Swap(PB_BattleCharacterData_SkillItem* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_BattleCharacterData_SkillItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_BattleCharacterData_SkillItem_descriptor_;
  metadata.reflection = PB_BattleCharacterData_SkillItem_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PB_BattleCharacterData::kCharacterIdFieldNumber;
const int PB_BattleCharacterData::kIdParamFieldNumber;
const int PB_BattleCharacterData::kCharacterTypeFieldNumber;
const int PB_BattleCharacterData::kIsUseCurHpMpFieldNumber;
const int PB_BattleCharacterData::kLevelFieldNumber;
const int PB_BattleCharacterData::kNameFieldNumber;
const int PB_BattleCharacterData::kQualityFieldNumber;
const int PB_BattleCharacterData::kProfessionFieldNumber;
const int PB_BattleCharacterData::kRaceFieldNumber;
const int PB_BattleCharacterData::kWeaponTypeFieldNumber;
const int PB_BattleCharacterData::kWeaponIdFieldNumber;
const int PB_BattleCharacterData::kAttrListFieldNumber;
const int PB_BattleCharacterData::kParamFieldNumber;
const int PB_BattleCharacterData::kIsLongRangeUnitFieldNumber;
const int PB_BattleCharacterData::kSkillListFieldNumber;
const int PB_BattleCharacterData::kCapabilityFieldNumber;
const int PB_BattleCharacterData::kFlyFlagFieldNumber;
const int PB_BattleCharacterData::kWearElementTypeFieldNumber;
#endif  // !_MSC_VER

PB_BattleCharacterData::PB_BattleCharacterData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PB_BattleCharacterData)
}

void PB_BattleCharacterData::InitAsDefaultInstance() {
}

PB_BattleCharacterData::PB_BattleCharacterData(const PB_BattleCharacterData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PB_BattleCharacterData)
}

void PB_BattleCharacterData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  character_id_ = 0;
  id_param_ = 0;
  character_type_ = 0;
  is_use_cur_hp_mp_ = false;
  level_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quality_ = 0;
  profession_ = 0;
  race_ = 0;
  weapon_type_ = 0;
  weapon_id_ = 0;
  param_ = 0;
  is_long_range_unit_ = 0;
  capability_ = 0;
  fly_flag_ = 0;
  wear_element_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_BattleCharacterData::~PB_BattleCharacterData() {
  // @@protoc_insertion_point(destructor:PB_BattleCharacterData)
  SharedDtor();
}

void PB_BattleCharacterData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PB_BattleCharacterData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_BattleCharacterData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_BattleCharacterData_descriptor_;
}

const PB_BattleCharacterData& PB_BattleCharacterData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_5fcharacter_5fdata_2eproto();
  return *default_instance_;
}

PB_BattleCharacterData* PB_BattleCharacterData::default_instance_ = NULL;

PB_BattleCharacterData* PB_BattleCharacterData::New() const {
  return new PB_BattleCharacterData;
}

void PB_BattleCharacterData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PB_BattleCharacterData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(character_id_, is_use_cur_hp_mp_);
    ZR_(level_, profession_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 46848) {
    ZR_(race_, weapon_id_);
    ZR_(param_, is_long_range_unit_);
    capability_ = 0;
  }
  ZR_(fly_flag_, wear_element_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  attr_list_.Clear();
  skill_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_BattleCharacterData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PB_BattleCharacterData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 character_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &character_id_)));
          set_has_character_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id_param;
        break;
      }

      // optional int32 id_param = 2;
      case 2: {
        if (tag == 16) {
         parse_id_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_param_)));
          set_has_id_param();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_character_type;
        break;
      }

      // optional int32 character_type = 3;
      case 3: {
        if (tag == 24) {
         parse_character_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &character_type_)));
          set_has_character_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_use_cur_hp_mp;
        break;
      }

      // optional bool is_use_cur_hp_mp = 4;
      case 4: {
        if (tag == 32) {
         parse_is_use_cur_hp_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_use_cur_hp_mp_)));
          set_has_is_use_cur_hp_mp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional int32 level = 5;
      case 5: {
        if (tag == 40) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // optional string name = 6;
      case 6: {
        if (tag == 50) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_quality;
        break;
      }

      // optional int32 quality = 7;
      case 7: {
        if (tag == 56) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_profession;
        break;
      }

      // optional int32 profession = 8;
      case 8: {
        if (tag == 64) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_race;
        break;
      }

      // optional int32 race = 9;
      case 9: {
        if (tag == 72) {
         parse_race:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &race_)));
          set_has_race();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_weapon_type;
        break;
      }

      // optional int32 weapon_type = 10;
      case 10: {
        if (tag == 80) {
         parse_weapon_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weapon_type_)));
          set_has_weapon_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_weapon_id;
        break;
      }

      // optional int32 weapon_id = 11;
      case 11: {
        if (tag == 88) {
         parse_weapon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weapon_id_)));
          set_has_weapon_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_attr_list;
        break;
      }

      // repeated int32 attr_list = 12;
      case 12: {
        if (tag == 96) {
         parse_attr_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_attr_list())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_attr_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_attr_list;
        if (input->ExpectTag(104)) goto parse_param;
        break;
      }

      // optional int32 param = 13;
      case 13: {
        if (tag == 104) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_is_long_range_unit;
        break;
      }

      // optional int32 is_long_range_unit = 14;
      case 14: {
        if (tag == 112) {
         parse_is_long_range_unit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_long_range_unit_)));
          set_has_is_long_range_unit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_skill_list;
        break;
      }

      // repeated .PB_BattleCharacterData.SkillItem skill_list = 15;
      case 15: {
        if (tag == 122) {
         parse_skill_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_skill_list;
        if (input->ExpectTag(128)) goto parse_capability;
        break;
      }

      // optional int32 capability = 16;
      case 16: {
        if (tag == 128) {
         parse_capability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &capability_)));
          set_has_capability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_fly_flag;
        break;
      }

      // optional int32 fly_flag = 17;
      case 17: {
        if (tag == 136) {
         parse_fly_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fly_flag_)));
          set_has_fly_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_wear_element_type;
        break;
      }

      // optional int32 wear_element_type = 18;
      case 18: {
        if (tag == 144) {
         parse_wear_element_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wear_element_type_)));
          set_has_wear_element_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PB_BattleCharacterData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PB_BattleCharacterData)
  return false;
#undef DO_
}

void PB_BattleCharacterData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PB_BattleCharacterData)
  // optional int32 character_id = 1;
  if (has_character_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->character_id(), output);
  }

  // optional int32 id_param = 2;
  if (has_id_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id_param(), output);
  }

  // optional int32 character_type = 3;
  if (has_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->character_type(), output);
  }

  // optional bool is_use_cur_hp_mp = 4;
  if (has_is_use_cur_hp_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_use_cur_hp_mp(), output);
  }

  // optional int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name(), output);
  }

  // optional int32 quality = 7;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->quality(), output);
  }

  // optional int32 profession = 8;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->profession(), output);
  }

  // optional int32 race = 9;
  if (has_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->race(), output);
  }

  // optional int32 weapon_type = 10;
  if (has_weapon_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->weapon_type(), output);
  }

  // optional int32 weapon_id = 11;
  if (has_weapon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->weapon_id(), output);
  }

  // repeated int32 attr_list = 12;
  for (int i = 0; i < this->attr_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->attr_list(i), output);
  }

  // optional int32 param = 13;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->param(), output);
  }

  // optional int32 is_long_range_unit = 14;
  if (has_is_long_range_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->is_long_range_unit(), output);
  }

  // repeated .PB_BattleCharacterData.SkillItem skill_list = 15;
  for (int i = 0; i < this->skill_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->skill_list(i), output);
  }

  // optional int32 capability = 16;
  if (has_capability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->capability(), output);
  }

  // optional int32 fly_flag = 17;
  if (has_fly_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->fly_flag(), output);
  }

  // optional int32 wear_element_type = 18;
  if (has_wear_element_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->wear_element_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PB_BattleCharacterData)
}

::google::protobuf::uint8* PB_BattleCharacterData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_BattleCharacterData)
  // optional int32 character_id = 1;
  if (has_character_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->character_id(), target);
  }

  // optional int32 id_param = 2;
  if (has_id_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id_param(), target);
  }

  // optional int32 character_type = 3;
  if (has_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->character_type(), target);
  }

  // optional bool is_use_cur_hp_mp = 4;
  if (has_is_use_cur_hp_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_use_cur_hp_mp(), target);
  }

  // optional int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // optional int32 quality = 7;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->quality(), target);
  }

  // optional int32 profession = 8;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->profession(), target);
  }

  // optional int32 race = 9;
  if (has_race()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->race(), target);
  }

  // optional int32 weapon_type = 10;
  if (has_weapon_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->weapon_type(), target);
  }

  // optional int32 weapon_id = 11;
  if (has_weapon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->weapon_id(), target);
  }

  // repeated int32 attr_list = 12;
  for (int i = 0; i < this->attr_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->attr_list(i), target);
  }

  // optional int32 param = 13;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->param(), target);
  }

  // optional int32 is_long_range_unit = 14;
  if (has_is_long_range_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->is_long_range_unit(), target);
  }

  // repeated .PB_BattleCharacterData.SkillItem skill_list = 15;
  for (int i = 0; i < this->skill_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->skill_list(i), target);
  }

  // optional int32 capability = 16;
  if (has_capability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->capability(), target);
  }

  // optional int32 fly_flag = 17;
  if (has_fly_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->fly_flag(), target);
  }

  // optional int32 wear_element_type = 18;
  if (has_wear_element_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->wear_element_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_BattleCharacterData)
  return target;
}

int PB_BattleCharacterData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 character_id = 1;
    if (has_character_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->character_id());
    }

    // optional int32 id_param = 2;
    if (has_id_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id_param());
    }

    // optional int32 character_type = 3;
    if (has_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->character_type());
    }

    // optional bool is_use_cur_hp_mp = 4;
    if (has_is_use_cur_hp_mp()) {
      total_size += 1 + 1;
    }

    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 quality = 7;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int32 profession = 8;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 race = 9;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->race());
    }

    // optional int32 weapon_type = 10;
    if (has_weapon_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weapon_type());
    }

    // optional int32 weapon_id = 11;
    if (has_weapon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weapon_id());
    }

    // optional int32 param = 13;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param());
    }

    // optional int32 is_long_range_unit = 14;
    if (has_is_long_range_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_long_range_unit());
    }

    // optional int32 capability = 16;
    if (has_capability()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->capability());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 fly_flag = 17;
    if (has_fly_flag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fly_flag());
    }

    // optional int32 wear_element_type = 18;
    if (has_wear_element_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wear_element_type());
    }

  }
  // repeated int32 attr_list = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->attr_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->attr_list(i));
    }
    total_size += 1 * this->attr_list_size() + data_size;
  }

  // repeated .PB_BattleCharacterData.SkillItem skill_list = 15;
  total_size += 1 * this->skill_list_size();
  for (int i = 0; i < this->skill_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_BattleCharacterData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_BattleCharacterData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_BattleCharacterData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_BattleCharacterData::MergeFrom(const PB_BattleCharacterData& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_list_.MergeFrom(from.attr_list_);
  skill_list_.MergeFrom(from.skill_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_id()) {
      set_character_id(from.character_id());
    }
    if (from.has_id_param()) {
      set_id_param(from.id_param());
    }
    if (from.has_character_type()) {
      set_character_type(from.character_type());
    }
    if (from.has_is_use_cur_hp_mp()) {
      set_is_use_cur_hp_mp(from.is_use_cur_hp_mp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_race()) {
      set_race(from.race());
    }
    if (from.has_weapon_type()) {
      set_weapon_type(from.weapon_type());
    }
    if (from.has_weapon_id()) {
      set_weapon_id(from.weapon_id());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_is_long_range_unit()) {
      set_is_long_range_unit(from.is_long_range_unit());
    }
    if (from.has_capability()) {
      set_capability(from.capability());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_fly_flag()) {
      set_fly_flag(from.fly_flag());
    }
    if (from.has_wear_element_type()) {
      set_wear_element_type(from.wear_element_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_BattleCharacterData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_BattleCharacterData::CopyFrom(const PB_BattleCharacterData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_BattleCharacterData::IsInitialized() const {

  return true;
}

void PB_BattleCharacterData::Swap(PB_BattleCharacterData* other) {
  if (other != this) {
    std::swap(character_id_, other->character_id_);
    std::swap(id_param_, other->id_param_);
    std::swap(character_type_, other->character_type_);
    std::swap(is_use_cur_hp_mp_, other->is_use_cur_hp_mp_);
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(quality_, other->quality_);
    std::swap(profession_, other->profession_);
    std::swap(race_, other->race_);
    std::swap(weapon_type_, other->weapon_type_);
    std::swap(weapon_id_, other->weapon_id_);
    attr_list_.Swap(&other->attr_list_);
    std::swap(param_, other->param_);
    std::swap(is_long_range_unit_, other->is_long_range_unit_);
    skill_list_.Swap(&other->skill_list_);
    std::swap(capability_, other->capability_);
    std::swap(fly_flag_, other->fly_flag_);
    std::swap(wear_element_type_, other->wear_element_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_BattleCharacterData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_BattleCharacterData_descriptor_;
  metadata.reflection = PB_BattleCharacterData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
