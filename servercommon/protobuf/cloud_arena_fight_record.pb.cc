// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cloud_arena_fight_record.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cloud_arena_fight_record.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PB_CloudArenaFightRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_CloudArenaFightRecord_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cloud_5farena_5ffight_5frecord_2eproto() {
  protobuf_AddDesc_cloud_5farena_5ffight_5frecord_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cloud_arena_fight_record.proto");
  GOOGLE_CHECK(file != NULL);
  PB_CloudArenaFightRecord_descriptor_ = file->message_type(0);
  static const int PB_CloudArenaFightRecord_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_CloudArenaFightRecord, record_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_CloudArenaFightRecord, record_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_CloudArenaFightRecord, is_attacker_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_CloudArenaFightRecord, attacker_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_CloudArenaFightRecord, defender_info_),
  };
  PB_CloudArenaFightRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_CloudArenaFightRecord_descriptor_,
      PB_CloudArenaFightRecord::default_instance_,
      PB_CloudArenaFightRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_CloudArenaFightRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_CloudArenaFightRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_CloudArenaFightRecord));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cloud_5farena_5ffight_5frecord_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_CloudArenaFightRecord_descriptor_, &PB_CloudArenaFightRecord::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cloud_5farena_5ffight_5frecord_2eproto() {
  delete PB_CloudArenaFightRecord::default_instance_;
  delete PB_CloudArenaFightRecord_reflection_;
}

void protobuf_AddDesc_cloud_5farena_5ffight_5frecord_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_cloud_5farena_5ffight_5frecord_5fuser_5finfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036cloud_arena_fight_record.proto\032(cloud_"
    "arena_fight_record_user_info.proto\"\324\001\n\030P"
    "B_CloudArenaFightRecord\022\021\n\trecord_id\030\001 \001"
    "(\003\022\030\n\020record_timestamp\030\002 \001(\r\022\027\n\017is_attac"
    "ker_win\030\003 \001(\010\0228\n\rattacker_info\030\004 \001(\0132!.P"
    "B_CloudArenaFightRecordUserInfo\0228\n\rdefen"
    "der_info\030\005 \001(\0132!.PB_CloudArenaFightRecor"
    "dUserInfo", 289);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cloud_arena_fight_record.proto", &protobuf_RegisterTypes);
  PB_CloudArenaFightRecord::default_instance_ = new PB_CloudArenaFightRecord();
  PB_CloudArenaFightRecord::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cloud_5farena_5ffight_5frecord_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cloud_5farena_5ffight_5frecord_2eproto {
  StaticDescriptorInitializer_cloud_5farena_5ffight_5frecord_2eproto() {
    protobuf_AddDesc_cloud_5farena_5ffight_5frecord_2eproto();
  }
} static_descriptor_initializer_cloud_5farena_5ffight_5frecord_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PB_CloudArenaFightRecord::kRecordIdFieldNumber;
const int PB_CloudArenaFightRecord::kRecordTimestampFieldNumber;
const int PB_CloudArenaFightRecord::kIsAttackerWinFieldNumber;
const int PB_CloudArenaFightRecord::kAttackerInfoFieldNumber;
const int PB_CloudArenaFightRecord::kDefenderInfoFieldNumber;
#endif  // !_MSC_VER

PB_CloudArenaFightRecord::PB_CloudArenaFightRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PB_CloudArenaFightRecord)
}

void PB_CloudArenaFightRecord::InitAsDefaultInstance() {
  attacker_info_ = const_cast< ::PB_CloudArenaFightRecordUserInfo*>(&::PB_CloudArenaFightRecordUserInfo::default_instance());
  defender_info_ = const_cast< ::PB_CloudArenaFightRecordUserInfo*>(&::PB_CloudArenaFightRecordUserInfo::default_instance());
}

PB_CloudArenaFightRecord::PB_CloudArenaFightRecord(const PB_CloudArenaFightRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PB_CloudArenaFightRecord)
}

void PB_CloudArenaFightRecord::SharedCtor() {
  _cached_size_ = 0;
  record_id_ = GOOGLE_LONGLONG(0);
  record_timestamp_ = 0u;
  is_attacker_win_ = false;
  attacker_info_ = NULL;
  defender_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_CloudArenaFightRecord::~PB_CloudArenaFightRecord() {
  // @@protoc_insertion_point(destructor:PB_CloudArenaFightRecord)
  SharedDtor();
}

void PB_CloudArenaFightRecord::SharedDtor() {
  if (this != default_instance_) {
    delete attacker_info_;
    delete defender_info_;
  }
}

void PB_CloudArenaFightRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_CloudArenaFightRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_CloudArenaFightRecord_descriptor_;
}

const PB_CloudArenaFightRecord& PB_CloudArenaFightRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cloud_5farena_5ffight_5frecord_2eproto();
  return *default_instance_;
}

PB_CloudArenaFightRecord* PB_CloudArenaFightRecord::default_instance_ = NULL;

PB_CloudArenaFightRecord* PB_CloudArenaFightRecord::New() const {
  return new PB_CloudArenaFightRecord;
}

void PB_CloudArenaFightRecord::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PB_CloudArenaFightRecord*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(record_id_, is_attacker_win_);
    if (has_attacker_info()) {
      if (attacker_info_ != NULL) attacker_info_->::PB_CloudArenaFightRecordUserInfo::Clear();
    }
    if (has_defender_info()) {
      if (defender_info_ != NULL) defender_info_->::PB_CloudArenaFightRecordUserInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_CloudArenaFightRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PB_CloudArenaFightRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 record_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &record_id_)));
          set_has_record_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_record_timestamp;
        break;
      }

      // optional uint32 record_timestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_record_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &record_timestamp_)));
          set_has_record_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_attacker_win;
        break;
      }

      // optional bool is_attacker_win = 3;
      case 3: {
        if (tag == 24) {
         parse_is_attacker_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_attacker_win_)));
          set_has_is_attacker_win();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_attacker_info;
        break;
      }

      // optional .PB_CloudArenaFightRecordUserInfo attacker_info = 4;
      case 4: {
        if (tag == 34) {
         parse_attacker_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attacker_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_defender_info;
        break;
      }

      // optional .PB_CloudArenaFightRecordUserInfo defender_info = 5;
      case 5: {
        if (tag == 42) {
         parse_defender_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defender_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PB_CloudArenaFightRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PB_CloudArenaFightRecord)
  return false;
#undef DO_
}

void PB_CloudArenaFightRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PB_CloudArenaFightRecord)
  // optional int64 record_id = 1;
  if (has_record_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->record_id(), output);
  }

  // optional uint32 record_timestamp = 2;
  if (has_record_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->record_timestamp(), output);
  }

  // optional bool is_attacker_win = 3;
  if (has_is_attacker_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_attacker_win(), output);
  }

  // optional .PB_CloudArenaFightRecordUserInfo attacker_info = 4;
  if (has_attacker_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->attacker_info(), output);
  }

  // optional .PB_CloudArenaFightRecordUserInfo defender_info = 5;
  if (has_defender_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->defender_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PB_CloudArenaFightRecord)
}

::google::protobuf::uint8* PB_CloudArenaFightRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_CloudArenaFightRecord)
  // optional int64 record_id = 1;
  if (has_record_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->record_id(), target);
  }

  // optional uint32 record_timestamp = 2;
  if (has_record_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->record_timestamp(), target);
  }

  // optional bool is_attacker_win = 3;
  if (has_is_attacker_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_attacker_win(), target);
  }

  // optional .PB_CloudArenaFightRecordUserInfo attacker_info = 4;
  if (has_attacker_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->attacker_info(), target);
  }

  // optional .PB_CloudArenaFightRecordUserInfo defender_info = 5;
  if (has_defender_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->defender_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_CloudArenaFightRecord)
  return target;
}

int PB_CloudArenaFightRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 record_id = 1;
    if (has_record_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->record_id());
    }

    // optional uint32 record_timestamp = 2;
    if (has_record_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->record_timestamp());
    }

    // optional bool is_attacker_win = 3;
    if (has_is_attacker_win()) {
      total_size += 1 + 1;
    }

    // optional .PB_CloudArenaFightRecordUserInfo attacker_info = 4;
    if (has_attacker_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attacker_info());
    }

    // optional .PB_CloudArenaFightRecordUserInfo defender_info = 5;
    if (has_defender_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defender_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_CloudArenaFightRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_CloudArenaFightRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_CloudArenaFightRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_CloudArenaFightRecord::MergeFrom(const PB_CloudArenaFightRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_record_id()) {
      set_record_id(from.record_id());
    }
    if (from.has_record_timestamp()) {
      set_record_timestamp(from.record_timestamp());
    }
    if (from.has_is_attacker_win()) {
      set_is_attacker_win(from.is_attacker_win());
    }
    if (from.has_attacker_info()) {
      mutable_attacker_info()->::PB_CloudArenaFightRecordUserInfo::MergeFrom(from.attacker_info());
    }
    if (from.has_defender_info()) {
      mutable_defender_info()->::PB_CloudArenaFightRecordUserInfo::MergeFrom(from.defender_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_CloudArenaFightRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_CloudArenaFightRecord::CopyFrom(const PB_CloudArenaFightRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_CloudArenaFightRecord::IsInitialized() const {

  return true;
}

void PB_CloudArenaFightRecord::Swap(PB_CloudArenaFightRecord* other) {
  if (other != this) {
    std::swap(record_id_, other->record_id_);
    std::swap(record_timestamp_, other->record_timestamp_);
    std::swap(is_attacker_win_, other->is_attacker_win_);
    std::swap(attacker_info_, other->attacker_info_);
    std::swap(defender_info_, other->defender_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_CloudArenaFightRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_CloudArenaFightRecord_descriptor_;
  metadata.reflection = PB_CloudArenaFightRecord_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
