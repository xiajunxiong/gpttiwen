// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cloud_arena_fight_record.proto

#ifndef PROTOBUF_cloud_5farena_5ffight_5frecord_2eproto__INCLUDED
#define PROTOBUF_cloud_5farena_5ffight_5frecord_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "cloud_arena_fight_record_user_info.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cloud_5farena_5ffight_5frecord_2eproto();
void protobuf_AssignDesc_cloud_5farena_5ffight_5frecord_2eproto();
void protobuf_ShutdownFile_cloud_5farena_5ffight_5frecord_2eproto();

class PB_CloudArenaFightRecord;

// ===================================================================

class PB_CloudArenaFightRecord : public ::google::protobuf::Message {
 public:
  PB_CloudArenaFightRecord();
  virtual ~PB_CloudArenaFightRecord();

  PB_CloudArenaFightRecord(const PB_CloudArenaFightRecord& from);

  inline PB_CloudArenaFightRecord& operator=(const PB_CloudArenaFightRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PB_CloudArenaFightRecord& default_instance();

  void Swap(PB_CloudArenaFightRecord* other);

  // implements Message ----------------------------------------------

  PB_CloudArenaFightRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB_CloudArenaFightRecord& from);
  void MergeFrom(const PB_CloudArenaFightRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 record_id = 1;
  inline bool has_record_id() const;
  inline void clear_record_id();
  static const int kRecordIdFieldNumber = 1;
  inline ::google::protobuf::int64 record_id() const;
  inline void set_record_id(::google::protobuf::int64 value);

  // optional uint32 record_timestamp = 2;
  inline bool has_record_timestamp() const;
  inline void clear_record_timestamp();
  static const int kRecordTimestampFieldNumber = 2;
  inline ::google::protobuf::uint32 record_timestamp() const;
  inline void set_record_timestamp(::google::protobuf::uint32 value);

  // optional bool is_attacker_win = 3;
  inline bool has_is_attacker_win() const;
  inline void clear_is_attacker_win();
  static const int kIsAttackerWinFieldNumber = 3;
  inline bool is_attacker_win() const;
  inline void set_is_attacker_win(bool value);

  // optional .PB_CloudArenaFightRecordUserInfo attacker_info = 4;
  inline bool has_attacker_info() const;
  inline void clear_attacker_info();
  static const int kAttackerInfoFieldNumber = 4;
  inline const ::PB_CloudArenaFightRecordUserInfo& attacker_info() const;
  inline ::PB_CloudArenaFightRecordUserInfo* mutable_attacker_info();
  inline ::PB_CloudArenaFightRecordUserInfo* release_attacker_info();
  inline void set_allocated_attacker_info(::PB_CloudArenaFightRecordUserInfo* attacker_info);

  // optional .PB_CloudArenaFightRecordUserInfo defender_info = 5;
  inline bool has_defender_info() const;
  inline void clear_defender_info();
  static const int kDefenderInfoFieldNumber = 5;
  inline const ::PB_CloudArenaFightRecordUserInfo& defender_info() const;
  inline ::PB_CloudArenaFightRecordUserInfo* mutable_defender_info();
  inline ::PB_CloudArenaFightRecordUserInfo* release_defender_info();
  inline void set_allocated_defender_info(::PB_CloudArenaFightRecordUserInfo* defender_info);

  // @@protoc_insertion_point(class_scope:PB_CloudArenaFightRecord)
 private:
  inline void set_has_record_id();
  inline void clear_has_record_id();
  inline void set_has_record_timestamp();
  inline void clear_has_record_timestamp();
  inline void set_has_is_attacker_win();
  inline void clear_has_is_attacker_win();
  inline void set_has_attacker_info();
  inline void clear_has_attacker_info();
  inline void set_has_defender_info();
  inline void clear_has_defender_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 record_id_;
  ::google::protobuf::uint32 record_timestamp_;
  bool is_attacker_win_;
  ::PB_CloudArenaFightRecordUserInfo* attacker_info_;
  ::PB_CloudArenaFightRecordUserInfo* defender_info_;
  friend void  protobuf_AddDesc_cloud_5farena_5ffight_5frecord_2eproto();
  friend void protobuf_AssignDesc_cloud_5farena_5ffight_5frecord_2eproto();
  friend void protobuf_ShutdownFile_cloud_5farena_5ffight_5frecord_2eproto();

  void InitAsDefaultInstance();
  static PB_CloudArenaFightRecord* default_instance_;
};
// ===================================================================


// ===================================================================

// PB_CloudArenaFightRecord

// optional int64 record_id = 1;
inline bool PB_CloudArenaFightRecord::has_record_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_CloudArenaFightRecord::set_has_record_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB_CloudArenaFightRecord::clear_has_record_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB_CloudArenaFightRecord::clear_record_id() {
  record_id_ = GOOGLE_LONGLONG(0);
  clear_has_record_id();
}
inline ::google::protobuf::int64 PB_CloudArenaFightRecord::record_id() const {
  // @@protoc_insertion_point(field_get:PB_CloudArenaFightRecord.record_id)
  return record_id_;
}
inline void PB_CloudArenaFightRecord::set_record_id(::google::protobuf::int64 value) {
  set_has_record_id();
  record_id_ = value;
  // @@protoc_insertion_point(field_set:PB_CloudArenaFightRecord.record_id)
}

// optional uint32 record_timestamp = 2;
inline bool PB_CloudArenaFightRecord::has_record_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_CloudArenaFightRecord::set_has_record_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PB_CloudArenaFightRecord::clear_has_record_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PB_CloudArenaFightRecord::clear_record_timestamp() {
  record_timestamp_ = 0u;
  clear_has_record_timestamp();
}
inline ::google::protobuf::uint32 PB_CloudArenaFightRecord::record_timestamp() const {
  // @@protoc_insertion_point(field_get:PB_CloudArenaFightRecord.record_timestamp)
  return record_timestamp_;
}
inline void PB_CloudArenaFightRecord::set_record_timestamp(::google::protobuf::uint32 value) {
  set_has_record_timestamp();
  record_timestamp_ = value;
  // @@protoc_insertion_point(field_set:PB_CloudArenaFightRecord.record_timestamp)
}

// optional bool is_attacker_win = 3;
inline bool PB_CloudArenaFightRecord::has_is_attacker_win() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PB_CloudArenaFightRecord::set_has_is_attacker_win() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PB_CloudArenaFightRecord::clear_has_is_attacker_win() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PB_CloudArenaFightRecord::clear_is_attacker_win() {
  is_attacker_win_ = false;
  clear_has_is_attacker_win();
}
inline bool PB_CloudArenaFightRecord::is_attacker_win() const {
  // @@protoc_insertion_point(field_get:PB_CloudArenaFightRecord.is_attacker_win)
  return is_attacker_win_;
}
inline void PB_CloudArenaFightRecord::set_is_attacker_win(bool value) {
  set_has_is_attacker_win();
  is_attacker_win_ = value;
  // @@protoc_insertion_point(field_set:PB_CloudArenaFightRecord.is_attacker_win)
}

// optional .PB_CloudArenaFightRecordUserInfo attacker_info = 4;
inline bool PB_CloudArenaFightRecord::has_attacker_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PB_CloudArenaFightRecord::set_has_attacker_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PB_CloudArenaFightRecord::clear_has_attacker_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PB_CloudArenaFightRecord::clear_attacker_info() {
  if (attacker_info_ != NULL) attacker_info_->::PB_CloudArenaFightRecordUserInfo::Clear();
  clear_has_attacker_info();
}
inline const ::PB_CloudArenaFightRecordUserInfo& PB_CloudArenaFightRecord::attacker_info() const {
  // @@protoc_insertion_point(field_get:PB_CloudArenaFightRecord.attacker_info)
  return attacker_info_ != NULL ? *attacker_info_ : *default_instance_->attacker_info_;
}
inline ::PB_CloudArenaFightRecordUserInfo* PB_CloudArenaFightRecord::mutable_attacker_info() {
  set_has_attacker_info();
  if (attacker_info_ == NULL) attacker_info_ = new ::PB_CloudArenaFightRecordUserInfo;
  // @@protoc_insertion_point(field_mutable:PB_CloudArenaFightRecord.attacker_info)
  return attacker_info_;
}
inline ::PB_CloudArenaFightRecordUserInfo* PB_CloudArenaFightRecord::release_attacker_info() {
  clear_has_attacker_info();
  ::PB_CloudArenaFightRecordUserInfo* temp = attacker_info_;
  attacker_info_ = NULL;
  return temp;
}
inline void PB_CloudArenaFightRecord::set_allocated_attacker_info(::PB_CloudArenaFightRecordUserInfo* attacker_info) {
  delete attacker_info_;
  attacker_info_ = attacker_info;
  if (attacker_info) {
    set_has_attacker_info();
  } else {
    clear_has_attacker_info();
  }
  // @@protoc_insertion_point(field_set_allocated:PB_CloudArenaFightRecord.attacker_info)
}

// optional .PB_CloudArenaFightRecordUserInfo defender_info = 5;
inline bool PB_CloudArenaFightRecord::has_defender_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PB_CloudArenaFightRecord::set_has_defender_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PB_CloudArenaFightRecord::clear_has_defender_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PB_CloudArenaFightRecord::clear_defender_info() {
  if (defender_info_ != NULL) defender_info_->::PB_CloudArenaFightRecordUserInfo::Clear();
  clear_has_defender_info();
}
inline const ::PB_CloudArenaFightRecordUserInfo& PB_CloudArenaFightRecord::defender_info() const {
  // @@protoc_insertion_point(field_get:PB_CloudArenaFightRecord.defender_info)
  return defender_info_ != NULL ? *defender_info_ : *default_instance_->defender_info_;
}
inline ::PB_CloudArenaFightRecordUserInfo* PB_CloudArenaFightRecord::mutable_defender_info() {
  set_has_defender_info();
  if (defender_info_ == NULL) defender_info_ = new ::PB_CloudArenaFightRecordUserInfo;
  // @@protoc_insertion_point(field_mutable:PB_CloudArenaFightRecord.defender_info)
  return defender_info_;
}
inline ::PB_CloudArenaFightRecordUserInfo* PB_CloudArenaFightRecord::release_defender_info() {
  clear_has_defender_info();
  ::PB_CloudArenaFightRecordUserInfo* temp = defender_info_;
  defender_info_ = NULL;
  return temp;
}
inline void PB_CloudArenaFightRecord::set_allocated_defender_info(::PB_CloudArenaFightRecordUserInfo* defender_info) {
  delete defender_info_;
  defender_info_ = defender_info;
  if (defender_info) {
    set_has_defender_info();
  } else {
    clear_has_defender_info();
  }
  // @@protoc_insertion_point(field_set_allocated:PB_CloudArenaFightRecord.defender_info)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cloud_5farena_5ffight_5frecord_2eproto__INCLUDED
