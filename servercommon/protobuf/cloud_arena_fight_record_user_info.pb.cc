// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cloud_arena_fight_record_user_info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cloud_arena_fight_record_user_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PB_CloudArenaFightRecordUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_CloudArenaFightRecordUserInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cloud_5farena_5ffight_5frecord_5fuser_5finfo_2eproto() {
  protobuf_AddDesc_cloud_5farena_5ffight_5frecord_5fuser_5finfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cloud_arena_fight_record_user_info.proto");
  GOOGLE_CHECK(file != NULL);
  PB_CloudArenaFightRecordUserInfo_descriptor_ = file->message_type(0);
  static const int PB_CloudArenaFightRecordUserInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_CloudArenaFightRecordUserInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_CloudArenaFightRecordUserInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_CloudArenaFightRecordUserInfo, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_CloudArenaFightRecordUserInfo, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_CloudArenaFightRecordUserInfo, headshot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_CloudArenaFightRecordUserInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_CloudArenaFightRecordUserInfo, change_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_CloudArenaFightRecordUserInfo, change_arena_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_CloudArenaFightRecordUserInfo, new_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_CloudArenaFightRecordUserInfo, old_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_CloudArenaFightRecordUserInfo, old_rank_),
  };
  PB_CloudArenaFightRecordUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_CloudArenaFightRecordUserInfo_descriptor_,
      PB_CloudArenaFightRecordUserInfo::default_instance_,
      PB_CloudArenaFightRecordUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_CloudArenaFightRecordUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_CloudArenaFightRecordUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_CloudArenaFightRecordUserInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cloud_5farena_5ffight_5frecord_5fuser_5finfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_CloudArenaFightRecordUserInfo_descriptor_, &PB_CloudArenaFightRecordUserInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cloud_5farena_5ffight_5frecord_5fuser_5finfo_2eproto() {
  delete PB_CloudArenaFightRecordUserInfo::default_instance_;
  delete PB_CloudArenaFightRecordUserInfo_reflection_;
}

void protobuf_AddDesc_cloud_5farena_5ffight_5frecord_5fuser_5finfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n(cloud_arena_fight_record_user_info.pro"
    "to\"\355\001\n PB_CloudArenaFightRecordUserInfo\022"
    "\013\n\003uid\030\001 \001(\005\022\r\n\005level\030\002 \001(\005\022\022\n\nprofessio"
    "n\030\003 \001(\005\022\016\n\006avatar\030\004 \001(\005\022\023\n\013headshot_id\030\005"
    " \001(\005\022\014\n\004name\030\006 \001(\t\022\024\n\014change_score\030\007 \001(\005"
    "\022\031\n\021change_arena_coin\030\010 \001(\005\022\020\n\010new_rank\030"
    "\t \001(\005\022\021\n\told_score\030\n \001(\005\022\020\n\010old_rank\030\013 \001"
    "(\005", 282);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cloud_arena_fight_record_user_info.proto", &protobuf_RegisterTypes);
  PB_CloudArenaFightRecordUserInfo::default_instance_ = new PB_CloudArenaFightRecordUserInfo();
  PB_CloudArenaFightRecordUserInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cloud_5farena_5ffight_5frecord_5fuser_5finfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cloud_5farena_5ffight_5frecord_5fuser_5finfo_2eproto {
  StaticDescriptorInitializer_cloud_5farena_5ffight_5frecord_5fuser_5finfo_2eproto() {
    protobuf_AddDesc_cloud_5farena_5ffight_5frecord_5fuser_5finfo_2eproto();
  }
} static_descriptor_initializer_cloud_5farena_5ffight_5frecord_5fuser_5finfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PB_CloudArenaFightRecordUserInfo::kUidFieldNumber;
const int PB_CloudArenaFightRecordUserInfo::kLevelFieldNumber;
const int PB_CloudArenaFightRecordUserInfo::kProfessionFieldNumber;
const int PB_CloudArenaFightRecordUserInfo::kAvatarFieldNumber;
const int PB_CloudArenaFightRecordUserInfo::kHeadshotIdFieldNumber;
const int PB_CloudArenaFightRecordUserInfo::kNameFieldNumber;
const int PB_CloudArenaFightRecordUserInfo::kChangeScoreFieldNumber;
const int PB_CloudArenaFightRecordUserInfo::kChangeArenaCoinFieldNumber;
const int PB_CloudArenaFightRecordUserInfo::kNewRankFieldNumber;
const int PB_CloudArenaFightRecordUserInfo::kOldScoreFieldNumber;
const int PB_CloudArenaFightRecordUserInfo::kOldRankFieldNumber;
#endif  // !_MSC_VER

PB_CloudArenaFightRecordUserInfo::PB_CloudArenaFightRecordUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PB_CloudArenaFightRecordUserInfo)
}

void PB_CloudArenaFightRecordUserInfo::InitAsDefaultInstance() {
}

PB_CloudArenaFightRecordUserInfo::PB_CloudArenaFightRecordUserInfo(const PB_CloudArenaFightRecordUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PB_CloudArenaFightRecordUserInfo)
}

void PB_CloudArenaFightRecordUserInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0;
  level_ = 0;
  profession_ = 0;
  avatar_ = 0;
  headshot_id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  change_score_ = 0;
  change_arena_coin_ = 0;
  new_rank_ = 0;
  old_score_ = 0;
  old_rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_CloudArenaFightRecordUserInfo::~PB_CloudArenaFightRecordUserInfo() {
  // @@protoc_insertion_point(destructor:PB_CloudArenaFightRecordUserInfo)
  SharedDtor();
}

void PB_CloudArenaFightRecordUserInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PB_CloudArenaFightRecordUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_CloudArenaFightRecordUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_CloudArenaFightRecordUserInfo_descriptor_;
}

const PB_CloudArenaFightRecordUserInfo& PB_CloudArenaFightRecordUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cloud_5farena_5ffight_5frecord_5fuser_5finfo_2eproto();
  return *default_instance_;
}

PB_CloudArenaFightRecordUserInfo* PB_CloudArenaFightRecordUserInfo::default_instance_ = NULL;

PB_CloudArenaFightRecordUserInfo* PB_CloudArenaFightRecordUserInfo::New() const {
  return new PB_CloudArenaFightRecordUserInfo;
}

void PB_CloudArenaFightRecordUserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PB_CloudArenaFightRecordUserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uid_, avatar_);
    ZR_(headshot_id_, change_arena_coin_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ZR_(new_rank_, old_rank_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_CloudArenaFightRecordUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PB_CloudArenaFightRecordUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_profession;
        break;
      }

      // optional int32 profession = 3;
      case 3: {
        if (tag == 24) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_avatar;
        break;
      }

      // optional int32 avatar = 4;
      case 4: {
        if (tag == 32) {
         parse_avatar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avatar_)));
          set_has_avatar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_headshot_id;
        break;
      }

      // optional int32 headshot_id = 5;
      case 5: {
        if (tag == 40) {
         parse_headshot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headshot_id_)));
          set_has_headshot_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // optional string name = 6;
      case 6: {
        if (tag == 50) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_change_score;
        break;
      }

      // optional int32 change_score = 7;
      case 7: {
        if (tag == 56) {
         parse_change_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_score_)));
          set_has_change_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_change_arena_coin;
        break;
      }

      // optional int32 change_arena_coin = 8;
      case 8: {
        if (tag == 64) {
         parse_change_arena_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_arena_coin_)));
          set_has_change_arena_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_new_rank;
        break;
      }

      // optional int32 new_rank = 9;
      case 9: {
        if (tag == 72) {
         parse_new_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_rank_)));
          set_has_new_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_old_score;
        break;
      }

      // optional int32 old_score = 10;
      case 10: {
        if (tag == 80) {
         parse_old_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &old_score_)));
          set_has_old_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_old_rank;
        break;
      }

      // optional int32 old_rank = 11;
      case 11: {
        if (tag == 88) {
         parse_old_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &old_rank_)));
          set_has_old_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PB_CloudArenaFightRecordUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PB_CloudArenaFightRecordUserInfo)
  return false;
#undef DO_
}

void PB_CloudArenaFightRecordUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PB_CloudArenaFightRecordUserInfo)
  // optional int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional int32 profession = 3;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->profession(), output);
  }

  // optional int32 avatar = 4;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->avatar(), output);
  }

  // optional int32 headshot_id = 5;
  if (has_headshot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->headshot_id(), output);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name(), output);
  }

  // optional int32 change_score = 7;
  if (has_change_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->change_score(), output);
  }

  // optional int32 change_arena_coin = 8;
  if (has_change_arena_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->change_arena_coin(), output);
  }

  // optional int32 new_rank = 9;
  if (has_new_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->new_rank(), output);
  }

  // optional int32 old_score = 10;
  if (has_old_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->old_score(), output);
  }

  // optional int32 old_rank = 11;
  if (has_old_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->old_rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PB_CloudArenaFightRecordUserInfo)
}

::google::protobuf::uint8* PB_CloudArenaFightRecordUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_CloudArenaFightRecordUserInfo)
  // optional int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional int32 profession = 3;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->profession(), target);
  }

  // optional int32 avatar = 4;
  if (has_avatar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->avatar(), target);
  }

  // optional int32 headshot_id = 5;
  if (has_headshot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->headshot_id(), target);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // optional int32 change_score = 7;
  if (has_change_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->change_score(), target);
  }

  // optional int32 change_arena_coin = 8;
  if (has_change_arena_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->change_arena_coin(), target);
  }

  // optional int32 new_rank = 9;
  if (has_new_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->new_rank(), target);
  }

  // optional int32 old_score = 10;
  if (has_old_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->old_score(), target);
  }

  // optional int32 old_rank = 11;
  if (has_old_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->old_rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_CloudArenaFightRecordUserInfo)
  return target;
}

int PB_CloudArenaFightRecordUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 profession = 3;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

    // optional int32 avatar = 4;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avatar());
    }

    // optional int32 headshot_id = 5;
    if (has_headshot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headshot_id());
    }

    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 change_score = 7;
    if (has_change_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change_score());
    }

    // optional int32 change_arena_coin = 8;
    if (has_change_arena_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change_arena_coin());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 new_rank = 9;
    if (has_new_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_rank());
    }

    // optional int32 old_score = 10;
    if (has_old_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->old_score());
    }

    // optional int32 old_rank = 11;
    if (has_old_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->old_rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_CloudArenaFightRecordUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_CloudArenaFightRecordUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_CloudArenaFightRecordUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_CloudArenaFightRecordUserInfo::MergeFrom(const PB_CloudArenaFightRecordUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_headshot_id()) {
      set_headshot_id(from.headshot_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_change_score()) {
      set_change_score(from.change_score());
    }
    if (from.has_change_arena_coin()) {
      set_change_arena_coin(from.change_arena_coin());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_new_rank()) {
      set_new_rank(from.new_rank());
    }
    if (from.has_old_score()) {
      set_old_score(from.old_score());
    }
    if (from.has_old_rank()) {
      set_old_rank(from.old_rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_CloudArenaFightRecordUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_CloudArenaFightRecordUserInfo::CopyFrom(const PB_CloudArenaFightRecordUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_CloudArenaFightRecordUserInfo::IsInitialized() const {

  return true;
}

void PB_CloudArenaFightRecordUserInfo::Swap(PB_CloudArenaFightRecordUserInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(level_, other->level_);
    std::swap(profession_, other->profession_);
    std::swap(avatar_, other->avatar_);
    std::swap(headshot_id_, other->headshot_id_);
    std::swap(name_, other->name_);
    std::swap(change_score_, other->change_score_);
    std::swap(change_arena_coin_, other->change_arena_coin_);
    std::swap(new_rank_, other->new_rank_);
    std::swap(old_score_, other->old_score_);
    std::swap(old_rank_, other->old_rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_CloudArenaFightRecordUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_CloudArenaFightRecordUserInfo_descriptor_;
  metadata.reflection = PB_CloudArenaFightRecordUserInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
