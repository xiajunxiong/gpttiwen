// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pet_battle_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pet_battle_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PB_PetBattleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_PetBattleData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pet_5fbattle_5fdata_2eproto() {
  protobuf_AddDesc_pet_5fbattle_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pet_battle_data.proto");
  GOOGLE_CHECK(file != NULL);
  PB_PetBattleData_descriptor_ = file->message_type(0);
  static const int PB_PetBattleData_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PetBattleData, battle_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PetBattleData, passive_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PetBattleData, auto_move_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PetBattleData, auto_skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PetBattleData, auto_skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PetBattleData, exclusive_passive_skill_obsolete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PetBattleData, skin_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PetBattleData, other_sp_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PetBattleData, unique_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PetBattleData, passive_level_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PetBattleData, lianyao_pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PetBattleData, lianyao_pet_str_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PetBattleData, pet_exclusive_skill_disable_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PetBattleData, lian_yao_exclusive_skill_disable_flag_),
  };
  PB_PetBattleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_PetBattleData_descriptor_,
      PB_PetBattleData::default_instance_,
      PB_PetBattleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PetBattleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PetBattleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_PetBattleData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pet_5fbattle_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_PetBattleData_descriptor_, &PB_PetBattleData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pet_5fbattle_5fdata_2eproto() {
  delete PB_PetBattleData::default_instance_;
  delete PB_PetBattleData_reflection_;
}

void protobuf_AddDesc_pet_5fbattle_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_battle_5fcharacter_5fdata_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025pet_battle_data.proto\032\033battle_characte"
    "r_data.proto\"\255\003\n\020PB_PetBattleData\022,\n\013bat"
    "tle_data\030\001 \001(\0132\027.PB_BattleCharacterData\022"
    "\024\n\014passive_list\030\002 \003(\005\022\026\n\016auto_move_type\030"
    "\003 \001(\005\022\025\n\rauto_skill_id\030\004 \001(\005\022\030\n\020auto_ski"
    "ll_level\030\005 \001(\005\022(\n exclusive_passive_skil"
    "l_OBSOLETE\030\006 \001(\005\022\017\n\007skin_id\030\007 \001(\005\022\025\n\roth"
    "er_sp_list\030\010 \003(\005\022\021\n\tunique_id\030\t \001(\003\022\032\n\022p"
    "assive_level_list\030\n \003(\005\022\026\n\016lianyao_pet_i"
    "d\030\013 \001(\005\022\032\n\022lianyao_pet_str_lv\030\014 \001(\005\022(\n p"
    "et_exclusive_skill_disable_flag\030\r \001(\005\022-\n"
    "%lian_yao_exclusive_skill_disable_flag\030\016"
    " \001(\005", 484);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pet_battle_data.proto", &protobuf_RegisterTypes);
  PB_PetBattleData::default_instance_ = new PB_PetBattleData();
  PB_PetBattleData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pet_5fbattle_5fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pet_5fbattle_5fdata_2eproto {
  StaticDescriptorInitializer_pet_5fbattle_5fdata_2eproto() {
    protobuf_AddDesc_pet_5fbattle_5fdata_2eproto();
  }
} static_descriptor_initializer_pet_5fbattle_5fdata_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PB_PetBattleData::kBattleDataFieldNumber;
const int PB_PetBattleData::kPassiveListFieldNumber;
const int PB_PetBattleData::kAutoMoveTypeFieldNumber;
const int PB_PetBattleData::kAutoSkillIdFieldNumber;
const int PB_PetBattleData::kAutoSkillLevelFieldNumber;
const int PB_PetBattleData::kExclusivePassiveSkillOBSOLETEFieldNumber;
const int PB_PetBattleData::kSkinIdFieldNumber;
const int PB_PetBattleData::kOtherSpListFieldNumber;
const int PB_PetBattleData::kUniqueIdFieldNumber;
const int PB_PetBattleData::kPassiveLevelListFieldNumber;
const int PB_PetBattleData::kLianyaoPetIdFieldNumber;
const int PB_PetBattleData::kLianyaoPetStrLvFieldNumber;
const int PB_PetBattleData::kPetExclusiveSkillDisableFlagFieldNumber;
const int PB_PetBattleData::kLianYaoExclusiveSkillDisableFlagFieldNumber;
#endif  // !_MSC_VER

PB_PetBattleData::PB_PetBattleData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PB_PetBattleData)
}

void PB_PetBattleData::InitAsDefaultInstance() {
  battle_data_ = const_cast< ::PB_BattleCharacterData*>(&::PB_BattleCharacterData::default_instance());
}

PB_PetBattleData::PB_PetBattleData(const PB_PetBattleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PB_PetBattleData)
}

void PB_PetBattleData::SharedCtor() {
  _cached_size_ = 0;
  battle_data_ = NULL;
  auto_move_type_ = 0;
  auto_skill_id_ = 0;
  auto_skill_level_ = 0;
  exclusive_passive_skill_obsolete_ = 0;
  skin_id_ = 0;
  unique_id_ = GOOGLE_LONGLONG(0);
  lianyao_pet_id_ = 0;
  lianyao_pet_str_lv_ = 0;
  pet_exclusive_skill_disable_flag_ = 0;
  lian_yao_exclusive_skill_disable_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_PetBattleData::~PB_PetBattleData() {
  // @@protoc_insertion_point(destructor:PB_PetBattleData)
  SharedDtor();
}

void PB_PetBattleData::SharedDtor() {
  if (this != default_instance_) {
    delete battle_data_;
  }
}

void PB_PetBattleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_PetBattleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_PetBattleData_descriptor_;
}

const PB_PetBattleData& PB_PetBattleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_5fbattle_5fdata_2eproto();
  return *default_instance_;
}

PB_PetBattleData* PB_PetBattleData::default_instance_ = NULL;

PB_PetBattleData* PB_PetBattleData::New() const {
  return new PB_PetBattleData;
}

void PB_PetBattleData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PB_PetBattleData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 125) {
    ZR_(auto_move_type_, exclusive_passive_skill_obsolete_);
    if (has_battle_data()) {
      if (battle_data_ != NULL) battle_data_->::PB_BattleCharacterData::Clear();
    }
    skin_id_ = 0;
  }
  if (_has_bits_[8 / 32] & 15616) {
    ZR_(lianyao_pet_str_lv_, lian_yao_exclusive_skill_disable_flag_);
    unique_id_ = GOOGLE_LONGLONG(0);
    lianyao_pet_id_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  passive_list_.Clear();
  other_sp_list_.Clear();
  passive_level_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_PetBattleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PB_PetBattleData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB_BattleCharacterData battle_data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_passive_list;
        break;
      }

      // repeated int32 passive_list = 2;
      case 2: {
        if (tag == 16) {
         parse_passive_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_passive_list())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_passive_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_passive_list;
        if (input->ExpectTag(24)) goto parse_auto_move_type;
        break;
      }

      // optional int32 auto_move_type = 3;
      case 3: {
        if (tag == 24) {
         parse_auto_move_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_move_type_)));
          set_has_auto_move_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_auto_skill_id;
        break;
      }

      // optional int32 auto_skill_id = 4;
      case 4: {
        if (tag == 32) {
         parse_auto_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_skill_id_)));
          set_has_auto_skill_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_auto_skill_level;
        break;
      }

      // optional int32 auto_skill_level = 5;
      case 5: {
        if (tag == 40) {
         parse_auto_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_skill_level_)));
          set_has_auto_skill_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_exclusive_passive_skill_OBSOLETE;
        break;
      }

      // optional int32 exclusive_passive_skill_OBSOLETE = 6;
      case 6: {
        if (tag == 48) {
         parse_exclusive_passive_skill_OBSOLETE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exclusive_passive_skill_obsolete_)));
          set_has_exclusive_passive_skill_obsolete();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_skin_id;
        break;
      }

      // optional int32 skin_id = 7;
      case 7: {
        if (tag == 56) {
         parse_skin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skin_id_)));
          set_has_skin_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_other_sp_list;
        break;
      }

      // repeated int32 other_sp_list = 8;
      case 8: {
        if (tag == 64) {
         parse_other_sp_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_other_sp_list())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_other_sp_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_other_sp_list;
        if (input->ExpectTag(72)) goto parse_unique_id;
        break;
      }

      // optional int64 unique_id = 9;
      case 9: {
        if (tag == 72) {
         parse_unique_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &unique_id_)));
          set_has_unique_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_passive_level_list;
        break;
      }

      // repeated int32 passive_level_list = 10;
      case 10: {
        if (tag == 80) {
         parse_passive_level_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_passive_level_list())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_passive_level_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_passive_level_list;
        if (input->ExpectTag(88)) goto parse_lianyao_pet_id;
        break;
      }

      // optional int32 lianyao_pet_id = 11;
      case 11: {
        if (tag == 88) {
         parse_lianyao_pet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lianyao_pet_id_)));
          set_has_lianyao_pet_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_lianyao_pet_str_lv;
        break;
      }

      // optional int32 lianyao_pet_str_lv = 12;
      case 12: {
        if (tag == 96) {
         parse_lianyao_pet_str_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lianyao_pet_str_lv_)));
          set_has_lianyao_pet_str_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_pet_exclusive_skill_disable_flag;
        break;
      }

      // optional int32 pet_exclusive_skill_disable_flag = 13;
      case 13: {
        if (tag == 104) {
         parse_pet_exclusive_skill_disable_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pet_exclusive_skill_disable_flag_)));
          set_has_pet_exclusive_skill_disable_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_lian_yao_exclusive_skill_disable_flag;
        break;
      }

      // optional int32 lian_yao_exclusive_skill_disable_flag = 14;
      case 14: {
        if (tag == 112) {
         parse_lian_yao_exclusive_skill_disable_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lian_yao_exclusive_skill_disable_flag_)));
          set_has_lian_yao_exclusive_skill_disable_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PB_PetBattleData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PB_PetBattleData)
  return false;
#undef DO_
}

void PB_PetBattleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PB_PetBattleData)
  // optional .PB_BattleCharacterData battle_data = 1;
  if (has_battle_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battle_data(), output);
  }

  // repeated int32 passive_list = 2;
  for (int i = 0; i < this->passive_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->passive_list(i), output);
  }

  // optional int32 auto_move_type = 3;
  if (has_auto_move_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->auto_move_type(), output);
  }

  // optional int32 auto_skill_id = 4;
  if (has_auto_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->auto_skill_id(), output);
  }

  // optional int32 auto_skill_level = 5;
  if (has_auto_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->auto_skill_level(), output);
  }

  // optional int32 exclusive_passive_skill_OBSOLETE = 6;
  if (has_exclusive_passive_skill_obsolete()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->exclusive_passive_skill_obsolete(), output);
  }

  // optional int32 skin_id = 7;
  if (has_skin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->skin_id(), output);
  }

  // repeated int32 other_sp_list = 8;
  for (int i = 0; i < this->other_sp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->other_sp_list(i), output);
  }

  // optional int64 unique_id = 9;
  if (has_unique_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->unique_id(), output);
  }

  // repeated int32 passive_level_list = 10;
  for (int i = 0; i < this->passive_level_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->passive_level_list(i), output);
  }

  // optional int32 lianyao_pet_id = 11;
  if (has_lianyao_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->lianyao_pet_id(), output);
  }

  // optional int32 lianyao_pet_str_lv = 12;
  if (has_lianyao_pet_str_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->lianyao_pet_str_lv(), output);
  }

  // optional int32 pet_exclusive_skill_disable_flag = 13;
  if (has_pet_exclusive_skill_disable_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->pet_exclusive_skill_disable_flag(), output);
  }

  // optional int32 lian_yao_exclusive_skill_disable_flag = 14;
  if (has_lian_yao_exclusive_skill_disable_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->lian_yao_exclusive_skill_disable_flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PB_PetBattleData)
}

::google::protobuf::uint8* PB_PetBattleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_PetBattleData)
  // optional .PB_BattleCharacterData battle_data = 1;
  if (has_battle_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battle_data(), target);
  }

  // repeated int32 passive_list = 2;
  for (int i = 0; i < this->passive_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->passive_list(i), target);
  }

  // optional int32 auto_move_type = 3;
  if (has_auto_move_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->auto_move_type(), target);
  }

  // optional int32 auto_skill_id = 4;
  if (has_auto_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->auto_skill_id(), target);
  }

  // optional int32 auto_skill_level = 5;
  if (has_auto_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->auto_skill_level(), target);
  }

  // optional int32 exclusive_passive_skill_OBSOLETE = 6;
  if (has_exclusive_passive_skill_obsolete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->exclusive_passive_skill_obsolete(), target);
  }

  // optional int32 skin_id = 7;
  if (has_skin_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->skin_id(), target);
  }

  // repeated int32 other_sp_list = 8;
  for (int i = 0; i < this->other_sp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->other_sp_list(i), target);
  }

  // optional int64 unique_id = 9;
  if (has_unique_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->unique_id(), target);
  }

  // repeated int32 passive_level_list = 10;
  for (int i = 0; i < this->passive_level_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->passive_level_list(i), target);
  }

  // optional int32 lianyao_pet_id = 11;
  if (has_lianyao_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->lianyao_pet_id(), target);
  }

  // optional int32 lianyao_pet_str_lv = 12;
  if (has_lianyao_pet_str_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->lianyao_pet_str_lv(), target);
  }

  // optional int32 pet_exclusive_skill_disable_flag = 13;
  if (has_pet_exclusive_skill_disable_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->pet_exclusive_skill_disable_flag(), target);
  }

  // optional int32 lian_yao_exclusive_skill_disable_flag = 14;
  if (has_lian_yao_exclusive_skill_disable_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->lian_yao_exclusive_skill_disable_flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_PetBattleData)
  return target;
}

int PB_PetBattleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB_BattleCharacterData battle_data = 1;
    if (has_battle_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_data());
    }

    // optional int32 auto_move_type = 3;
    if (has_auto_move_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_move_type());
    }

    // optional int32 auto_skill_id = 4;
    if (has_auto_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_skill_id());
    }

    // optional int32 auto_skill_level = 5;
    if (has_auto_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_skill_level());
    }

    // optional int32 exclusive_passive_skill_OBSOLETE = 6;
    if (has_exclusive_passive_skill_obsolete()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exclusive_passive_skill_obsolete());
    }

    // optional int32 skin_id = 7;
    if (has_skin_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skin_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 unique_id = 9;
    if (has_unique_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->unique_id());
    }

    // optional int32 lianyao_pet_id = 11;
    if (has_lianyao_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lianyao_pet_id());
    }

    // optional int32 lianyao_pet_str_lv = 12;
    if (has_lianyao_pet_str_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lianyao_pet_str_lv());
    }

    // optional int32 pet_exclusive_skill_disable_flag = 13;
    if (has_pet_exclusive_skill_disable_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pet_exclusive_skill_disable_flag());
    }

    // optional int32 lian_yao_exclusive_skill_disable_flag = 14;
    if (has_lian_yao_exclusive_skill_disable_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lian_yao_exclusive_skill_disable_flag());
    }

  }
  // repeated int32 passive_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->passive_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->passive_list(i));
    }
    total_size += 1 * this->passive_list_size() + data_size;
  }

  // repeated int32 other_sp_list = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->other_sp_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->other_sp_list(i));
    }
    total_size += 1 * this->other_sp_list_size() + data_size;
  }

  // repeated int32 passive_level_list = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->passive_level_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->passive_level_list(i));
    }
    total_size += 1 * this->passive_level_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_PetBattleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_PetBattleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_PetBattleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_PetBattleData::MergeFrom(const PB_PetBattleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  passive_list_.MergeFrom(from.passive_list_);
  other_sp_list_.MergeFrom(from.other_sp_list_);
  passive_level_list_.MergeFrom(from.passive_level_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battle_data()) {
      mutable_battle_data()->::PB_BattleCharacterData::MergeFrom(from.battle_data());
    }
    if (from.has_auto_move_type()) {
      set_auto_move_type(from.auto_move_type());
    }
    if (from.has_auto_skill_id()) {
      set_auto_skill_id(from.auto_skill_id());
    }
    if (from.has_auto_skill_level()) {
      set_auto_skill_level(from.auto_skill_level());
    }
    if (from.has_exclusive_passive_skill_obsolete()) {
      set_exclusive_passive_skill_obsolete(from.exclusive_passive_skill_obsolete());
    }
    if (from.has_skin_id()) {
      set_skin_id(from.skin_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_unique_id()) {
      set_unique_id(from.unique_id());
    }
    if (from.has_lianyao_pet_id()) {
      set_lianyao_pet_id(from.lianyao_pet_id());
    }
    if (from.has_lianyao_pet_str_lv()) {
      set_lianyao_pet_str_lv(from.lianyao_pet_str_lv());
    }
    if (from.has_pet_exclusive_skill_disable_flag()) {
      set_pet_exclusive_skill_disable_flag(from.pet_exclusive_skill_disable_flag());
    }
    if (from.has_lian_yao_exclusive_skill_disable_flag()) {
      set_lian_yao_exclusive_skill_disable_flag(from.lian_yao_exclusive_skill_disable_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_PetBattleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_PetBattleData::CopyFrom(const PB_PetBattleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_PetBattleData::IsInitialized() const {

  return true;
}

void PB_PetBattleData::Swap(PB_PetBattleData* other) {
  if (other != this) {
    std::swap(battle_data_, other->battle_data_);
    passive_list_.Swap(&other->passive_list_);
    std::swap(auto_move_type_, other->auto_move_type_);
    std::swap(auto_skill_id_, other->auto_skill_id_);
    std::swap(auto_skill_level_, other->auto_skill_level_);
    std::swap(exclusive_passive_skill_obsolete_, other->exclusive_passive_skill_obsolete_);
    std::swap(skin_id_, other->skin_id_);
    other_sp_list_.Swap(&other->other_sp_list_);
    std::swap(unique_id_, other->unique_id_);
    passive_level_list_.Swap(&other->passive_level_list_);
    std::swap(lianyao_pet_id_, other->lianyao_pet_id_);
    std::swap(lianyao_pet_str_lv_, other->lianyao_pet_str_lv_);
    std::swap(pet_exclusive_skill_disable_flag_, other->pet_exclusive_skill_disable_flag_);
    std::swap(lian_yao_exclusive_skill_disable_flag_, other->lian_yao_exclusive_skill_disable_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_PetBattleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_PetBattleData_descriptor_;
  metadata.reflection = PB_PetBattleData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
