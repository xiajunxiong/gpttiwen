// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: platform_battle_role_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "platform_battle_role_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PB_PlatformBattleRoleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_PlatformBattleRoleData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_platform_5fbattle_5frole_5fdata_2eproto() {
  protobuf_AddDesc_platform_5fbattle_5frole_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "platform_battle_role_data.proto");
  GOOGLE_CHECK(file != NULL);
  PB_PlatformBattleRoleData_descriptor_ = file->message_type(0);
  static const int PB_PlatformBattleRoleData_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PlatformBattleRoleData, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PlatformBattleRoleData, role_pet_train_skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PlatformBattleRoleData, battling_pet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PlatformBattleRoleData, battling_partner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PlatformBattleRoleData, role_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PlatformBattleRoleData, avatar_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PlatformBattleRoleData, headshot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PlatformBattleRoleData, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PlatformBattleRoleData, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PlatformBattleRoleData, top1_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PlatformBattleRoleData, param1_),
  };
  PB_PlatformBattleRoleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_PlatformBattleRoleData_descriptor_,
      PB_PlatformBattleRoleData::default_instance_,
      PB_PlatformBattleRoleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PlatformBattleRoleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PlatformBattleRoleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_PlatformBattleRoleData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_platform_5fbattle_5frole_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_PlatformBattleRoleData_descriptor_, &PB_PlatformBattleRoleData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_platform_5fbattle_5frole_5fdata_2eproto() {
  delete PB_PlatformBattleRoleData::default_instance_;
  delete PB_PlatformBattleRoleData_reflection_;
}

void protobuf_AddDesc_platform_5fbattle_5frole_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_platform_5fbattle_5fpet_2eproto();
  ::protobuf_AddDesc_platform_5fbattle_5fpartner_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037platform_battle_role_data.proto\032\031platf"
    "orm_battle_pet.proto\032\035platform_battle_pa"
    "rtner.proto\"\264\002\n\031PB_PlatformBattleRoleDat"
    "a\022\017\n\007role_id\030\001 \001(\005\022\"\n\032role_pet_train_ski"
    "ll_level\030\002 \001(\005\022+\n\014battling_pet\030\003 \003(\0132\025.P"
    "B_PlatformBattlePet\0223\n\020battling_partner\030"
    "\004 \003(\0132\031.PB_PlatformBattlePartner\022\022\n\nrole"
    "_level\030\005 \001(\005\022\023\n\013avatar_type\030\006 \001(\005\022\023\n\013hea"
    "dshot_id\030\007 \001(\005\022\021\n\trole_name\030\010 \001(\t\022\014\n\004pro"
    "f\030\t \001(\005\022\021\n\ttop1_time\030\n \001(\r\022\016\n\006param1\030\013 \001"
    "(\005", 402);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "platform_battle_role_data.proto", &protobuf_RegisterTypes);
  PB_PlatformBattleRoleData::default_instance_ = new PB_PlatformBattleRoleData();
  PB_PlatformBattleRoleData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_platform_5fbattle_5frole_5fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_platform_5fbattle_5frole_5fdata_2eproto {
  StaticDescriptorInitializer_platform_5fbattle_5frole_5fdata_2eproto() {
    protobuf_AddDesc_platform_5fbattle_5frole_5fdata_2eproto();
  }
} static_descriptor_initializer_platform_5fbattle_5frole_5fdata_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PB_PlatformBattleRoleData::kRoleIdFieldNumber;
const int PB_PlatformBattleRoleData::kRolePetTrainSkillLevelFieldNumber;
const int PB_PlatformBattleRoleData::kBattlingPetFieldNumber;
const int PB_PlatformBattleRoleData::kBattlingPartnerFieldNumber;
const int PB_PlatformBattleRoleData::kRoleLevelFieldNumber;
const int PB_PlatformBattleRoleData::kAvatarTypeFieldNumber;
const int PB_PlatformBattleRoleData::kHeadshotIdFieldNumber;
const int PB_PlatformBattleRoleData::kRoleNameFieldNumber;
const int PB_PlatformBattleRoleData::kProfFieldNumber;
const int PB_PlatformBattleRoleData::kTop1TimeFieldNumber;
const int PB_PlatformBattleRoleData::kParam1FieldNumber;
#endif  // !_MSC_VER

PB_PlatformBattleRoleData::PB_PlatformBattleRoleData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PB_PlatformBattleRoleData)
}

void PB_PlatformBattleRoleData::InitAsDefaultInstance() {
}

PB_PlatformBattleRoleData::PB_PlatformBattleRoleData(const PB_PlatformBattleRoleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PB_PlatformBattleRoleData)
}

void PB_PlatformBattleRoleData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  role_id_ = 0;
  role_pet_train_skill_level_ = 0;
  role_level_ = 0;
  avatar_type_ = 0;
  headshot_id_ = 0;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prof_ = 0;
  top1_time_ = 0u;
  param1_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_PlatformBattleRoleData::~PB_PlatformBattleRoleData() {
  // @@protoc_insertion_point(destructor:PB_PlatformBattleRoleData)
  SharedDtor();
}

void PB_PlatformBattleRoleData::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void PB_PlatformBattleRoleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_PlatformBattleRoleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_PlatformBattleRoleData_descriptor_;
}

const PB_PlatformBattleRoleData& PB_PlatformBattleRoleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_platform_5fbattle_5frole_5fdata_2eproto();
  return *default_instance_;
}

PB_PlatformBattleRoleData* PB_PlatformBattleRoleData::default_instance_ = NULL;

PB_PlatformBattleRoleData* PB_PlatformBattleRoleData::New() const {
  return new PB_PlatformBattleRoleData;
}

void PB_PlatformBattleRoleData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PB_PlatformBattleRoleData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 243) {
    ZR_(role_id_, role_pet_train_skill_level_);
    ZR_(role_level_, avatar_type_);
    headshot_id_ = 0;
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        role_name_->clear();
      }
    }
  }
  ZR_(prof_, param1_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  battling_pet_.Clear();
  battling_partner_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_PlatformBattleRoleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PB_PlatformBattleRoleData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 role_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_role_pet_train_skill_level;
        break;
      }

      // optional int32 role_pet_train_skill_level = 2;
      case 2: {
        if (tag == 16) {
         parse_role_pet_train_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_pet_train_skill_level_)));
          set_has_role_pet_train_skill_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_battling_pet;
        break;
      }

      // repeated .PB_PlatformBattlePet battling_pet = 3;
      case 3: {
        if (tag == 26) {
         parse_battling_pet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battling_pet()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_battling_pet;
        if (input->ExpectTag(34)) goto parse_battling_partner;
        break;
      }

      // repeated .PB_PlatformBattlePartner battling_partner = 4;
      case 4: {
        if (tag == 34) {
         parse_battling_partner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battling_partner()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_battling_partner;
        if (input->ExpectTag(40)) goto parse_role_level;
        break;
      }

      // optional int32 role_level = 5;
      case 5: {
        if (tag == 40) {
         parse_role_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_level_)));
          set_has_role_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_avatar_type;
        break;
      }

      // optional int32 avatar_type = 6;
      case 6: {
        if (tag == 48) {
         parse_avatar_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avatar_type_)));
          set_has_avatar_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_headshot_id;
        break;
      }

      // optional int32 headshot_id = 7;
      case 7: {
        if (tag == 56) {
         parse_headshot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headshot_id_)));
          set_has_headshot_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_role_name;
        break;
      }

      // optional string role_name = 8;
      case 8: {
        if (tag == 66) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "role_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_prof;
        break;
      }

      // optional int32 prof = 9;
      case 9: {
        if (tag == 72) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_top1_time;
        break;
      }

      // optional uint32 top1_time = 10;
      case 10: {
        if (tag == 80) {
         parse_top1_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top1_time_)));
          set_has_top1_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_param1;
        break;
      }

      // optional int32 param1 = 11;
      case 11: {
        if (tag == 88) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PB_PlatformBattleRoleData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PB_PlatformBattleRoleData)
  return false;
#undef DO_
}

void PB_PlatformBattleRoleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PB_PlatformBattleRoleData)
  // optional int32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->role_id(), output);
  }

  // optional int32 role_pet_train_skill_level = 2;
  if (has_role_pet_train_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->role_pet_train_skill_level(), output);
  }

  // repeated .PB_PlatformBattlePet battling_pet = 3;
  for (int i = 0; i < this->battling_pet_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->battling_pet(i), output);
  }

  // repeated .PB_PlatformBattlePartner battling_partner = 4;
  for (int i = 0; i < this->battling_partner_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->battling_partner(i), output);
  }

  // optional int32 role_level = 5;
  if (has_role_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->role_level(), output);
  }

  // optional int32 avatar_type = 6;
  if (has_avatar_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->avatar_type(), output);
  }

  // optional int32 headshot_id = 7;
  if (has_headshot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->headshot_id(), output);
  }

  // optional string role_name = 8;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "role_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->role_name(), output);
  }

  // optional int32 prof = 9;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->prof(), output);
  }

  // optional uint32 top1_time = 10;
  if (has_top1_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->top1_time(), output);
  }

  // optional int32 param1 = 11;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->param1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PB_PlatformBattleRoleData)
}

::google::protobuf::uint8* PB_PlatformBattleRoleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_PlatformBattleRoleData)
  // optional int32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->role_id(), target);
  }

  // optional int32 role_pet_train_skill_level = 2;
  if (has_role_pet_train_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->role_pet_train_skill_level(), target);
  }

  // repeated .PB_PlatformBattlePet battling_pet = 3;
  for (int i = 0; i < this->battling_pet_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->battling_pet(i), target);
  }

  // repeated .PB_PlatformBattlePartner battling_partner = 4;
  for (int i = 0; i < this->battling_partner_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->battling_partner(i), target);
  }

  // optional int32 role_level = 5;
  if (has_role_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->role_level(), target);
  }

  // optional int32 avatar_type = 6;
  if (has_avatar_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->avatar_type(), target);
  }

  // optional int32 headshot_id = 7;
  if (has_headshot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->headshot_id(), target);
  }

  // optional string role_name = 8;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "role_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->role_name(), target);
  }

  // optional int32 prof = 9;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->prof(), target);
  }

  // optional uint32 top1_time = 10;
  if (has_top1_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->top1_time(), target);
  }

  // optional int32 param1 = 11;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->param1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_PlatformBattleRoleData)
  return target;
}

int PB_PlatformBattleRoleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_id());
    }

    // optional int32 role_pet_train_skill_level = 2;
    if (has_role_pet_train_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_pet_train_skill_level());
    }

    // optional int32 role_level = 5;
    if (has_role_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_level());
    }

    // optional int32 avatar_type = 6;
    if (has_avatar_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avatar_type());
    }

    // optional int32 headshot_id = 7;
    if (has_headshot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headshot_id());
    }

    // optional string role_name = 8;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 prof = 9;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prof());
    }

    // optional uint32 top1_time = 10;
    if (has_top1_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top1_time());
    }

    // optional int32 param1 = 11;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param1());
    }

  }
  // repeated .PB_PlatformBattlePet battling_pet = 3;
  total_size += 1 * this->battling_pet_size();
  for (int i = 0; i < this->battling_pet_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battling_pet(i));
  }

  // repeated .PB_PlatformBattlePartner battling_partner = 4;
  total_size += 1 * this->battling_partner_size();
  for (int i = 0; i < this->battling_partner_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battling_partner(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_PlatformBattleRoleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_PlatformBattleRoleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_PlatformBattleRoleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_PlatformBattleRoleData::MergeFrom(const PB_PlatformBattleRoleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  battling_pet_.MergeFrom(from.battling_pet_);
  battling_partner_.MergeFrom(from.battling_partner_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_pet_train_skill_level()) {
      set_role_pet_train_skill_level(from.role_pet_train_skill_level());
    }
    if (from.has_role_level()) {
      set_role_level(from.role_level());
    }
    if (from.has_avatar_type()) {
      set_avatar_type(from.avatar_type());
    }
    if (from.has_headshot_id()) {
      set_headshot_id(from.headshot_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_top1_time()) {
      set_top1_time(from.top1_time());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_PlatformBattleRoleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_PlatformBattleRoleData::CopyFrom(const PB_PlatformBattleRoleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_PlatformBattleRoleData::IsInitialized() const {

  return true;
}

void PB_PlatformBattleRoleData::Swap(PB_PlatformBattleRoleData* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_pet_train_skill_level_, other->role_pet_train_skill_level_);
    battling_pet_.Swap(&other->battling_pet_);
    battling_partner_.Swap(&other->battling_partner_);
    std::swap(role_level_, other->role_level_);
    std::swap(avatar_type_, other->avatar_type_);
    std::swap(headshot_id_, other->headshot_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(prof_, other->prof_);
    std::swap(top1_time_, other->top1_time_);
    std::swap(param1_, other->param1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_PlatformBattleRoleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_PlatformBattleRoleData_descriptor_;
  metadata.reflection = PB_PlatformBattleRoleData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
