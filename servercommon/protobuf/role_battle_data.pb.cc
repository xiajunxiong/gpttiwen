// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: role_battle_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "role_battle_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PB_RoleBattleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_RoleBattleData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_RoleBattleData_AttrInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_RoleBattleData_AttrInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_RoleBattleData_BattleFabao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_RoleBattleData_BattleFabao_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_RoleBattleData_PetPartnerBattleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_RoleBattleData_PetPartnerBattleData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_RoleBattleData_BattleHeartSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_RoleBattleData_BattleHeartSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_RoleBattleData_BattleHallowData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_RoleBattleData_BattleHallowData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_RoleBattleData_BattleHuanShouSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_RoleBattleData_BattleHuanShouSkill_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_role_5fbattle_5fdata_2eproto() {
  protobuf_AddDesc_role_5fbattle_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "role_battle_data.proto");
  GOOGLE_CHECK(file != NULL);
  PB_RoleBattleData_descriptor_ = file->message_type(0);
  static const int PB_RoleBattleData_offsets_[37] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, is_auto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, is_role_stand_front_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, role_character_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, huanshou_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, partner_character_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, fight_pet_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, pet_character_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, auto_first_move_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, auto_first_skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, auto_first_skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, auto_second_move_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, auto_second_skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, auto_second_skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, weapon_attr_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, weapon_sp_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, other_sp_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, fabao_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, appearance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, guild_buff_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, pet_helper_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, top_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, heart_skill_is_vaild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, heart_skill_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, jieyi_uid_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, jieyi_skill_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, soaring_skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, soaring_skill_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, qingyuan_target_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, qingyuan_skill_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, is_robot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, career_suppress_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, change_card_skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, change_card_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, role_extra_capability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, hallow_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, fight_hallow_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, huanshou_skill_),
  };
  PB_RoleBattleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_RoleBattleData_descriptor_,
      PB_RoleBattleData::default_instance_,
      PB_RoleBattleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_RoleBattleData));
  PB_RoleBattleData_AttrInfo_descriptor_ = PB_RoleBattleData_descriptor_->nested_type(0);
  static const int PB_RoleBattleData_AttrInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_AttrInfo, attr_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_AttrInfo, attr_value_),
  };
  PB_RoleBattleData_AttrInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_RoleBattleData_AttrInfo_descriptor_,
      PB_RoleBattleData_AttrInfo::default_instance_,
      PB_RoleBattleData_AttrInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_AttrInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_AttrInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_RoleBattleData_AttrInfo));
  PB_RoleBattleData_BattleFabao_descriptor_ = PB_RoleBattleData_descriptor_->nested_type(1);
  static const int PB_RoleBattleData_BattleFabao_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_BattleFabao, fabao_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_BattleFabao, fabao_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_BattleFabao, fabao_skill_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_BattleFabao, fabao_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_BattleFabao, fabao_effect_percent_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_BattleFabao, fabao_effect_percent_num_2_),
  };
  PB_RoleBattleData_BattleFabao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_RoleBattleData_BattleFabao_descriptor_,
      PB_RoleBattleData_BattleFabao::default_instance_,
      PB_RoleBattleData_BattleFabao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_BattleFabao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_BattleFabao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_RoleBattleData_BattleFabao));
  PB_RoleBattleData_PetPartnerBattleData_descriptor_ = PB_RoleBattleData_descriptor_->nested_type(2);
  static const int PB_RoleBattleData_PetPartnerBattleData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_PetPartnerBattleData, battle_row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_PetPartnerBattleData, battle_column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_PetPartnerBattleData, pet_data_),
  };
  PB_RoleBattleData_PetPartnerBattleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_RoleBattleData_PetPartnerBattleData_descriptor_,
      PB_RoleBattleData_PetPartnerBattleData::default_instance_,
      PB_RoleBattleData_PetPartnerBattleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_PetPartnerBattleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_PetPartnerBattleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_RoleBattleData_PetPartnerBattleData));
  PB_RoleBattleData_BattleHeartSkill_descriptor_ = PB_RoleBattleData_descriptor_->nested_type(3);
  static const int PB_RoleBattleData_BattleHeartSkill_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_BattleHeartSkill, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_BattleHeartSkill, skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_BattleHeartSkill, remain_times_),
  };
  PB_RoleBattleData_BattleHeartSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_RoleBattleData_BattleHeartSkill_descriptor_,
      PB_RoleBattleData_BattleHeartSkill::default_instance_,
      PB_RoleBattleData_BattleHeartSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_BattleHeartSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_BattleHeartSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_RoleBattleData_BattleHeartSkill));
  PB_RoleBattleData_BattleHallowData_descriptor_ = PB_RoleBattleData_descriptor_->nested_type(4);
  static const int PB_RoleBattleData_BattleHallowData_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_BattleHallowData, hallow_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_BattleHallowData, hallow_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_BattleHallowData, attr_active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_BattleHallowData, attr_active_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_BattleHallowData, attr_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_BattleHallowData, attr_recover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_BattleHallowData, attr_knock_off_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_BattleHallowData, attr_anti_knock_off_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_BattleHallowData, attr_intervene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_BattleHallowData, attr_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_BattleHallowData, skill_id_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_BattleHallowData, skill_lv_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_BattleHallowData, gift_list_),
  };
  PB_RoleBattleData_BattleHallowData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_RoleBattleData_BattleHallowData_descriptor_,
      PB_RoleBattleData_BattleHallowData::default_instance_,
      PB_RoleBattleData_BattleHallowData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_BattleHallowData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_BattleHallowData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_RoleBattleData_BattleHallowData));
  PB_RoleBattleData_BattleHuanShouSkill_descriptor_ = PB_RoleBattleData_descriptor_->nested_type(5);
  static const int PB_RoleBattleData_BattleHuanShouSkill_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_BattleHuanShouSkill, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_BattleHuanShouSkill, skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_BattleHuanShouSkill, cd_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_BattleHuanShouSkill, cd_perform_),
  };
  PB_RoleBattleData_BattleHuanShouSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_RoleBattleData_BattleHuanShouSkill_descriptor_,
      PB_RoleBattleData_BattleHuanShouSkill::default_instance_,
      PB_RoleBattleData_BattleHuanShouSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_BattleHuanShouSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleBattleData_BattleHuanShouSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_RoleBattleData_BattleHuanShouSkill));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_role_5fbattle_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_RoleBattleData_descriptor_, &PB_RoleBattleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_RoleBattleData_AttrInfo_descriptor_, &PB_RoleBattleData_AttrInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_RoleBattleData_BattleFabao_descriptor_, &PB_RoleBattleData_BattleFabao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_RoleBattleData_PetPartnerBattleData_descriptor_, &PB_RoleBattleData_PetPartnerBattleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_RoleBattleData_BattleHeartSkill_descriptor_, &PB_RoleBattleData_BattleHeartSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_RoleBattleData_BattleHallowData_descriptor_, &PB_RoleBattleData_BattleHallowData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_RoleBattleData_BattleHuanShouSkill_descriptor_, &PB_RoleBattleData_BattleHuanShouSkill::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_role_5fbattle_5fdata_2eproto() {
  delete PB_RoleBattleData::default_instance_;
  delete PB_RoleBattleData_reflection_;
  delete PB_RoleBattleData_AttrInfo::default_instance_;
  delete PB_RoleBattleData_AttrInfo_reflection_;
  delete PB_RoleBattleData_BattleFabao::default_instance_;
  delete PB_RoleBattleData_BattleFabao_reflection_;
  delete PB_RoleBattleData_PetPartnerBattleData::default_instance_;
  delete PB_RoleBattleData_PetPartnerBattleData_reflection_;
  delete PB_RoleBattleData_BattleHeartSkill::default_instance_;
  delete PB_RoleBattleData_BattleHeartSkill_reflection_;
  delete PB_RoleBattleData_BattleHallowData::default_instance_;
  delete PB_RoleBattleData_BattleHallowData_reflection_;
  delete PB_RoleBattleData_BattleHuanShouSkill::default_instance_;
  delete PB_RoleBattleData_BattleHuanShouSkill_reflection_;
}

void protobuf_AddDesc_role_5fbattle_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_battle_5fcharacter_5fdata_2eproto();
  ::protobuf_AddDesc_pet_5fbattle_5fdata_2eproto();
  ::protobuf_AddDesc_partner_5fbattle_5fdata_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026role_battle_data.proto\032\033battle_charact"
    "er_data.proto\032\025pet_battle_data.proto\032\031pa"
    "rtner_battle_data.proto\"\253\020\n\021PB_RoleBattl"
    "eData\022\017\n\007is_auto\030\001 \001(\010\022\033\n\023is_role_stand_"
    "front\030\002 \001(\010\0224\n\023role_character_data\030\003 \001(\013"
    "2\027.PB_BattleCharacterData\022\026\n\016huanshou_le"
    "vel\030\004 \001(\005\0225\n\026partner_character_data\030\005 \003("
    "\0132\025.PB_PartnerBattleData\022\025\n\rfight_pet_id"
    "x\030\006 \001(\021\022-\n\022pet_character_data\030\007 \003(\0132\021.PB"
    "_PetBattleData\022\034\n\024auto_first_move_type\030\010"
    " \001(\005\022\033\n\023auto_first_skill_id\030\t \001(\005\022\036\n\026aut"
    "o_first_skill_level\030\n \001(\005\022\035\n\025auto_second"
    "_move_type\030\013 \001(\005\022\034\n\024auto_second_skill_id"
    "\030\014 \001(\005\022\037\n\027auto_second_skill_level\030\r \001(\005\022"
    "5\n\020weapon_attr_list\030\016 \003(\0132\033.PB_RoleBattl"
    "eData.AttrInfo\022\026\n\016weapon_sp_list\030\017 \003(\005\022\025"
    "\n\rother_sp_list\030\020 \003(\005\0222\n\nfabao_list\030\021 \003("
    "\0132\036.PB_RoleBattleData.BattleFabao\022\022\n\napp"
    "earance\030\022 \001(\014\022\027\n\017guild_buff_list\030\025 \003(\005\022@"
    "\n\017pet_helper_data\030\026 \003(\0132\'.PB_RoleBattleD"
    "ata.PetPartnerBattleData\022\021\n\ttop_level\030\027 "
    "\001(\005\022\034\n\024heart_skill_is_vaild\030\031 \001(\005\022=\n\020hea"
    "rt_skill_list\030\032 \003(\0132#.PB_RoleBattleData."
    "BattleHeartSkill\022\026\n\016jieyi_uid_list\030\033 \003(\005"
    "\022\030\n\020jieyi_skill_list\030\034 \003(\005\022\030\n\020soaring_sk"
    "ill_id\030\035 \001(\005\022\030\n\020soaring_skill_lv\030\036 \001(\005\022\033"
    "\n\023qingyuan_target_uid\030\037 \001(\005\022\033\n\023qingyuan_"
    "skill_list\030  \003(\005\022\020\n\010is_robot\030! \001(\010\022\035\n\025ca"
    "reer_suppress_value\030\" \001(\005\022\034\n\024change_card"
    "_skill_id\030# \001(\005\022\027\n\017change_card_seq\030$ \001(\005"
    "\022\035\n\025role_extra_capability\030% \001(\005\0228\n\013hallo"
    "w_list\030& \003(\0132#.PB_RoleBattleData.BattleH"
    "allowData\022\030\n\020fight_hallow_idx\030\' \001(\005\022>\n\016h"
    "uanshou_skill\030( \001(\0132&.PB_RoleBattleData."
    "BattleHuanShouSkill\0321\n\010AttrInfo\022\021\n\tattr_"
    "type\030\001 \001(\005\022\022\n\nattr_value\030\002 \001(\005\032\251\001\n\013Battl"
    "eFabao\022\020\n\010fabao_id\030\001 \001(\005\022\023\n\013fabao_level\030"
    "\002 \001(\005\022\030\n\020fabao_skill_type\030\003 \001(\005\022\023\n\013fabao"
    "_grade\030\004 \001(\005\022 \n\030fabao_effect_percent_num"
    "\030\005 \001(\005\022\"\n\032fabao_effect_percent_num_2\030\006 \001"
    "(\005\032f\n\024PetPartnerBattleData\022\022\n\nbattle_row"
    "\030\001 \001(\005\022\025\n\rbattle_column\030\002 \001(\005\022#\n\010pet_dat"
    "a\030\003 \001(\0132\021.PB_PetBattleData\032O\n\020BattleHear"
    "tSkill\022\020\n\010skill_id\030\001 \001(\005\022\023\n\013skill_level\030"
    "\002 \001(\005\022\024\n\014remain_times\030\003 \001(\005\032\263\002\n\020BattleHa"
    "llowData\022\021\n\thallow_id\030\001 \001(\005\022\021\n\thallow_lv"
    "\030\002 \001(\005\022\023\n\013attr_active\030\003 \001(\001\022\027\n\017attr_acti"
    "ve_max\030\004 \001(\001\022\023\n\013attr_damage\030\005 \001(\001\022\024\n\014att"
    "r_recover\030\006 \001(\001\022\026\n\016attr_knock_off\030\007 \001(\001\022"
    "\033\n\023attr_anti_knock_off\030\010 \001(\001\022\026\n\016attr_int"
    "ervene\030\t \001(\001\022\022\n\nattr_speed\030\n \001(\001\022\025\n\rskil"
    "l_id_list\030\014 \003(\005\022\025\n\rskill_lv_list\030\r \003(\005\022\021"
    "\n\tgift_list\030\016 \003(\005\032b\n\023BattleHuanShouSkill"
    "\022\020\n\010skill_id\030\001 \001(\005\022\023\n\013skill_level\030\002 \001(\005\022"
    "\020\n\010cd_start\030\003 \001(\005\022\022\n\ncd_perform\030\004 \001(\005", 2197);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "role_battle_data.proto", &protobuf_RegisterTypes);
  PB_RoleBattleData::default_instance_ = new PB_RoleBattleData();
  PB_RoleBattleData_AttrInfo::default_instance_ = new PB_RoleBattleData_AttrInfo();
  PB_RoleBattleData_BattleFabao::default_instance_ = new PB_RoleBattleData_BattleFabao();
  PB_RoleBattleData_PetPartnerBattleData::default_instance_ = new PB_RoleBattleData_PetPartnerBattleData();
  PB_RoleBattleData_BattleHeartSkill::default_instance_ = new PB_RoleBattleData_BattleHeartSkill();
  PB_RoleBattleData_BattleHallowData::default_instance_ = new PB_RoleBattleData_BattleHallowData();
  PB_RoleBattleData_BattleHuanShouSkill::default_instance_ = new PB_RoleBattleData_BattleHuanShouSkill();
  PB_RoleBattleData::default_instance_->InitAsDefaultInstance();
  PB_RoleBattleData_AttrInfo::default_instance_->InitAsDefaultInstance();
  PB_RoleBattleData_BattleFabao::default_instance_->InitAsDefaultInstance();
  PB_RoleBattleData_PetPartnerBattleData::default_instance_->InitAsDefaultInstance();
  PB_RoleBattleData_BattleHeartSkill::default_instance_->InitAsDefaultInstance();
  PB_RoleBattleData_BattleHallowData::default_instance_->InitAsDefaultInstance();
  PB_RoleBattleData_BattleHuanShouSkill::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_role_5fbattle_5fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_role_5fbattle_5fdata_2eproto {
  StaticDescriptorInitializer_role_5fbattle_5fdata_2eproto() {
    protobuf_AddDesc_role_5fbattle_5fdata_2eproto();
  }
} static_descriptor_initializer_role_5fbattle_5fdata_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PB_RoleBattleData_AttrInfo::kAttrTypeFieldNumber;
const int PB_RoleBattleData_AttrInfo::kAttrValueFieldNumber;
#endif  // !_MSC_VER

PB_RoleBattleData_AttrInfo::PB_RoleBattleData_AttrInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PB_RoleBattleData.AttrInfo)
}

void PB_RoleBattleData_AttrInfo::InitAsDefaultInstance() {
}

PB_RoleBattleData_AttrInfo::PB_RoleBattleData_AttrInfo(const PB_RoleBattleData_AttrInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PB_RoleBattleData.AttrInfo)
}

void PB_RoleBattleData_AttrInfo::SharedCtor() {
  _cached_size_ = 0;
  attr_type_ = 0;
  attr_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_RoleBattleData_AttrInfo::~PB_RoleBattleData_AttrInfo() {
  // @@protoc_insertion_point(destructor:PB_RoleBattleData.AttrInfo)
  SharedDtor();
}

void PB_RoleBattleData_AttrInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_RoleBattleData_AttrInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_RoleBattleData_AttrInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_RoleBattleData_AttrInfo_descriptor_;
}

const PB_RoleBattleData_AttrInfo& PB_RoleBattleData_AttrInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_5fbattle_5fdata_2eproto();
  return *default_instance_;
}

PB_RoleBattleData_AttrInfo* PB_RoleBattleData_AttrInfo::default_instance_ = NULL;

PB_RoleBattleData_AttrInfo* PB_RoleBattleData_AttrInfo::New() const {
  return new PB_RoleBattleData_AttrInfo;
}

void PB_RoleBattleData_AttrInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PB_RoleBattleData_AttrInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(attr_type_, attr_value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_RoleBattleData_AttrInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PB_RoleBattleData.AttrInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 attr_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attr_type_)));
          set_has_attr_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_attr_value;
        break;
      }

      // optional int32 attr_value = 2;
      case 2: {
        if (tag == 16) {
         parse_attr_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attr_value_)));
          set_has_attr_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PB_RoleBattleData.AttrInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PB_RoleBattleData.AttrInfo)
  return false;
#undef DO_
}

void PB_RoleBattleData_AttrInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PB_RoleBattleData.AttrInfo)
  // optional int32 attr_type = 1;
  if (has_attr_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->attr_type(), output);
  }

  // optional int32 attr_value = 2;
  if (has_attr_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attr_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PB_RoleBattleData.AttrInfo)
}

::google::protobuf::uint8* PB_RoleBattleData_AttrInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_RoleBattleData.AttrInfo)
  // optional int32 attr_type = 1;
  if (has_attr_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->attr_type(), target);
  }

  // optional int32 attr_value = 2;
  if (has_attr_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attr_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_RoleBattleData.AttrInfo)
  return target;
}

int PB_RoleBattleData_AttrInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 attr_type = 1;
    if (has_attr_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attr_type());
    }

    // optional int32 attr_value = 2;
    if (has_attr_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attr_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_RoleBattleData_AttrInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_RoleBattleData_AttrInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_RoleBattleData_AttrInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_RoleBattleData_AttrInfo::MergeFrom(const PB_RoleBattleData_AttrInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attr_type()) {
      set_attr_type(from.attr_type());
    }
    if (from.has_attr_value()) {
      set_attr_value(from.attr_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_RoleBattleData_AttrInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_RoleBattleData_AttrInfo::CopyFrom(const PB_RoleBattleData_AttrInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_RoleBattleData_AttrInfo::IsInitialized() const {

  return true;
}

void PB_RoleBattleData_AttrInfo::Swap(PB_RoleBattleData_AttrInfo* other) {
  if (other != this) {
    std::swap(attr_type_, other->attr_type_);
    std::swap(attr_value_, other->attr_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_RoleBattleData_AttrInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_RoleBattleData_AttrInfo_descriptor_;
  metadata.reflection = PB_RoleBattleData_AttrInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PB_RoleBattleData_BattleFabao::kFabaoIdFieldNumber;
const int PB_RoleBattleData_BattleFabao::kFabaoLevelFieldNumber;
const int PB_RoleBattleData_BattleFabao::kFabaoSkillTypeFieldNumber;
const int PB_RoleBattleData_BattleFabao::kFabaoGradeFieldNumber;
const int PB_RoleBattleData_BattleFabao::kFabaoEffectPercentNumFieldNumber;
const int PB_RoleBattleData_BattleFabao::kFabaoEffectPercentNum2FieldNumber;
#endif  // !_MSC_VER

PB_RoleBattleData_BattleFabao::PB_RoleBattleData_BattleFabao()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PB_RoleBattleData.BattleFabao)
}

void PB_RoleBattleData_BattleFabao::InitAsDefaultInstance() {
}

PB_RoleBattleData_BattleFabao::PB_RoleBattleData_BattleFabao(const PB_RoleBattleData_BattleFabao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PB_RoleBattleData.BattleFabao)
}

void PB_RoleBattleData_BattleFabao::SharedCtor() {
  _cached_size_ = 0;
  fabao_id_ = 0;
  fabao_level_ = 0;
  fabao_skill_type_ = 0;
  fabao_grade_ = 0;
  fabao_effect_percent_num_ = 0;
  fabao_effect_percent_num_2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_RoleBattleData_BattleFabao::~PB_RoleBattleData_BattleFabao() {
  // @@protoc_insertion_point(destructor:PB_RoleBattleData.BattleFabao)
  SharedDtor();
}

void PB_RoleBattleData_BattleFabao::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_RoleBattleData_BattleFabao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_RoleBattleData_BattleFabao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_RoleBattleData_BattleFabao_descriptor_;
}

const PB_RoleBattleData_BattleFabao& PB_RoleBattleData_BattleFabao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_5fbattle_5fdata_2eproto();
  return *default_instance_;
}

PB_RoleBattleData_BattleFabao* PB_RoleBattleData_BattleFabao::default_instance_ = NULL;

PB_RoleBattleData_BattleFabao* PB_RoleBattleData_BattleFabao::New() const {
  return new PB_RoleBattleData_BattleFabao;
}

void PB_RoleBattleData_BattleFabao::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PB_RoleBattleData_BattleFabao*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(fabao_id_, fabao_effect_percent_num_2_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_RoleBattleData_BattleFabao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PB_RoleBattleData.BattleFabao)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fabao_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fabao_id_)));
          set_has_fabao_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fabao_level;
        break;
      }

      // optional int32 fabao_level = 2;
      case 2: {
        if (tag == 16) {
         parse_fabao_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fabao_level_)));
          set_has_fabao_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fabao_skill_type;
        break;
      }

      // optional int32 fabao_skill_type = 3;
      case 3: {
        if (tag == 24) {
         parse_fabao_skill_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fabao_skill_type_)));
          set_has_fabao_skill_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fabao_grade;
        break;
      }

      // optional int32 fabao_grade = 4;
      case 4: {
        if (tag == 32) {
         parse_fabao_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fabao_grade_)));
          set_has_fabao_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fabao_effect_percent_num;
        break;
      }

      // optional int32 fabao_effect_percent_num = 5;
      case 5: {
        if (tag == 40) {
         parse_fabao_effect_percent_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fabao_effect_percent_num_)));
          set_has_fabao_effect_percent_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_fabao_effect_percent_num_2;
        break;
      }

      // optional int32 fabao_effect_percent_num_2 = 6;
      case 6: {
        if (tag == 48) {
         parse_fabao_effect_percent_num_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fabao_effect_percent_num_2_)));
          set_has_fabao_effect_percent_num_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PB_RoleBattleData.BattleFabao)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PB_RoleBattleData.BattleFabao)
  return false;
#undef DO_
}

void PB_RoleBattleData_BattleFabao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PB_RoleBattleData.BattleFabao)
  // optional int32 fabao_id = 1;
  if (has_fabao_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fabao_id(), output);
  }

  // optional int32 fabao_level = 2;
  if (has_fabao_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fabao_level(), output);
  }

  // optional int32 fabao_skill_type = 3;
  if (has_fabao_skill_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fabao_skill_type(), output);
  }

  // optional int32 fabao_grade = 4;
  if (has_fabao_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fabao_grade(), output);
  }

  // optional int32 fabao_effect_percent_num = 5;
  if (has_fabao_effect_percent_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fabao_effect_percent_num(), output);
  }

  // optional int32 fabao_effect_percent_num_2 = 6;
  if (has_fabao_effect_percent_num_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fabao_effect_percent_num_2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PB_RoleBattleData.BattleFabao)
}

::google::protobuf::uint8* PB_RoleBattleData_BattleFabao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_RoleBattleData.BattleFabao)
  // optional int32 fabao_id = 1;
  if (has_fabao_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fabao_id(), target);
  }

  // optional int32 fabao_level = 2;
  if (has_fabao_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fabao_level(), target);
  }

  // optional int32 fabao_skill_type = 3;
  if (has_fabao_skill_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fabao_skill_type(), target);
  }

  // optional int32 fabao_grade = 4;
  if (has_fabao_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fabao_grade(), target);
  }

  // optional int32 fabao_effect_percent_num = 5;
  if (has_fabao_effect_percent_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fabao_effect_percent_num(), target);
  }

  // optional int32 fabao_effect_percent_num_2 = 6;
  if (has_fabao_effect_percent_num_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->fabao_effect_percent_num_2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_RoleBattleData.BattleFabao)
  return target;
}

int PB_RoleBattleData_BattleFabao::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 fabao_id = 1;
    if (has_fabao_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fabao_id());
    }

    // optional int32 fabao_level = 2;
    if (has_fabao_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fabao_level());
    }

    // optional int32 fabao_skill_type = 3;
    if (has_fabao_skill_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fabao_skill_type());
    }

    // optional int32 fabao_grade = 4;
    if (has_fabao_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fabao_grade());
    }

    // optional int32 fabao_effect_percent_num = 5;
    if (has_fabao_effect_percent_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fabao_effect_percent_num());
    }

    // optional int32 fabao_effect_percent_num_2 = 6;
    if (has_fabao_effect_percent_num_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fabao_effect_percent_num_2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_RoleBattleData_BattleFabao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_RoleBattleData_BattleFabao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_RoleBattleData_BattleFabao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_RoleBattleData_BattleFabao::MergeFrom(const PB_RoleBattleData_BattleFabao& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fabao_id()) {
      set_fabao_id(from.fabao_id());
    }
    if (from.has_fabao_level()) {
      set_fabao_level(from.fabao_level());
    }
    if (from.has_fabao_skill_type()) {
      set_fabao_skill_type(from.fabao_skill_type());
    }
    if (from.has_fabao_grade()) {
      set_fabao_grade(from.fabao_grade());
    }
    if (from.has_fabao_effect_percent_num()) {
      set_fabao_effect_percent_num(from.fabao_effect_percent_num());
    }
    if (from.has_fabao_effect_percent_num_2()) {
      set_fabao_effect_percent_num_2(from.fabao_effect_percent_num_2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_RoleBattleData_BattleFabao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_RoleBattleData_BattleFabao::CopyFrom(const PB_RoleBattleData_BattleFabao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_RoleBattleData_BattleFabao::IsInitialized() const {

  return true;
}

void PB_RoleBattleData_BattleFabao::Swap(PB_RoleBattleData_BattleFabao* other) {
  if (other != this) {
    std::swap(fabao_id_, other->fabao_id_);
    std::swap(fabao_level_, other->fabao_level_);
    std::swap(fabao_skill_type_, other->fabao_skill_type_);
    std::swap(fabao_grade_, other->fabao_grade_);
    std::swap(fabao_effect_percent_num_, other->fabao_effect_percent_num_);
    std::swap(fabao_effect_percent_num_2_, other->fabao_effect_percent_num_2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_RoleBattleData_BattleFabao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_RoleBattleData_BattleFabao_descriptor_;
  metadata.reflection = PB_RoleBattleData_BattleFabao_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PB_RoleBattleData_PetPartnerBattleData::kBattleRowFieldNumber;
const int PB_RoleBattleData_PetPartnerBattleData::kBattleColumnFieldNumber;
const int PB_RoleBattleData_PetPartnerBattleData::kPetDataFieldNumber;
#endif  // !_MSC_VER

PB_RoleBattleData_PetPartnerBattleData::PB_RoleBattleData_PetPartnerBattleData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PB_RoleBattleData.PetPartnerBattleData)
}

void PB_RoleBattleData_PetPartnerBattleData::InitAsDefaultInstance() {
  pet_data_ = const_cast< ::PB_PetBattleData*>(&::PB_PetBattleData::default_instance());
}

PB_RoleBattleData_PetPartnerBattleData::PB_RoleBattleData_PetPartnerBattleData(const PB_RoleBattleData_PetPartnerBattleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PB_RoleBattleData.PetPartnerBattleData)
}

void PB_RoleBattleData_PetPartnerBattleData::SharedCtor() {
  _cached_size_ = 0;
  battle_row_ = 0;
  battle_column_ = 0;
  pet_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_RoleBattleData_PetPartnerBattleData::~PB_RoleBattleData_PetPartnerBattleData() {
  // @@protoc_insertion_point(destructor:PB_RoleBattleData.PetPartnerBattleData)
  SharedDtor();
}

void PB_RoleBattleData_PetPartnerBattleData::SharedDtor() {
  if (this != default_instance_) {
    delete pet_data_;
  }
}

void PB_RoleBattleData_PetPartnerBattleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_RoleBattleData_PetPartnerBattleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_RoleBattleData_PetPartnerBattleData_descriptor_;
}

const PB_RoleBattleData_PetPartnerBattleData& PB_RoleBattleData_PetPartnerBattleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_5fbattle_5fdata_2eproto();
  return *default_instance_;
}

PB_RoleBattleData_PetPartnerBattleData* PB_RoleBattleData_PetPartnerBattleData::default_instance_ = NULL;

PB_RoleBattleData_PetPartnerBattleData* PB_RoleBattleData_PetPartnerBattleData::New() const {
  return new PB_RoleBattleData_PetPartnerBattleData;
}

void PB_RoleBattleData_PetPartnerBattleData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PB_RoleBattleData_PetPartnerBattleData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(battle_row_, battle_column_);
    if (has_pet_data()) {
      if (pet_data_ != NULL) pet_data_->::PB_PetBattleData::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_RoleBattleData_PetPartnerBattleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PB_RoleBattleData.PetPartnerBattleData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 battle_row = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_row_)));
          set_has_battle_row();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_battle_column;
        break;
      }

      // optional int32 battle_column = 2;
      case 2: {
        if (tag == 16) {
         parse_battle_column:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_column_)));
          set_has_battle_column();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pet_data;
        break;
      }

      // optional .PB_PetBattleData pet_data = 3;
      case 3: {
        if (tag == 26) {
         parse_pet_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pet_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PB_RoleBattleData.PetPartnerBattleData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PB_RoleBattleData.PetPartnerBattleData)
  return false;
#undef DO_
}

void PB_RoleBattleData_PetPartnerBattleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PB_RoleBattleData.PetPartnerBattleData)
  // optional int32 battle_row = 1;
  if (has_battle_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->battle_row(), output);
  }

  // optional int32 battle_column = 2;
  if (has_battle_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->battle_column(), output);
  }

  // optional .PB_PetBattleData pet_data = 3;
  if (has_pet_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pet_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PB_RoleBattleData.PetPartnerBattleData)
}

::google::protobuf::uint8* PB_RoleBattleData_PetPartnerBattleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_RoleBattleData.PetPartnerBattleData)
  // optional int32 battle_row = 1;
  if (has_battle_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->battle_row(), target);
  }

  // optional int32 battle_column = 2;
  if (has_battle_column()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->battle_column(), target);
  }

  // optional .PB_PetBattleData pet_data = 3;
  if (has_pet_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pet_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_RoleBattleData.PetPartnerBattleData)
  return target;
}

int PB_RoleBattleData_PetPartnerBattleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 battle_row = 1;
    if (has_battle_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_row());
    }

    // optional int32 battle_column = 2;
    if (has_battle_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_column());
    }

    // optional .PB_PetBattleData pet_data = 3;
    if (has_pet_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pet_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_RoleBattleData_PetPartnerBattleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_RoleBattleData_PetPartnerBattleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_RoleBattleData_PetPartnerBattleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_RoleBattleData_PetPartnerBattleData::MergeFrom(const PB_RoleBattleData_PetPartnerBattleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battle_row()) {
      set_battle_row(from.battle_row());
    }
    if (from.has_battle_column()) {
      set_battle_column(from.battle_column());
    }
    if (from.has_pet_data()) {
      mutable_pet_data()->::PB_PetBattleData::MergeFrom(from.pet_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_RoleBattleData_PetPartnerBattleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_RoleBattleData_PetPartnerBattleData::CopyFrom(const PB_RoleBattleData_PetPartnerBattleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_RoleBattleData_PetPartnerBattleData::IsInitialized() const {

  return true;
}

void PB_RoleBattleData_PetPartnerBattleData::Swap(PB_RoleBattleData_PetPartnerBattleData* other) {
  if (other != this) {
    std::swap(battle_row_, other->battle_row_);
    std::swap(battle_column_, other->battle_column_);
    std::swap(pet_data_, other->pet_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_RoleBattleData_PetPartnerBattleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_RoleBattleData_PetPartnerBattleData_descriptor_;
  metadata.reflection = PB_RoleBattleData_PetPartnerBattleData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PB_RoleBattleData_BattleHeartSkill::kSkillIdFieldNumber;
const int PB_RoleBattleData_BattleHeartSkill::kSkillLevelFieldNumber;
const int PB_RoleBattleData_BattleHeartSkill::kRemainTimesFieldNumber;
#endif  // !_MSC_VER

PB_RoleBattleData_BattleHeartSkill::PB_RoleBattleData_BattleHeartSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PB_RoleBattleData.BattleHeartSkill)
}

void PB_RoleBattleData_BattleHeartSkill::InitAsDefaultInstance() {
}

PB_RoleBattleData_BattleHeartSkill::PB_RoleBattleData_BattleHeartSkill(const PB_RoleBattleData_BattleHeartSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PB_RoleBattleData.BattleHeartSkill)
}

void PB_RoleBattleData_BattleHeartSkill::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0;
  skill_level_ = 0;
  remain_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_RoleBattleData_BattleHeartSkill::~PB_RoleBattleData_BattleHeartSkill() {
  // @@protoc_insertion_point(destructor:PB_RoleBattleData.BattleHeartSkill)
  SharedDtor();
}

void PB_RoleBattleData_BattleHeartSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_RoleBattleData_BattleHeartSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_RoleBattleData_BattleHeartSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_RoleBattleData_BattleHeartSkill_descriptor_;
}

const PB_RoleBattleData_BattleHeartSkill& PB_RoleBattleData_BattleHeartSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_5fbattle_5fdata_2eproto();
  return *default_instance_;
}

PB_RoleBattleData_BattleHeartSkill* PB_RoleBattleData_BattleHeartSkill::default_instance_ = NULL;

PB_RoleBattleData_BattleHeartSkill* PB_RoleBattleData_BattleHeartSkill::New() const {
  return new PB_RoleBattleData_BattleHeartSkill;
}

void PB_RoleBattleData_BattleHeartSkill::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PB_RoleBattleData_BattleHeartSkill*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(skill_id_, remain_times_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_RoleBattleData_BattleHeartSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PB_RoleBattleData.BattleHeartSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 skill_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_skill_level;
        break;
      }

      // optional int32 skill_level = 2;
      case 2: {
        if (tag == 16) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_remain_times;
        break;
      }

      // optional int32 remain_times = 3;
      case 3: {
        if (tag == 24) {
         parse_remain_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_times_)));
          set_has_remain_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PB_RoleBattleData.BattleHeartSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PB_RoleBattleData.BattleHeartSkill)
  return false;
#undef DO_
}

void PB_RoleBattleData_BattleHeartSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PB_RoleBattleData.BattleHeartSkill)
  // optional int32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skill_id(), output);
  }

  // optional int32 skill_level = 2;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skill_level(), output);
  }

  // optional int32 remain_times = 3;
  if (has_remain_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->remain_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PB_RoleBattleData.BattleHeartSkill)
}

::google::protobuf::uint8* PB_RoleBattleData_BattleHeartSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_RoleBattleData.BattleHeartSkill)
  // optional int32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skill_id(), target);
  }

  // optional int32 skill_level = 2;
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skill_level(), target);
  }

  // optional int32 remain_times = 3;
  if (has_remain_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->remain_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_RoleBattleData.BattleHeartSkill)
  return target;
}

int PB_RoleBattleData_BattleHeartSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }

    // optional int32 skill_level = 2;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_level());
    }

    // optional int32 remain_times = 3;
    if (has_remain_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_RoleBattleData_BattleHeartSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_RoleBattleData_BattleHeartSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_RoleBattleData_BattleHeartSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_RoleBattleData_BattleHeartSkill::MergeFrom(const PB_RoleBattleData_BattleHeartSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
    if (from.has_remain_times()) {
      set_remain_times(from.remain_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_RoleBattleData_BattleHeartSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_RoleBattleData_BattleHeartSkill::CopyFrom(const PB_RoleBattleData_BattleHeartSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_RoleBattleData_BattleHeartSkill::IsInitialized() const {

  return true;
}

void PB_RoleBattleData_BattleHeartSkill::Swap(PB_RoleBattleData_BattleHeartSkill* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(remain_times_, other->remain_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_RoleBattleData_BattleHeartSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_RoleBattleData_BattleHeartSkill_descriptor_;
  metadata.reflection = PB_RoleBattleData_BattleHeartSkill_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PB_RoleBattleData_BattleHallowData::kHallowIdFieldNumber;
const int PB_RoleBattleData_BattleHallowData::kHallowLvFieldNumber;
const int PB_RoleBattleData_BattleHallowData::kAttrActiveFieldNumber;
const int PB_RoleBattleData_BattleHallowData::kAttrActiveMaxFieldNumber;
const int PB_RoleBattleData_BattleHallowData::kAttrDamageFieldNumber;
const int PB_RoleBattleData_BattleHallowData::kAttrRecoverFieldNumber;
const int PB_RoleBattleData_BattleHallowData::kAttrKnockOffFieldNumber;
const int PB_RoleBattleData_BattleHallowData::kAttrAntiKnockOffFieldNumber;
const int PB_RoleBattleData_BattleHallowData::kAttrInterveneFieldNumber;
const int PB_RoleBattleData_BattleHallowData::kAttrSpeedFieldNumber;
const int PB_RoleBattleData_BattleHallowData::kSkillIdListFieldNumber;
const int PB_RoleBattleData_BattleHallowData::kSkillLvListFieldNumber;
const int PB_RoleBattleData_BattleHallowData::kGiftListFieldNumber;
#endif  // !_MSC_VER

PB_RoleBattleData_BattleHallowData::PB_RoleBattleData_BattleHallowData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PB_RoleBattleData.BattleHallowData)
}

void PB_RoleBattleData_BattleHallowData::InitAsDefaultInstance() {
}

PB_RoleBattleData_BattleHallowData::PB_RoleBattleData_BattleHallowData(const PB_RoleBattleData_BattleHallowData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PB_RoleBattleData.BattleHallowData)
}

void PB_RoleBattleData_BattleHallowData::SharedCtor() {
  _cached_size_ = 0;
  hallow_id_ = 0;
  hallow_lv_ = 0;
  attr_active_ = 0;
  attr_active_max_ = 0;
  attr_damage_ = 0;
  attr_recover_ = 0;
  attr_knock_off_ = 0;
  attr_anti_knock_off_ = 0;
  attr_intervene_ = 0;
  attr_speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_RoleBattleData_BattleHallowData::~PB_RoleBattleData_BattleHallowData() {
  // @@protoc_insertion_point(destructor:PB_RoleBattleData.BattleHallowData)
  SharedDtor();
}

void PB_RoleBattleData_BattleHallowData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_RoleBattleData_BattleHallowData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_RoleBattleData_BattleHallowData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_RoleBattleData_BattleHallowData_descriptor_;
}

const PB_RoleBattleData_BattleHallowData& PB_RoleBattleData_BattleHallowData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_5fbattle_5fdata_2eproto();
  return *default_instance_;
}

PB_RoleBattleData_BattleHallowData* PB_RoleBattleData_BattleHallowData::default_instance_ = NULL;

PB_RoleBattleData_BattleHallowData* PB_RoleBattleData_BattleHallowData::New() const {
  return new PB_RoleBattleData_BattleHallowData;
}

void PB_RoleBattleData_BattleHallowData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PB_RoleBattleData_BattleHallowData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(hallow_id_, attr_anti_knock_off_);
  }
  ZR_(attr_intervene_, attr_speed_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  skill_id_list_.Clear();
  skill_lv_list_.Clear();
  gift_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_RoleBattleData_BattleHallowData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PB_RoleBattleData.BattleHallowData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 hallow_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hallow_id_)));
          set_has_hallow_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hallow_lv;
        break;
      }

      // optional int32 hallow_lv = 2;
      case 2: {
        if (tag == 16) {
         parse_hallow_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hallow_lv_)));
          set_has_hallow_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_attr_active;
        break;
      }

      // optional double attr_active = 3;
      case 3: {
        if (tag == 25) {
         parse_attr_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &attr_active_)));
          set_has_attr_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_attr_active_max;
        break;
      }

      // optional double attr_active_max = 4;
      case 4: {
        if (tag == 33) {
         parse_attr_active_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &attr_active_max_)));
          set_has_attr_active_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_attr_damage;
        break;
      }

      // optional double attr_damage = 5;
      case 5: {
        if (tag == 41) {
         parse_attr_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &attr_damage_)));
          set_has_attr_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_attr_recover;
        break;
      }

      // optional double attr_recover = 6;
      case 6: {
        if (tag == 49) {
         parse_attr_recover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &attr_recover_)));
          set_has_attr_recover();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_attr_knock_off;
        break;
      }

      // optional double attr_knock_off = 7;
      case 7: {
        if (tag == 57) {
         parse_attr_knock_off:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &attr_knock_off_)));
          set_has_attr_knock_off();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_attr_anti_knock_off;
        break;
      }

      // optional double attr_anti_knock_off = 8;
      case 8: {
        if (tag == 65) {
         parse_attr_anti_knock_off:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &attr_anti_knock_off_)));
          set_has_attr_anti_knock_off();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_attr_intervene;
        break;
      }

      // optional double attr_intervene = 9;
      case 9: {
        if (tag == 73) {
         parse_attr_intervene:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &attr_intervene_)));
          set_has_attr_intervene();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_attr_speed;
        break;
      }

      // optional double attr_speed = 10;
      case 10: {
        if (tag == 81) {
         parse_attr_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &attr_speed_)));
          set_has_attr_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_skill_id_list;
        break;
      }

      // repeated int32 skill_id_list = 12;
      case 12: {
        if (tag == 96) {
         parse_skill_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_skill_id_list())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_skill_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_skill_id_list;
        if (input->ExpectTag(104)) goto parse_skill_lv_list;
        break;
      }

      // repeated int32 skill_lv_list = 13;
      case 13: {
        if (tag == 104) {
         parse_skill_lv_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 104, input, this->mutable_skill_lv_list())));
        } else if (tag == 106) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_skill_lv_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_skill_lv_list;
        if (input->ExpectTag(112)) goto parse_gift_list;
        break;
      }

      // repeated int32 gift_list = 14;
      case 14: {
        if (tag == 112) {
         parse_gift_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 112, input, this->mutable_gift_list())));
        } else if (tag == 114) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gift_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_gift_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PB_RoleBattleData.BattleHallowData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PB_RoleBattleData.BattleHallowData)
  return false;
#undef DO_
}

void PB_RoleBattleData_BattleHallowData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PB_RoleBattleData.BattleHallowData)
  // optional int32 hallow_id = 1;
  if (has_hallow_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hallow_id(), output);
  }

  // optional int32 hallow_lv = 2;
  if (has_hallow_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hallow_lv(), output);
  }

  // optional double attr_active = 3;
  if (has_attr_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->attr_active(), output);
  }

  // optional double attr_active_max = 4;
  if (has_attr_active_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->attr_active_max(), output);
  }

  // optional double attr_damage = 5;
  if (has_attr_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->attr_damage(), output);
  }

  // optional double attr_recover = 6;
  if (has_attr_recover()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->attr_recover(), output);
  }

  // optional double attr_knock_off = 7;
  if (has_attr_knock_off()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->attr_knock_off(), output);
  }

  // optional double attr_anti_knock_off = 8;
  if (has_attr_anti_knock_off()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->attr_anti_knock_off(), output);
  }

  // optional double attr_intervene = 9;
  if (has_attr_intervene()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->attr_intervene(), output);
  }

  // optional double attr_speed = 10;
  if (has_attr_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->attr_speed(), output);
  }

  // repeated int32 skill_id_list = 12;
  for (int i = 0; i < this->skill_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->skill_id_list(i), output);
  }

  // repeated int32 skill_lv_list = 13;
  for (int i = 0; i < this->skill_lv_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->skill_lv_list(i), output);
  }

  // repeated int32 gift_list = 14;
  for (int i = 0; i < this->gift_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      14, this->gift_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PB_RoleBattleData.BattleHallowData)
}

::google::protobuf::uint8* PB_RoleBattleData_BattleHallowData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_RoleBattleData.BattleHallowData)
  // optional int32 hallow_id = 1;
  if (has_hallow_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hallow_id(), target);
  }

  // optional int32 hallow_lv = 2;
  if (has_hallow_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hallow_lv(), target);
  }

  // optional double attr_active = 3;
  if (has_attr_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->attr_active(), target);
  }

  // optional double attr_active_max = 4;
  if (has_attr_active_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->attr_active_max(), target);
  }

  // optional double attr_damage = 5;
  if (has_attr_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->attr_damage(), target);
  }

  // optional double attr_recover = 6;
  if (has_attr_recover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->attr_recover(), target);
  }

  // optional double attr_knock_off = 7;
  if (has_attr_knock_off()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->attr_knock_off(), target);
  }

  // optional double attr_anti_knock_off = 8;
  if (has_attr_anti_knock_off()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->attr_anti_knock_off(), target);
  }

  // optional double attr_intervene = 9;
  if (has_attr_intervene()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->attr_intervene(), target);
  }

  // optional double attr_speed = 10;
  if (has_attr_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->attr_speed(), target);
  }

  // repeated int32 skill_id_list = 12;
  for (int i = 0; i < this->skill_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->skill_id_list(i), target);
  }

  // repeated int32 skill_lv_list = 13;
  for (int i = 0; i < this->skill_lv_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(13, this->skill_lv_list(i), target);
  }

  // repeated int32 gift_list = 14;
  for (int i = 0; i < this->gift_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(14, this->gift_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_RoleBattleData.BattleHallowData)
  return target;
}

int PB_RoleBattleData_BattleHallowData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 hallow_id = 1;
    if (has_hallow_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hallow_id());
    }

    // optional int32 hallow_lv = 2;
    if (has_hallow_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hallow_lv());
    }

    // optional double attr_active = 3;
    if (has_attr_active()) {
      total_size += 1 + 8;
    }

    // optional double attr_active_max = 4;
    if (has_attr_active_max()) {
      total_size += 1 + 8;
    }

    // optional double attr_damage = 5;
    if (has_attr_damage()) {
      total_size += 1 + 8;
    }

    // optional double attr_recover = 6;
    if (has_attr_recover()) {
      total_size += 1 + 8;
    }

    // optional double attr_knock_off = 7;
    if (has_attr_knock_off()) {
      total_size += 1 + 8;
    }

    // optional double attr_anti_knock_off = 8;
    if (has_attr_anti_knock_off()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double attr_intervene = 9;
    if (has_attr_intervene()) {
      total_size += 1 + 8;
    }

    // optional double attr_speed = 10;
    if (has_attr_speed()) {
      total_size += 1 + 8;
    }

  }
  // repeated int32 skill_id_list = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->skill_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skill_id_list(i));
    }
    total_size += 1 * this->skill_id_list_size() + data_size;
  }

  // repeated int32 skill_lv_list = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->skill_lv_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skill_lv_list(i));
    }
    total_size += 1 * this->skill_lv_list_size() + data_size;
  }

  // repeated int32 gift_list = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->gift_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->gift_list(i));
    }
    total_size += 1 * this->gift_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_RoleBattleData_BattleHallowData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_RoleBattleData_BattleHallowData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_RoleBattleData_BattleHallowData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_RoleBattleData_BattleHallowData::MergeFrom(const PB_RoleBattleData_BattleHallowData& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_id_list_.MergeFrom(from.skill_id_list_);
  skill_lv_list_.MergeFrom(from.skill_lv_list_);
  gift_list_.MergeFrom(from.gift_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hallow_id()) {
      set_hallow_id(from.hallow_id());
    }
    if (from.has_hallow_lv()) {
      set_hallow_lv(from.hallow_lv());
    }
    if (from.has_attr_active()) {
      set_attr_active(from.attr_active());
    }
    if (from.has_attr_active_max()) {
      set_attr_active_max(from.attr_active_max());
    }
    if (from.has_attr_damage()) {
      set_attr_damage(from.attr_damage());
    }
    if (from.has_attr_recover()) {
      set_attr_recover(from.attr_recover());
    }
    if (from.has_attr_knock_off()) {
      set_attr_knock_off(from.attr_knock_off());
    }
    if (from.has_attr_anti_knock_off()) {
      set_attr_anti_knock_off(from.attr_anti_knock_off());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attr_intervene()) {
      set_attr_intervene(from.attr_intervene());
    }
    if (from.has_attr_speed()) {
      set_attr_speed(from.attr_speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_RoleBattleData_BattleHallowData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_RoleBattleData_BattleHallowData::CopyFrom(const PB_RoleBattleData_BattleHallowData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_RoleBattleData_BattleHallowData::IsInitialized() const {

  return true;
}

void PB_RoleBattleData_BattleHallowData::Swap(PB_RoleBattleData_BattleHallowData* other) {
  if (other != this) {
    std::swap(hallow_id_, other->hallow_id_);
    std::swap(hallow_lv_, other->hallow_lv_);
    std::swap(attr_active_, other->attr_active_);
    std::swap(attr_active_max_, other->attr_active_max_);
    std::swap(attr_damage_, other->attr_damage_);
    std::swap(attr_recover_, other->attr_recover_);
    std::swap(attr_knock_off_, other->attr_knock_off_);
    std::swap(attr_anti_knock_off_, other->attr_anti_knock_off_);
    std::swap(attr_intervene_, other->attr_intervene_);
    std::swap(attr_speed_, other->attr_speed_);
    skill_id_list_.Swap(&other->skill_id_list_);
    skill_lv_list_.Swap(&other->skill_lv_list_);
    gift_list_.Swap(&other->gift_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_RoleBattleData_BattleHallowData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_RoleBattleData_BattleHallowData_descriptor_;
  metadata.reflection = PB_RoleBattleData_BattleHallowData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PB_RoleBattleData_BattleHuanShouSkill::kSkillIdFieldNumber;
const int PB_RoleBattleData_BattleHuanShouSkill::kSkillLevelFieldNumber;
const int PB_RoleBattleData_BattleHuanShouSkill::kCdStartFieldNumber;
const int PB_RoleBattleData_BattleHuanShouSkill::kCdPerformFieldNumber;
#endif  // !_MSC_VER

PB_RoleBattleData_BattleHuanShouSkill::PB_RoleBattleData_BattleHuanShouSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PB_RoleBattleData.BattleHuanShouSkill)
}

void PB_RoleBattleData_BattleHuanShouSkill::InitAsDefaultInstance() {
}

PB_RoleBattleData_BattleHuanShouSkill::PB_RoleBattleData_BattleHuanShouSkill(const PB_RoleBattleData_BattleHuanShouSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PB_RoleBattleData.BattleHuanShouSkill)
}

void PB_RoleBattleData_BattleHuanShouSkill::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0;
  skill_level_ = 0;
  cd_start_ = 0;
  cd_perform_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_RoleBattleData_BattleHuanShouSkill::~PB_RoleBattleData_BattleHuanShouSkill() {
  // @@protoc_insertion_point(destructor:PB_RoleBattleData.BattleHuanShouSkill)
  SharedDtor();
}

void PB_RoleBattleData_BattleHuanShouSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_RoleBattleData_BattleHuanShouSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_RoleBattleData_BattleHuanShouSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_RoleBattleData_BattleHuanShouSkill_descriptor_;
}

const PB_RoleBattleData_BattleHuanShouSkill& PB_RoleBattleData_BattleHuanShouSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_5fbattle_5fdata_2eproto();
  return *default_instance_;
}

PB_RoleBattleData_BattleHuanShouSkill* PB_RoleBattleData_BattleHuanShouSkill::default_instance_ = NULL;

PB_RoleBattleData_BattleHuanShouSkill* PB_RoleBattleData_BattleHuanShouSkill::New() const {
  return new PB_RoleBattleData_BattleHuanShouSkill;
}

void PB_RoleBattleData_BattleHuanShouSkill::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PB_RoleBattleData_BattleHuanShouSkill*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(skill_id_, cd_perform_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_RoleBattleData_BattleHuanShouSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PB_RoleBattleData.BattleHuanShouSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 skill_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_skill_level;
        break;
      }

      // optional int32 skill_level = 2;
      case 2: {
        if (tag == 16) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cd_start;
        break;
      }

      // optional int32 cd_start = 3;
      case 3: {
        if (tag == 24) {
         parse_cd_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_start_)));
          set_has_cd_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cd_perform;
        break;
      }

      // optional int32 cd_perform = 4;
      case 4: {
        if (tag == 32) {
         parse_cd_perform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_perform_)));
          set_has_cd_perform();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PB_RoleBattleData.BattleHuanShouSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PB_RoleBattleData.BattleHuanShouSkill)
  return false;
#undef DO_
}

void PB_RoleBattleData_BattleHuanShouSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PB_RoleBattleData.BattleHuanShouSkill)
  // optional int32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skill_id(), output);
  }

  // optional int32 skill_level = 2;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skill_level(), output);
  }

  // optional int32 cd_start = 3;
  if (has_cd_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cd_start(), output);
  }

  // optional int32 cd_perform = 4;
  if (has_cd_perform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cd_perform(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PB_RoleBattleData.BattleHuanShouSkill)
}

::google::protobuf::uint8* PB_RoleBattleData_BattleHuanShouSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_RoleBattleData.BattleHuanShouSkill)
  // optional int32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skill_id(), target);
  }

  // optional int32 skill_level = 2;
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skill_level(), target);
  }

  // optional int32 cd_start = 3;
  if (has_cd_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cd_start(), target);
  }

  // optional int32 cd_perform = 4;
  if (has_cd_perform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cd_perform(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_RoleBattleData.BattleHuanShouSkill)
  return target;
}

int PB_RoleBattleData_BattleHuanShouSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }

    // optional int32 skill_level = 2;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_level());
    }

    // optional int32 cd_start = 3;
    if (has_cd_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd_start());
    }

    // optional int32 cd_perform = 4;
    if (has_cd_perform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd_perform());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_RoleBattleData_BattleHuanShouSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_RoleBattleData_BattleHuanShouSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_RoleBattleData_BattleHuanShouSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_RoleBattleData_BattleHuanShouSkill::MergeFrom(const PB_RoleBattleData_BattleHuanShouSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
    if (from.has_cd_start()) {
      set_cd_start(from.cd_start());
    }
    if (from.has_cd_perform()) {
      set_cd_perform(from.cd_perform());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_RoleBattleData_BattleHuanShouSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_RoleBattleData_BattleHuanShouSkill::CopyFrom(const PB_RoleBattleData_BattleHuanShouSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_RoleBattleData_BattleHuanShouSkill::IsInitialized() const {

  return true;
}

void PB_RoleBattleData_BattleHuanShouSkill::Swap(PB_RoleBattleData_BattleHuanShouSkill* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(cd_start_, other->cd_start_);
    std::swap(cd_perform_, other->cd_perform_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_RoleBattleData_BattleHuanShouSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_RoleBattleData_BattleHuanShouSkill_descriptor_;
  metadata.reflection = PB_RoleBattleData_BattleHuanShouSkill_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PB_RoleBattleData::kIsAutoFieldNumber;
const int PB_RoleBattleData::kIsRoleStandFrontFieldNumber;
const int PB_RoleBattleData::kRoleCharacterDataFieldNumber;
const int PB_RoleBattleData::kHuanshouLevelFieldNumber;
const int PB_RoleBattleData::kPartnerCharacterDataFieldNumber;
const int PB_RoleBattleData::kFightPetIdxFieldNumber;
const int PB_RoleBattleData::kPetCharacterDataFieldNumber;
const int PB_RoleBattleData::kAutoFirstMoveTypeFieldNumber;
const int PB_RoleBattleData::kAutoFirstSkillIdFieldNumber;
const int PB_RoleBattleData::kAutoFirstSkillLevelFieldNumber;
const int PB_RoleBattleData::kAutoSecondMoveTypeFieldNumber;
const int PB_RoleBattleData::kAutoSecondSkillIdFieldNumber;
const int PB_RoleBattleData::kAutoSecondSkillLevelFieldNumber;
const int PB_RoleBattleData::kWeaponAttrListFieldNumber;
const int PB_RoleBattleData::kWeaponSpListFieldNumber;
const int PB_RoleBattleData::kOtherSpListFieldNumber;
const int PB_RoleBattleData::kFabaoListFieldNumber;
const int PB_RoleBattleData::kAppearanceFieldNumber;
const int PB_RoleBattleData::kGuildBuffListFieldNumber;
const int PB_RoleBattleData::kPetHelperDataFieldNumber;
const int PB_RoleBattleData::kTopLevelFieldNumber;
const int PB_RoleBattleData::kHeartSkillIsVaildFieldNumber;
const int PB_RoleBattleData::kHeartSkillListFieldNumber;
const int PB_RoleBattleData::kJieyiUidListFieldNumber;
const int PB_RoleBattleData::kJieyiSkillListFieldNumber;
const int PB_RoleBattleData::kSoaringSkillIdFieldNumber;
const int PB_RoleBattleData::kSoaringSkillLvFieldNumber;
const int PB_RoleBattleData::kQingyuanTargetUidFieldNumber;
const int PB_RoleBattleData::kQingyuanSkillListFieldNumber;
const int PB_RoleBattleData::kIsRobotFieldNumber;
const int PB_RoleBattleData::kCareerSuppressValueFieldNumber;
const int PB_RoleBattleData::kChangeCardSkillIdFieldNumber;
const int PB_RoleBattleData::kChangeCardSeqFieldNumber;
const int PB_RoleBattleData::kRoleExtraCapabilityFieldNumber;
const int PB_RoleBattleData::kHallowListFieldNumber;
const int PB_RoleBattleData::kFightHallowIdxFieldNumber;
const int PB_RoleBattleData::kHuanshouSkillFieldNumber;
#endif  // !_MSC_VER

PB_RoleBattleData::PB_RoleBattleData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PB_RoleBattleData)
}

void PB_RoleBattleData::InitAsDefaultInstance() {
  role_character_data_ = const_cast< ::PB_BattleCharacterData*>(&::PB_BattleCharacterData::default_instance());
  huanshou_skill_ = const_cast< ::PB_RoleBattleData_BattleHuanShouSkill*>(&::PB_RoleBattleData_BattleHuanShouSkill::default_instance());
}

PB_RoleBattleData::PB_RoleBattleData(const PB_RoleBattleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PB_RoleBattleData)
}

void PB_RoleBattleData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  is_auto_ = false;
  is_role_stand_front_ = false;
  role_character_data_ = NULL;
  huanshou_level_ = 0;
  fight_pet_idx_ = 0;
  auto_first_move_type_ = 0;
  auto_first_skill_id_ = 0;
  auto_first_skill_level_ = 0;
  auto_second_move_type_ = 0;
  auto_second_skill_id_ = 0;
  auto_second_skill_level_ = 0;
  appearance_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  top_level_ = 0;
  heart_skill_is_vaild_ = 0;
  soaring_skill_id_ = 0;
  soaring_skill_lv_ = 0;
  qingyuan_target_uid_ = 0;
  is_robot_ = false;
  career_suppress_value_ = 0;
  change_card_skill_id_ = 0;
  change_card_seq_ = 0;
  role_extra_capability_ = 0;
  fight_hallow_idx_ = 0;
  huanshou_skill_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_RoleBattleData::~PB_RoleBattleData() {
  // @@protoc_insertion_point(destructor:PB_RoleBattleData)
  SharedDtor();
}

void PB_RoleBattleData::SharedDtor() {
  if (appearance_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete appearance_;
  }
  if (this != default_instance_) {
    delete role_character_data_;
    delete huanshou_skill_;
  }
}

void PB_RoleBattleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_RoleBattleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_RoleBattleData_descriptor_;
}

const PB_RoleBattleData& PB_RoleBattleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_5fbattle_5fdata_2eproto();
  return *default_instance_;
}

PB_RoleBattleData* PB_RoleBattleData::default_instance_ = NULL;

PB_RoleBattleData* PB_RoleBattleData::New() const {
  return new PB_RoleBattleData;
}

void PB_RoleBattleData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PB_RoleBattleData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 175) {
    ZR_(huanshou_level_, fight_pet_idx_);
    ZR_(is_auto_, is_role_stand_front_);
    if (has_role_character_data()) {
      if (role_character_data_ != NULL) role_character_data_->::PB_BattleCharacterData::Clear();
    }
    auto_first_move_type_ = 0;
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(auto_first_skill_id_, auto_second_move_type_);
    auto_second_skill_id_ = 0;
    auto_second_skill_level_ = 0;
  }
  if (_has_bits_[16 / 32] & 3276800) {
    if (has_appearance()) {
      if (appearance_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        appearance_->clear();
      }
    }
    top_level_ = 0;
    heart_skill_is_vaild_ = 0;
  }
  if (_has_bits_[24 / 32] & 3992977408) {
    ZR_(soaring_skill_lv_, qingyuan_target_uid_);
    ZR_(career_suppress_value_, change_card_skill_id_);
    soaring_skill_id_ = 0;
    is_robot_ = false;
  }
  if (_has_bits_[32 / 32] & 27) {
    ZR_(change_card_seq_, role_extra_capability_);
    fight_hallow_idx_ = 0;
    if (has_huanshou_skill()) {
      if (huanshou_skill_ != NULL) huanshou_skill_->::PB_RoleBattleData_BattleHuanShouSkill::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  partner_character_data_.Clear();
  pet_character_data_.Clear();
  weapon_attr_list_.Clear();
  weapon_sp_list_.Clear();
  other_sp_list_.Clear();
  fabao_list_.Clear();
  guild_buff_list_.Clear();
  pet_helper_data_.Clear();
  heart_skill_list_.Clear();
  jieyi_uid_list_.Clear();
  jieyi_skill_list_.Clear();
  qingyuan_skill_list_.Clear();
  hallow_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_RoleBattleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PB_RoleBattleData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_auto = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_auto_)));
          set_has_is_auto();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_role_stand_front;
        break;
      }

      // optional bool is_role_stand_front = 2;
      case 2: {
        if (tag == 16) {
         parse_is_role_stand_front:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_role_stand_front_)));
          set_has_is_role_stand_front();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_role_character_data;
        break;
      }

      // optional .PB_BattleCharacterData role_character_data = 3;
      case 3: {
        if (tag == 26) {
         parse_role_character_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_character_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_huanshou_level;
        break;
      }

      // optional int32 huanshou_level = 4;
      case 4: {
        if (tag == 32) {
         parse_huanshou_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huanshou_level_)));
          set_has_huanshou_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_partner_character_data;
        break;
      }

      // repeated .PB_PartnerBattleData partner_character_data = 5;
      case 5: {
        if (tag == 42) {
         parse_partner_character_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_partner_character_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_partner_character_data;
        if (input->ExpectTag(48)) goto parse_fight_pet_idx;
        break;
      }

      // optional sint32 fight_pet_idx = 6;
      case 6: {
        if (tag == 48) {
         parse_fight_pet_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &fight_pet_idx_)));
          set_has_fight_pet_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_pet_character_data;
        break;
      }

      // repeated .PB_PetBattleData pet_character_data = 7;
      case 7: {
        if (tag == 58) {
         parse_pet_character_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pet_character_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_pet_character_data;
        if (input->ExpectTag(64)) goto parse_auto_first_move_type;
        break;
      }

      // optional int32 auto_first_move_type = 8;
      case 8: {
        if (tag == 64) {
         parse_auto_first_move_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_first_move_type_)));
          set_has_auto_first_move_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_auto_first_skill_id;
        break;
      }

      // optional int32 auto_first_skill_id = 9;
      case 9: {
        if (tag == 72) {
         parse_auto_first_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_first_skill_id_)));
          set_has_auto_first_skill_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_auto_first_skill_level;
        break;
      }

      // optional int32 auto_first_skill_level = 10;
      case 10: {
        if (tag == 80) {
         parse_auto_first_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_first_skill_level_)));
          set_has_auto_first_skill_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_auto_second_move_type;
        break;
      }

      // optional int32 auto_second_move_type = 11;
      case 11: {
        if (tag == 88) {
         parse_auto_second_move_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_second_move_type_)));
          set_has_auto_second_move_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_auto_second_skill_id;
        break;
      }

      // optional int32 auto_second_skill_id = 12;
      case 12: {
        if (tag == 96) {
         parse_auto_second_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_second_skill_id_)));
          set_has_auto_second_skill_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_auto_second_skill_level;
        break;
      }

      // optional int32 auto_second_skill_level = 13;
      case 13: {
        if (tag == 104) {
         parse_auto_second_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_second_skill_level_)));
          set_has_auto_second_skill_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_weapon_attr_list;
        break;
      }

      // repeated .PB_RoleBattleData.AttrInfo weapon_attr_list = 14;
      case 14: {
        if (tag == 114) {
         parse_weapon_attr_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weapon_attr_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_weapon_attr_list;
        if (input->ExpectTag(120)) goto parse_weapon_sp_list;
        break;
      }

      // repeated int32 weapon_sp_list = 15;
      case 15: {
        if (tag == 120) {
         parse_weapon_sp_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 120, input, this->mutable_weapon_sp_list())));
        } else if (tag == 122) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_weapon_sp_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_weapon_sp_list;
        if (input->ExpectTag(128)) goto parse_other_sp_list;
        break;
      }

      // repeated int32 other_sp_list = 16;
      case 16: {
        if (tag == 128) {
         parse_other_sp_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 128, input, this->mutable_other_sp_list())));
        } else if (tag == 130) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_other_sp_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_other_sp_list;
        if (input->ExpectTag(138)) goto parse_fabao_list;
        break;
      }

      // repeated .PB_RoleBattleData.BattleFabao fabao_list = 17;
      case 17: {
        if (tag == 138) {
         parse_fabao_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fabao_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_fabao_list;
        if (input->ExpectTag(146)) goto parse_appearance;
        break;
      }

      // optional bytes appearance = 18;
      case 18: {
        if (tag == 146) {
         parse_appearance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_appearance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_guild_buff_list;
        break;
      }

      // repeated int32 guild_buff_list = 21;
      case 21: {
        if (tag == 168) {
         parse_guild_buff_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 168, input, this->mutable_guild_buff_list())));
        } else if (tag == 170) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_guild_buff_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_guild_buff_list;
        if (input->ExpectTag(178)) goto parse_pet_helper_data;
        break;
      }

      // repeated .PB_RoleBattleData.PetPartnerBattleData pet_helper_data = 22;
      case 22: {
        if (tag == 178) {
         parse_pet_helper_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pet_helper_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_pet_helper_data;
        if (input->ExpectTag(184)) goto parse_top_level;
        break;
      }

      // optional int32 top_level = 23;
      case 23: {
        if (tag == 184) {
         parse_top_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_level_)));
          set_has_top_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_heart_skill_is_vaild;
        break;
      }

      // optional int32 heart_skill_is_vaild = 25;
      case 25: {
        if (tag == 200) {
         parse_heart_skill_is_vaild:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heart_skill_is_vaild_)));
          set_has_heart_skill_is_vaild();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_heart_skill_list;
        break;
      }

      // repeated .PB_RoleBattleData.BattleHeartSkill heart_skill_list = 26;
      case 26: {
        if (tag == 210) {
         parse_heart_skill_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heart_skill_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_heart_skill_list;
        if (input->ExpectTag(216)) goto parse_jieyi_uid_list;
        break;
      }

      // repeated int32 jieyi_uid_list = 27;
      case 27: {
        if (tag == 216) {
         parse_jieyi_uid_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 216, input, this->mutable_jieyi_uid_list())));
        } else if (tag == 218) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_jieyi_uid_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_jieyi_uid_list;
        if (input->ExpectTag(224)) goto parse_jieyi_skill_list;
        break;
      }

      // repeated int32 jieyi_skill_list = 28;
      case 28: {
        if (tag == 224) {
         parse_jieyi_skill_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 224, input, this->mutable_jieyi_skill_list())));
        } else if (tag == 226) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_jieyi_skill_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_jieyi_skill_list;
        if (input->ExpectTag(232)) goto parse_soaring_skill_id;
        break;
      }

      // optional int32 soaring_skill_id = 29;
      case 29: {
        if (tag == 232) {
         parse_soaring_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soaring_skill_id_)));
          set_has_soaring_skill_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_soaring_skill_lv;
        break;
      }

      // optional int32 soaring_skill_lv = 30;
      case 30: {
        if (tag == 240) {
         parse_soaring_skill_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soaring_skill_lv_)));
          set_has_soaring_skill_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_qingyuan_target_uid;
        break;
      }

      // optional int32 qingyuan_target_uid = 31;
      case 31: {
        if (tag == 248) {
         parse_qingyuan_target_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qingyuan_target_uid_)));
          set_has_qingyuan_target_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_qingyuan_skill_list;
        break;
      }

      // repeated int32 qingyuan_skill_list = 32;
      case 32: {
        if (tag == 256) {
         parse_qingyuan_skill_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 256, input, this->mutable_qingyuan_skill_list())));
        } else if (tag == 258) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_qingyuan_skill_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_qingyuan_skill_list;
        if (input->ExpectTag(264)) goto parse_is_robot;
        break;
      }

      // optional bool is_robot = 33;
      case 33: {
        if (tag == 264) {
         parse_is_robot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_robot_)));
          set_has_is_robot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_career_suppress_value;
        break;
      }

      // optional int32 career_suppress_value = 34;
      case 34: {
        if (tag == 272) {
         parse_career_suppress_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_suppress_value_)));
          set_has_career_suppress_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_change_card_skill_id;
        break;
      }

      // optional int32 change_card_skill_id = 35;
      case 35: {
        if (tag == 280) {
         parse_change_card_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_card_skill_id_)));
          set_has_change_card_skill_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_change_card_seq;
        break;
      }

      // optional int32 change_card_seq = 36;
      case 36: {
        if (tag == 288) {
         parse_change_card_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_card_seq_)));
          set_has_change_card_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_role_extra_capability;
        break;
      }

      // optional int32 role_extra_capability = 37;
      case 37: {
        if (tag == 296) {
         parse_role_extra_capability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_extra_capability_)));
          set_has_role_extra_capability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_hallow_list;
        break;
      }

      // repeated .PB_RoleBattleData.BattleHallowData hallow_list = 38;
      case 38: {
        if (tag == 306) {
         parse_hallow_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hallow_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_hallow_list;
        if (input->ExpectTag(312)) goto parse_fight_hallow_idx;
        break;
      }

      // optional int32 fight_hallow_idx = 39;
      case 39: {
        if (tag == 312) {
         parse_fight_hallow_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_hallow_idx_)));
          set_has_fight_hallow_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_huanshou_skill;
        break;
      }

      // optional .PB_RoleBattleData.BattleHuanShouSkill huanshou_skill = 40;
      case 40: {
        if (tag == 322) {
         parse_huanshou_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_huanshou_skill()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PB_RoleBattleData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PB_RoleBattleData)
  return false;
#undef DO_
}

void PB_RoleBattleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PB_RoleBattleData)
  // optional bool is_auto = 1;
  if (has_is_auto()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_auto(), output);
  }

  // optional bool is_role_stand_front = 2;
  if (has_is_role_stand_front()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_role_stand_front(), output);
  }

  // optional .PB_BattleCharacterData role_character_data = 3;
  if (has_role_character_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->role_character_data(), output);
  }

  // optional int32 huanshou_level = 4;
  if (has_huanshou_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->huanshou_level(), output);
  }

  // repeated .PB_PartnerBattleData partner_character_data = 5;
  for (int i = 0; i < this->partner_character_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->partner_character_data(i), output);
  }

  // optional sint32 fight_pet_idx = 6;
  if (has_fight_pet_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->fight_pet_idx(), output);
  }

  // repeated .PB_PetBattleData pet_character_data = 7;
  for (int i = 0; i < this->pet_character_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->pet_character_data(i), output);
  }

  // optional int32 auto_first_move_type = 8;
  if (has_auto_first_move_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->auto_first_move_type(), output);
  }

  // optional int32 auto_first_skill_id = 9;
  if (has_auto_first_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->auto_first_skill_id(), output);
  }

  // optional int32 auto_first_skill_level = 10;
  if (has_auto_first_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->auto_first_skill_level(), output);
  }

  // optional int32 auto_second_move_type = 11;
  if (has_auto_second_move_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->auto_second_move_type(), output);
  }

  // optional int32 auto_second_skill_id = 12;
  if (has_auto_second_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->auto_second_skill_id(), output);
  }

  // optional int32 auto_second_skill_level = 13;
  if (has_auto_second_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->auto_second_skill_level(), output);
  }

  // repeated .PB_RoleBattleData.AttrInfo weapon_attr_list = 14;
  for (int i = 0; i < this->weapon_attr_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->weapon_attr_list(i), output);
  }

  // repeated int32 weapon_sp_list = 15;
  for (int i = 0; i < this->weapon_sp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      15, this->weapon_sp_list(i), output);
  }

  // repeated int32 other_sp_list = 16;
  for (int i = 0; i < this->other_sp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      16, this->other_sp_list(i), output);
  }

  // repeated .PB_RoleBattleData.BattleFabao fabao_list = 17;
  for (int i = 0; i < this->fabao_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->fabao_list(i), output);
  }

  // optional bytes appearance = 18;
  if (has_appearance()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      18, this->appearance(), output);
  }

  // repeated int32 guild_buff_list = 21;
  for (int i = 0; i < this->guild_buff_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      21, this->guild_buff_list(i), output);
  }

  // repeated .PB_RoleBattleData.PetPartnerBattleData pet_helper_data = 22;
  for (int i = 0; i < this->pet_helper_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->pet_helper_data(i), output);
  }

  // optional int32 top_level = 23;
  if (has_top_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->top_level(), output);
  }

  // optional int32 heart_skill_is_vaild = 25;
  if (has_heart_skill_is_vaild()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->heart_skill_is_vaild(), output);
  }

  // repeated .PB_RoleBattleData.BattleHeartSkill heart_skill_list = 26;
  for (int i = 0; i < this->heart_skill_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->heart_skill_list(i), output);
  }

  // repeated int32 jieyi_uid_list = 27;
  for (int i = 0; i < this->jieyi_uid_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      27, this->jieyi_uid_list(i), output);
  }

  // repeated int32 jieyi_skill_list = 28;
  for (int i = 0; i < this->jieyi_skill_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      28, this->jieyi_skill_list(i), output);
  }

  // optional int32 soaring_skill_id = 29;
  if (has_soaring_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->soaring_skill_id(), output);
  }

  // optional int32 soaring_skill_lv = 30;
  if (has_soaring_skill_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->soaring_skill_lv(), output);
  }

  // optional int32 qingyuan_target_uid = 31;
  if (has_qingyuan_target_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->qingyuan_target_uid(), output);
  }

  // repeated int32 qingyuan_skill_list = 32;
  for (int i = 0; i < this->qingyuan_skill_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      32, this->qingyuan_skill_list(i), output);
  }

  // optional bool is_robot = 33;
  if (has_is_robot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->is_robot(), output);
  }

  // optional int32 career_suppress_value = 34;
  if (has_career_suppress_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->career_suppress_value(), output);
  }

  // optional int32 change_card_skill_id = 35;
  if (has_change_card_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->change_card_skill_id(), output);
  }

  // optional int32 change_card_seq = 36;
  if (has_change_card_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->change_card_seq(), output);
  }

  // optional int32 role_extra_capability = 37;
  if (has_role_extra_capability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->role_extra_capability(), output);
  }

  // repeated .PB_RoleBattleData.BattleHallowData hallow_list = 38;
  for (int i = 0; i < this->hallow_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->hallow_list(i), output);
  }

  // optional int32 fight_hallow_idx = 39;
  if (has_fight_hallow_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->fight_hallow_idx(), output);
  }

  // optional .PB_RoleBattleData.BattleHuanShouSkill huanshou_skill = 40;
  if (has_huanshou_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->huanshou_skill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PB_RoleBattleData)
}

::google::protobuf::uint8* PB_RoleBattleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_RoleBattleData)
  // optional bool is_auto = 1;
  if (has_is_auto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_auto(), target);
  }

  // optional bool is_role_stand_front = 2;
  if (has_is_role_stand_front()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_role_stand_front(), target);
  }

  // optional .PB_BattleCharacterData role_character_data = 3;
  if (has_role_character_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->role_character_data(), target);
  }

  // optional int32 huanshou_level = 4;
  if (has_huanshou_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->huanshou_level(), target);
  }

  // repeated .PB_PartnerBattleData partner_character_data = 5;
  for (int i = 0; i < this->partner_character_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->partner_character_data(i), target);
  }

  // optional sint32 fight_pet_idx = 6;
  if (has_fight_pet_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->fight_pet_idx(), target);
  }

  // repeated .PB_PetBattleData pet_character_data = 7;
  for (int i = 0; i < this->pet_character_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->pet_character_data(i), target);
  }

  // optional int32 auto_first_move_type = 8;
  if (has_auto_first_move_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->auto_first_move_type(), target);
  }

  // optional int32 auto_first_skill_id = 9;
  if (has_auto_first_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->auto_first_skill_id(), target);
  }

  // optional int32 auto_first_skill_level = 10;
  if (has_auto_first_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->auto_first_skill_level(), target);
  }

  // optional int32 auto_second_move_type = 11;
  if (has_auto_second_move_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->auto_second_move_type(), target);
  }

  // optional int32 auto_second_skill_id = 12;
  if (has_auto_second_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->auto_second_skill_id(), target);
  }

  // optional int32 auto_second_skill_level = 13;
  if (has_auto_second_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->auto_second_skill_level(), target);
  }

  // repeated .PB_RoleBattleData.AttrInfo weapon_attr_list = 14;
  for (int i = 0; i < this->weapon_attr_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->weapon_attr_list(i), target);
  }

  // repeated int32 weapon_sp_list = 15;
  for (int i = 0; i < this->weapon_sp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(15, this->weapon_sp_list(i), target);
  }

  // repeated int32 other_sp_list = 16;
  for (int i = 0; i < this->other_sp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(16, this->other_sp_list(i), target);
  }

  // repeated .PB_RoleBattleData.BattleFabao fabao_list = 17;
  for (int i = 0; i < this->fabao_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->fabao_list(i), target);
  }

  // optional bytes appearance = 18;
  if (has_appearance()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        18, this->appearance(), target);
  }

  // repeated int32 guild_buff_list = 21;
  for (int i = 0; i < this->guild_buff_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(21, this->guild_buff_list(i), target);
  }

  // repeated .PB_RoleBattleData.PetPartnerBattleData pet_helper_data = 22;
  for (int i = 0; i < this->pet_helper_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->pet_helper_data(i), target);
  }

  // optional int32 top_level = 23;
  if (has_top_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->top_level(), target);
  }

  // optional int32 heart_skill_is_vaild = 25;
  if (has_heart_skill_is_vaild()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->heart_skill_is_vaild(), target);
  }

  // repeated .PB_RoleBattleData.BattleHeartSkill heart_skill_list = 26;
  for (int i = 0; i < this->heart_skill_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->heart_skill_list(i), target);
  }

  // repeated int32 jieyi_uid_list = 27;
  for (int i = 0; i < this->jieyi_uid_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(27, this->jieyi_uid_list(i), target);
  }

  // repeated int32 jieyi_skill_list = 28;
  for (int i = 0; i < this->jieyi_skill_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(28, this->jieyi_skill_list(i), target);
  }

  // optional int32 soaring_skill_id = 29;
  if (has_soaring_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->soaring_skill_id(), target);
  }

  // optional int32 soaring_skill_lv = 30;
  if (has_soaring_skill_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->soaring_skill_lv(), target);
  }

  // optional int32 qingyuan_target_uid = 31;
  if (has_qingyuan_target_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->qingyuan_target_uid(), target);
  }

  // repeated int32 qingyuan_skill_list = 32;
  for (int i = 0; i < this->qingyuan_skill_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(32, this->qingyuan_skill_list(i), target);
  }

  // optional bool is_robot = 33;
  if (has_is_robot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->is_robot(), target);
  }

  // optional int32 career_suppress_value = 34;
  if (has_career_suppress_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->career_suppress_value(), target);
  }

  // optional int32 change_card_skill_id = 35;
  if (has_change_card_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->change_card_skill_id(), target);
  }

  // optional int32 change_card_seq = 36;
  if (has_change_card_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->change_card_seq(), target);
  }

  // optional int32 role_extra_capability = 37;
  if (has_role_extra_capability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->role_extra_capability(), target);
  }

  // repeated .PB_RoleBattleData.BattleHallowData hallow_list = 38;
  for (int i = 0; i < this->hallow_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->hallow_list(i), target);
  }

  // optional int32 fight_hallow_idx = 39;
  if (has_fight_hallow_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->fight_hallow_idx(), target);
  }

  // optional .PB_RoleBattleData.BattleHuanShouSkill huanshou_skill = 40;
  if (has_huanshou_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->huanshou_skill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_RoleBattleData)
  return target;
}

int PB_RoleBattleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_auto = 1;
    if (has_is_auto()) {
      total_size += 1 + 1;
    }

    // optional bool is_role_stand_front = 2;
    if (has_is_role_stand_front()) {
      total_size += 1 + 1;
    }

    // optional .PB_BattleCharacterData role_character_data = 3;
    if (has_role_character_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_character_data());
    }

    // optional int32 huanshou_level = 4;
    if (has_huanshou_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huanshou_level());
    }

    // optional sint32 fight_pet_idx = 6;
    if (has_fight_pet_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->fight_pet_idx());
    }

    // optional int32 auto_first_move_type = 8;
    if (has_auto_first_move_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_first_move_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 auto_first_skill_id = 9;
    if (has_auto_first_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_first_skill_id());
    }

    // optional int32 auto_first_skill_level = 10;
    if (has_auto_first_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_first_skill_level());
    }

    // optional int32 auto_second_move_type = 11;
    if (has_auto_second_move_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_second_move_type());
    }

    // optional int32 auto_second_skill_id = 12;
    if (has_auto_second_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_second_skill_id());
    }

    // optional int32 auto_second_skill_level = 13;
    if (has_auto_second_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_second_skill_level());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional bytes appearance = 18;
    if (has_appearance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->appearance());
    }

    // optional int32 top_level = 23;
    if (has_top_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->top_level());
    }

    // optional int32 heart_skill_is_vaild = 25;
    if (has_heart_skill_is_vaild()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heart_skill_is_vaild());
    }

  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    // optional int32 soaring_skill_id = 29;
    if (has_soaring_skill_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soaring_skill_id());
    }

    // optional int32 soaring_skill_lv = 30;
    if (has_soaring_skill_lv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soaring_skill_lv());
    }

    // optional int32 qingyuan_target_uid = 31;
    if (has_qingyuan_target_uid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qingyuan_target_uid());
    }

    // optional bool is_robot = 33;
    if (has_is_robot()) {
      total_size += 2 + 1;
    }

    // optional int32 career_suppress_value = 34;
    if (has_career_suppress_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->career_suppress_value());
    }

    // optional int32 change_card_skill_id = 35;
    if (has_change_card_skill_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change_card_skill_id());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 change_card_seq = 36;
    if (has_change_card_seq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change_card_seq());
    }

    // optional int32 role_extra_capability = 37;
    if (has_role_extra_capability()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_extra_capability());
    }

    // optional int32 fight_hallow_idx = 39;
    if (has_fight_hallow_idx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight_hallow_idx());
    }

    // optional .PB_RoleBattleData.BattleHuanShouSkill huanshou_skill = 40;
    if (has_huanshou_skill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->huanshou_skill());
    }

  }
  // repeated .PB_PartnerBattleData partner_character_data = 5;
  total_size += 1 * this->partner_character_data_size();
  for (int i = 0; i < this->partner_character_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->partner_character_data(i));
  }

  // repeated .PB_PetBattleData pet_character_data = 7;
  total_size += 1 * this->pet_character_data_size();
  for (int i = 0; i < this->pet_character_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pet_character_data(i));
  }

  // repeated .PB_RoleBattleData.AttrInfo weapon_attr_list = 14;
  total_size += 1 * this->weapon_attr_list_size();
  for (int i = 0; i < this->weapon_attr_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weapon_attr_list(i));
  }

  // repeated int32 weapon_sp_list = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->weapon_sp_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->weapon_sp_list(i));
    }
    total_size += 1 * this->weapon_sp_list_size() + data_size;
  }

  // repeated int32 other_sp_list = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->other_sp_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->other_sp_list(i));
    }
    total_size += 2 * this->other_sp_list_size() + data_size;
  }

  // repeated .PB_RoleBattleData.BattleFabao fabao_list = 17;
  total_size += 2 * this->fabao_list_size();
  for (int i = 0; i < this->fabao_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fabao_list(i));
  }

  // repeated int32 guild_buff_list = 21;
  {
    int data_size = 0;
    for (int i = 0; i < this->guild_buff_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->guild_buff_list(i));
    }
    total_size += 2 * this->guild_buff_list_size() + data_size;
  }

  // repeated .PB_RoleBattleData.PetPartnerBattleData pet_helper_data = 22;
  total_size += 2 * this->pet_helper_data_size();
  for (int i = 0; i < this->pet_helper_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pet_helper_data(i));
  }

  // repeated .PB_RoleBattleData.BattleHeartSkill heart_skill_list = 26;
  total_size += 2 * this->heart_skill_list_size();
  for (int i = 0; i < this->heart_skill_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heart_skill_list(i));
  }

  // repeated int32 jieyi_uid_list = 27;
  {
    int data_size = 0;
    for (int i = 0; i < this->jieyi_uid_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->jieyi_uid_list(i));
    }
    total_size += 2 * this->jieyi_uid_list_size() + data_size;
  }

  // repeated int32 jieyi_skill_list = 28;
  {
    int data_size = 0;
    for (int i = 0; i < this->jieyi_skill_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->jieyi_skill_list(i));
    }
    total_size += 2 * this->jieyi_skill_list_size() + data_size;
  }

  // repeated int32 qingyuan_skill_list = 32;
  {
    int data_size = 0;
    for (int i = 0; i < this->qingyuan_skill_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->qingyuan_skill_list(i));
    }
    total_size += 2 * this->qingyuan_skill_list_size() + data_size;
  }

  // repeated .PB_RoleBattleData.BattleHallowData hallow_list = 38;
  total_size += 2 * this->hallow_list_size();
  for (int i = 0; i < this->hallow_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hallow_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_RoleBattleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_RoleBattleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_RoleBattleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_RoleBattleData::MergeFrom(const PB_RoleBattleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  partner_character_data_.MergeFrom(from.partner_character_data_);
  pet_character_data_.MergeFrom(from.pet_character_data_);
  weapon_attr_list_.MergeFrom(from.weapon_attr_list_);
  weapon_sp_list_.MergeFrom(from.weapon_sp_list_);
  other_sp_list_.MergeFrom(from.other_sp_list_);
  fabao_list_.MergeFrom(from.fabao_list_);
  guild_buff_list_.MergeFrom(from.guild_buff_list_);
  pet_helper_data_.MergeFrom(from.pet_helper_data_);
  heart_skill_list_.MergeFrom(from.heart_skill_list_);
  jieyi_uid_list_.MergeFrom(from.jieyi_uid_list_);
  jieyi_skill_list_.MergeFrom(from.jieyi_skill_list_);
  qingyuan_skill_list_.MergeFrom(from.qingyuan_skill_list_);
  hallow_list_.MergeFrom(from.hallow_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_auto()) {
      set_is_auto(from.is_auto());
    }
    if (from.has_is_role_stand_front()) {
      set_is_role_stand_front(from.is_role_stand_front());
    }
    if (from.has_role_character_data()) {
      mutable_role_character_data()->::PB_BattleCharacterData::MergeFrom(from.role_character_data());
    }
    if (from.has_huanshou_level()) {
      set_huanshou_level(from.huanshou_level());
    }
    if (from.has_fight_pet_idx()) {
      set_fight_pet_idx(from.fight_pet_idx());
    }
    if (from.has_auto_first_move_type()) {
      set_auto_first_move_type(from.auto_first_move_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_auto_first_skill_id()) {
      set_auto_first_skill_id(from.auto_first_skill_id());
    }
    if (from.has_auto_first_skill_level()) {
      set_auto_first_skill_level(from.auto_first_skill_level());
    }
    if (from.has_auto_second_move_type()) {
      set_auto_second_move_type(from.auto_second_move_type());
    }
    if (from.has_auto_second_skill_id()) {
      set_auto_second_skill_id(from.auto_second_skill_id());
    }
    if (from.has_auto_second_skill_level()) {
      set_auto_second_skill_level(from.auto_second_skill_level());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_appearance()) {
      set_appearance(from.appearance());
    }
    if (from.has_top_level()) {
      set_top_level(from.top_level());
    }
    if (from.has_heart_skill_is_vaild()) {
      set_heart_skill_is_vaild(from.heart_skill_is_vaild());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from.has_soaring_skill_id()) {
      set_soaring_skill_id(from.soaring_skill_id());
    }
    if (from.has_soaring_skill_lv()) {
      set_soaring_skill_lv(from.soaring_skill_lv());
    }
    if (from.has_qingyuan_target_uid()) {
      set_qingyuan_target_uid(from.qingyuan_target_uid());
    }
    if (from.has_is_robot()) {
      set_is_robot(from.is_robot());
    }
    if (from.has_career_suppress_value()) {
      set_career_suppress_value(from.career_suppress_value());
    }
    if (from.has_change_card_skill_id()) {
      set_change_card_skill_id(from.change_card_skill_id());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_change_card_seq()) {
      set_change_card_seq(from.change_card_seq());
    }
    if (from.has_role_extra_capability()) {
      set_role_extra_capability(from.role_extra_capability());
    }
    if (from.has_fight_hallow_idx()) {
      set_fight_hallow_idx(from.fight_hallow_idx());
    }
    if (from.has_huanshou_skill()) {
      mutable_huanshou_skill()->::PB_RoleBattleData_BattleHuanShouSkill::MergeFrom(from.huanshou_skill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_RoleBattleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_RoleBattleData::CopyFrom(const PB_RoleBattleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_RoleBattleData::IsInitialized() const {

  return true;
}

void PB_RoleBattleData::Swap(PB_RoleBattleData* other) {
  if (other != this) {
    std::swap(is_auto_, other->is_auto_);
    std::swap(is_role_stand_front_, other->is_role_stand_front_);
    std::swap(role_character_data_, other->role_character_data_);
    std::swap(huanshou_level_, other->huanshou_level_);
    partner_character_data_.Swap(&other->partner_character_data_);
    std::swap(fight_pet_idx_, other->fight_pet_idx_);
    pet_character_data_.Swap(&other->pet_character_data_);
    std::swap(auto_first_move_type_, other->auto_first_move_type_);
    std::swap(auto_first_skill_id_, other->auto_first_skill_id_);
    std::swap(auto_first_skill_level_, other->auto_first_skill_level_);
    std::swap(auto_second_move_type_, other->auto_second_move_type_);
    std::swap(auto_second_skill_id_, other->auto_second_skill_id_);
    std::swap(auto_second_skill_level_, other->auto_second_skill_level_);
    weapon_attr_list_.Swap(&other->weapon_attr_list_);
    weapon_sp_list_.Swap(&other->weapon_sp_list_);
    other_sp_list_.Swap(&other->other_sp_list_);
    fabao_list_.Swap(&other->fabao_list_);
    std::swap(appearance_, other->appearance_);
    guild_buff_list_.Swap(&other->guild_buff_list_);
    pet_helper_data_.Swap(&other->pet_helper_data_);
    std::swap(top_level_, other->top_level_);
    std::swap(heart_skill_is_vaild_, other->heart_skill_is_vaild_);
    heart_skill_list_.Swap(&other->heart_skill_list_);
    jieyi_uid_list_.Swap(&other->jieyi_uid_list_);
    jieyi_skill_list_.Swap(&other->jieyi_skill_list_);
    std::swap(soaring_skill_id_, other->soaring_skill_id_);
    std::swap(soaring_skill_lv_, other->soaring_skill_lv_);
    std::swap(qingyuan_target_uid_, other->qingyuan_target_uid_);
    qingyuan_skill_list_.Swap(&other->qingyuan_skill_list_);
    std::swap(is_robot_, other->is_robot_);
    std::swap(career_suppress_value_, other->career_suppress_value_);
    std::swap(change_card_skill_id_, other->change_card_skill_id_);
    std::swap(change_card_seq_, other->change_card_seq_);
    std::swap(role_extra_capability_, other->role_extra_capability_);
    hallow_list_.Swap(&other->hallow_list_);
    std::swap(fight_hallow_idx_, other->fight_hallow_idx_);
    std::swap(huanshou_skill_, other->huanshou_skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_RoleBattleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_RoleBattleData_descriptor_;
  metadata.reflection = PB_RoleBattleData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
