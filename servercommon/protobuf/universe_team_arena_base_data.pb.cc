// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: universe_team_arena_base_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "universe_team_arena_base_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PB_UTABaseData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_UTABaseData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_universe_5fteam_5farena_5fbase_5fdata_2eproto() {
  protobuf_AddDesc_universe_5fteam_5farena_5fbase_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "universe_team_arena_base_data.proto");
  GOOGLE_CHECK(file != NULL);
  PB_UTABaseData_descriptor_ = file->message_type(0);
  static const int PB_UTABaseData_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTABaseData, cur_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTABaseData, season_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTABaseData, qualification_round_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTABaseData, main_round_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTABaseData, next_status_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTABaseData, prepare_status_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTABaseData, qualification_status_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTABaseData, main_status_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTABaseData, calculate_status_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTABaseData, rest_status_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTABaseData, qualification_round_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTABaseData, main_round_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTABaseData, qualification_timestamp_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTABaseData, main_timestamp_list_),
  };
  PB_UTABaseData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_UTABaseData_descriptor_,
      PB_UTABaseData::default_instance_,
      PB_UTABaseData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTABaseData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTABaseData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_UTABaseData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_universe_5fteam_5farena_5fbase_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_UTABaseData_descriptor_, &PB_UTABaseData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_universe_5fteam_5farena_5fbase_5fdata_2eproto() {
  delete PB_UTABaseData::default_instance_;
  delete PB_UTABaseData_reflection_;
}

void protobuf_AddDesc_universe_5fteam_5farena_5fbase_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#universe_team_arena_base_data.proto\"\306\003"
    "\n\016PB_UTABaseData\022\022\n\ncur_status\030\001 \001(\005\022\024\n\014"
    "season_index\030\002 \001(\005\022\037\n\027qualification_roun"
    "d_idx\030\003 \001(\005\022\026\n\016main_round_idx\030\004 \001(\005\022\035\n\025n"
    "ext_status_timestamp\030\005 \001(\r\022 \n\030prepare_st"
    "atus_timestamp\030\006 \001(\r\022&\n\036qualification_st"
    "atus_timestamp\030\007 \001(\r\022\035\n\025main_status_time"
    "stamp\030\010 \001(\r\022\"\n\032calculate_status_timestam"
    "p\030\t \001(\r\022\035\n\025rest_status_timestamp\030\n \001(\r\022%"
    "\n\035qualification_round_timestamp\030\013 \001(\r\022\034\n"
    "\024main_round_timestamp\030\014 \001(\r\022$\n\034qualifica"
    "tion_timestamp_list\030\r \003(\r\022\033\n\023main_timest"
    "amp_list\030\016 \003(\r", 494);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "universe_team_arena_base_data.proto", &protobuf_RegisterTypes);
  PB_UTABaseData::default_instance_ = new PB_UTABaseData();
  PB_UTABaseData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_universe_5fteam_5farena_5fbase_5fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_universe_5fteam_5farena_5fbase_5fdata_2eproto {
  StaticDescriptorInitializer_universe_5fteam_5farena_5fbase_5fdata_2eproto() {
    protobuf_AddDesc_universe_5fteam_5farena_5fbase_5fdata_2eproto();
  }
} static_descriptor_initializer_universe_5fteam_5farena_5fbase_5fdata_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PB_UTABaseData::kCurStatusFieldNumber;
const int PB_UTABaseData::kSeasonIndexFieldNumber;
const int PB_UTABaseData::kQualificationRoundIdxFieldNumber;
const int PB_UTABaseData::kMainRoundIdxFieldNumber;
const int PB_UTABaseData::kNextStatusTimestampFieldNumber;
const int PB_UTABaseData::kPrepareStatusTimestampFieldNumber;
const int PB_UTABaseData::kQualificationStatusTimestampFieldNumber;
const int PB_UTABaseData::kMainStatusTimestampFieldNumber;
const int PB_UTABaseData::kCalculateStatusTimestampFieldNumber;
const int PB_UTABaseData::kRestStatusTimestampFieldNumber;
const int PB_UTABaseData::kQualificationRoundTimestampFieldNumber;
const int PB_UTABaseData::kMainRoundTimestampFieldNumber;
const int PB_UTABaseData::kQualificationTimestampListFieldNumber;
const int PB_UTABaseData::kMainTimestampListFieldNumber;
#endif  // !_MSC_VER

PB_UTABaseData::PB_UTABaseData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PB_UTABaseData)
}

void PB_UTABaseData::InitAsDefaultInstance() {
}

PB_UTABaseData::PB_UTABaseData(const PB_UTABaseData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PB_UTABaseData)
}

void PB_UTABaseData::SharedCtor() {
  _cached_size_ = 0;
  cur_status_ = 0;
  season_index_ = 0;
  qualification_round_idx_ = 0;
  main_round_idx_ = 0;
  next_status_timestamp_ = 0u;
  prepare_status_timestamp_ = 0u;
  qualification_status_timestamp_ = 0u;
  main_status_timestamp_ = 0u;
  calculate_status_timestamp_ = 0u;
  rest_status_timestamp_ = 0u;
  qualification_round_timestamp_ = 0u;
  main_round_timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_UTABaseData::~PB_UTABaseData() {
  // @@protoc_insertion_point(destructor:PB_UTABaseData)
  SharedDtor();
}

void PB_UTABaseData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_UTABaseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_UTABaseData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_UTABaseData_descriptor_;
}

const PB_UTABaseData& PB_UTABaseData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_universe_5fteam_5farena_5fbase_5fdata_2eproto();
  return *default_instance_;
}

PB_UTABaseData* PB_UTABaseData::default_instance_ = NULL;

PB_UTABaseData* PB_UTABaseData::New() const {
  return new PB_UTABaseData;
}

void PB_UTABaseData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PB_UTABaseData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cur_status_, main_status_timestamp_);
  }
  ZR_(calculate_status_timestamp_, main_round_timestamp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  qualification_timestamp_list_.Clear();
  main_timestamp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_UTABaseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PB_UTABaseData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cur_status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_status_)));
          set_has_cur_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_season_index;
        break;
      }

      // optional int32 season_index = 2;
      case 2: {
        if (tag == 16) {
         parse_season_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &season_index_)));
          set_has_season_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_qualification_round_idx;
        break;
      }

      // optional int32 qualification_round_idx = 3;
      case 3: {
        if (tag == 24) {
         parse_qualification_round_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qualification_round_idx_)));
          set_has_qualification_round_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_main_round_idx;
        break;
      }

      // optional int32 main_round_idx = 4;
      case 4: {
        if (tag == 32) {
         parse_main_round_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &main_round_idx_)));
          set_has_main_round_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_next_status_timestamp;
        break;
      }

      // optional uint32 next_status_timestamp = 5;
      case 5: {
        if (tag == 40) {
         parse_next_status_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_status_timestamp_)));
          set_has_next_status_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_prepare_status_timestamp;
        break;
      }

      // optional uint32 prepare_status_timestamp = 6;
      case 6: {
        if (tag == 48) {
         parse_prepare_status_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prepare_status_timestamp_)));
          set_has_prepare_status_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_qualification_status_timestamp;
        break;
      }

      // optional uint32 qualification_status_timestamp = 7;
      case 7: {
        if (tag == 56) {
         parse_qualification_status_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qualification_status_timestamp_)));
          set_has_qualification_status_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_main_status_timestamp;
        break;
      }

      // optional uint32 main_status_timestamp = 8;
      case 8: {
        if (tag == 64) {
         parse_main_status_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &main_status_timestamp_)));
          set_has_main_status_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_calculate_status_timestamp;
        break;
      }

      // optional uint32 calculate_status_timestamp = 9;
      case 9: {
        if (tag == 72) {
         parse_calculate_status_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &calculate_status_timestamp_)));
          set_has_calculate_status_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_rest_status_timestamp;
        break;
      }

      // optional uint32 rest_status_timestamp = 10;
      case 10: {
        if (tag == 80) {
         parse_rest_status_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rest_status_timestamp_)));
          set_has_rest_status_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_qualification_round_timestamp;
        break;
      }

      // optional uint32 qualification_round_timestamp = 11;
      case 11: {
        if (tag == 88) {
         parse_qualification_round_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qualification_round_timestamp_)));
          set_has_qualification_round_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_main_round_timestamp;
        break;
      }

      // optional uint32 main_round_timestamp = 12;
      case 12: {
        if (tag == 96) {
         parse_main_round_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &main_round_timestamp_)));
          set_has_main_round_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_qualification_timestamp_list;
        break;
      }

      // repeated uint32 qualification_timestamp_list = 13;
      case 13: {
        if (tag == 104) {
         parse_qualification_timestamp_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104, input, this->mutable_qualification_timestamp_list())));
        } else if (tag == 106) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_qualification_timestamp_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_qualification_timestamp_list;
        if (input->ExpectTag(112)) goto parse_main_timestamp_list;
        break;
      }

      // repeated uint32 main_timestamp_list = 14;
      case 14: {
        if (tag == 112) {
         parse_main_timestamp_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 112, input, this->mutable_main_timestamp_list())));
        } else if (tag == 114) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_main_timestamp_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_main_timestamp_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PB_UTABaseData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PB_UTABaseData)
  return false;
#undef DO_
}

void PB_UTABaseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PB_UTABaseData)
  // optional int32 cur_status = 1;
  if (has_cur_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cur_status(), output);
  }

  // optional int32 season_index = 2;
  if (has_season_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->season_index(), output);
  }

  // optional int32 qualification_round_idx = 3;
  if (has_qualification_round_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->qualification_round_idx(), output);
  }

  // optional int32 main_round_idx = 4;
  if (has_main_round_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->main_round_idx(), output);
  }

  // optional uint32 next_status_timestamp = 5;
  if (has_next_status_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->next_status_timestamp(), output);
  }

  // optional uint32 prepare_status_timestamp = 6;
  if (has_prepare_status_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->prepare_status_timestamp(), output);
  }

  // optional uint32 qualification_status_timestamp = 7;
  if (has_qualification_status_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->qualification_status_timestamp(), output);
  }

  // optional uint32 main_status_timestamp = 8;
  if (has_main_status_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->main_status_timestamp(), output);
  }

  // optional uint32 calculate_status_timestamp = 9;
  if (has_calculate_status_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->calculate_status_timestamp(), output);
  }

  // optional uint32 rest_status_timestamp = 10;
  if (has_rest_status_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->rest_status_timestamp(), output);
  }

  // optional uint32 qualification_round_timestamp = 11;
  if (has_qualification_round_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->qualification_round_timestamp(), output);
  }

  // optional uint32 main_round_timestamp = 12;
  if (has_main_round_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->main_round_timestamp(), output);
  }

  // repeated uint32 qualification_timestamp_list = 13;
  for (int i = 0; i < this->qualification_timestamp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->qualification_timestamp_list(i), output);
  }

  // repeated uint32 main_timestamp_list = 14;
  for (int i = 0; i < this->main_timestamp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      14, this->main_timestamp_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PB_UTABaseData)
}

::google::protobuf::uint8* PB_UTABaseData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_UTABaseData)
  // optional int32 cur_status = 1;
  if (has_cur_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cur_status(), target);
  }

  // optional int32 season_index = 2;
  if (has_season_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->season_index(), target);
  }

  // optional int32 qualification_round_idx = 3;
  if (has_qualification_round_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->qualification_round_idx(), target);
  }

  // optional int32 main_round_idx = 4;
  if (has_main_round_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->main_round_idx(), target);
  }

  // optional uint32 next_status_timestamp = 5;
  if (has_next_status_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->next_status_timestamp(), target);
  }

  // optional uint32 prepare_status_timestamp = 6;
  if (has_prepare_status_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->prepare_status_timestamp(), target);
  }

  // optional uint32 qualification_status_timestamp = 7;
  if (has_qualification_status_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->qualification_status_timestamp(), target);
  }

  // optional uint32 main_status_timestamp = 8;
  if (has_main_status_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->main_status_timestamp(), target);
  }

  // optional uint32 calculate_status_timestamp = 9;
  if (has_calculate_status_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->calculate_status_timestamp(), target);
  }

  // optional uint32 rest_status_timestamp = 10;
  if (has_rest_status_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->rest_status_timestamp(), target);
  }

  // optional uint32 qualification_round_timestamp = 11;
  if (has_qualification_round_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->qualification_round_timestamp(), target);
  }

  // optional uint32 main_round_timestamp = 12;
  if (has_main_round_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->main_round_timestamp(), target);
  }

  // repeated uint32 qualification_timestamp_list = 13;
  for (int i = 0; i < this->qualification_timestamp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(13, this->qualification_timestamp_list(i), target);
  }

  // repeated uint32 main_timestamp_list = 14;
  for (int i = 0; i < this->main_timestamp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(14, this->main_timestamp_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_UTABaseData)
  return target;
}

int PB_UTABaseData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cur_status = 1;
    if (has_cur_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_status());
    }

    // optional int32 season_index = 2;
    if (has_season_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->season_index());
    }

    // optional int32 qualification_round_idx = 3;
    if (has_qualification_round_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qualification_round_idx());
    }

    // optional int32 main_round_idx = 4;
    if (has_main_round_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->main_round_idx());
    }

    // optional uint32 next_status_timestamp = 5;
    if (has_next_status_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->next_status_timestamp());
    }

    // optional uint32 prepare_status_timestamp = 6;
    if (has_prepare_status_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prepare_status_timestamp());
    }

    // optional uint32 qualification_status_timestamp = 7;
    if (has_qualification_status_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qualification_status_timestamp());
    }

    // optional uint32 main_status_timestamp = 8;
    if (has_main_status_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->main_status_timestamp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 calculate_status_timestamp = 9;
    if (has_calculate_status_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->calculate_status_timestamp());
    }

    // optional uint32 rest_status_timestamp = 10;
    if (has_rest_status_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rest_status_timestamp());
    }

    // optional uint32 qualification_round_timestamp = 11;
    if (has_qualification_round_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qualification_round_timestamp());
    }

    // optional uint32 main_round_timestamp = 12;
    if (has_main_round_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->main_round_timestamp());
    }

  }
  // repeated uint32 qualification_timestamp_list = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->qualification_timestamp_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->qualification_timestamp_list(i));
    }
    total_size += 1 * this->qualification_timestamp_list_size() + data_size;
  }

  // repeated uint32 main_timestamp_list = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->main_timestamp_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->main_timestamp_list(i));
    }
    total_size += 1 * this->main_timestamp_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_UTABaseData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_UTABaseData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_UTABaseData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_UTABaseData::MergeFrom(const PB_UTABaseData& from) {
  GOOGLE_CHECK_NE(&from, this);
  qualification_timestamp_list_.MergeFrom(from.qualification_timestamp_list_);
  main_timestamp_list_.MergeFrom(from.main_timestamp_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_status()) {
      set_cur_status(from.cur_status());
    }
    if (from.has_season_index()) {
      set_season_index(from.season_index());
    }
    if (from.has_qualification_round_idx()) {
      set_qualification_round_idx(from.qualification_round_idx());
    }
    if (from.has_main_round_idx()) {
      set_main_round_idx(from.main_round_idx());
    }
    if (from.has_next_status_timestamp()) {
      set_next_status_timestamp(from.next_status_timestamp());
    }
    if (from.has_prepare_status_timestamp()) {
      set_prepare_status_timestamp(from.prepare_status_timestamp());
    }
    if (from.has_qualification_status_timestamp()) {
      set_qualification_status_timestamp(from.qualification_status_timestamp());
    }
    if (from.has_main_status_timestamp()) {
      set_main_status_timestamp(from.main_status_timestamp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_calculate_status_timestamp()) {
      set_calculate_status_timestamp(from.calculate_status_timestamp());
    }
    if (from.has_rest_status_timestamp()) {
      set_rest_status_timestamp(from.rest_status_timestamp());
    }
    if (from.has_qualification_round_timestamp()) {
      set_qualification_round_timestamp(from.qualification_round_timestamp());
    }
    if (from.has_main_round_timestamp()) {
      set_main_round_timestamp(from.main_round_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_UTABaseData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_UTABaseData::CopyFrom(const PB_UTABaseData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_UTABaseData::IsInitialized() const {

  return true;
}

void PB_UTABaseData::Swap(PB_UTABaseData* other) {
  if (other != this) {
    std::swap(cur_status_, other->cur_status_);
    std::swap(season_index_, other->season_index_);
    std::swap(qualification_round_idx_, other->qualification_round_idx_);
    std::swap(main_round_idx_, other->main_round_idx_);
    std::swap(next_status_timestamp_, other->next_status_timestamp_);
    std::swap(prepare_status_timestamp_, other->prepare_status_timestamp_);
    std::swap(qualification_status_timestamp_, other->qualification_status_timestamp_);
    std::swap(main_status_timestamp_, other->main_status_timestamp_);
    std::swap(calculate_status_timestamp_, other->calculate_status_timestamp_);
    std::swap(rest_status_timestamp_, other->rest_status_timestamp_);
    std::swap(qualification_round_timestamp_, other->qualification_round_timestamp_);
    std::swap(main_round_timestamp_, other->main_round_timestamp_);
    qualification_timestamp_list_.Swap(&other->qualification_timestamp_list_);
    main_timestamp_list_.Swap(&other->main_timestamp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_UTABaseData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_UTABaseData_descriptor_;
  metadata.reflection = PB_UTABaseData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
