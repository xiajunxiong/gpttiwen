// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: universe_team_arena_team_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "universe_team_arena_team_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PB_UTATeamMemberData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_UTATeamMemberData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_UTATeamData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_UTATeamData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_universe_5fteam_5farena_5fteam_5fdata_2eproto() {
  protobuf_AddDesc_universe_5fteam_5farena_5fteam_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "universe_team_arena_team_data.proto");
  GOOGLE_CHECK(file != NULL);
  PB_UTATeamMemberData_descriptor_ = file->message_type(0);
  static const int PB_UTATeamMemberData_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTATeamMemberData, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTATeamMemberData, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTATeamMemberData, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTATeamMemberData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTATeamMemberData, top_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTATeamMemberData, avatar_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTATeamMemberData, headshot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTATeamMemberData, fly_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTATeamMemberData, capability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTATeamMemberData, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTATeamMemberData, appearance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTATeamMemberData, today_reward_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTATeamMemberData, win_box_fetch_flag_),
  };
  PB_UTATeamMemberData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_UTATeamMemberData_descriptor_,
      PB_UTATeamMemberData::default_instance_,
      PB_UTATeamMemberData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTATeamMemberData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTATeamMemberData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_UTATeamMemberData));
  PB_UTATeamData_descriptor_ = file->message_type(1);
  static const int PB_UTATeamData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTATeamData, plat_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTATeamData, team_unique_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTATeamData, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTATeamData, member_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTATeamData, hidden_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTATeamData, team_id_in_hidden_),
  };
  PB_UTATeamData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_UTATeamData_descriptor_,
      PB_UTATeamData::default_instance_,
      PB_UTATeamData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTATeamData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTATeamData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_UTATeamData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_universe_5fteam_5farena_5fteam_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_UTATeamMemberData_descriptor_, &PB_UTATeamMemberData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_UTATeamData_descriptor_, &PB_UTATeamData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_universe_5fteam_5farena_5fteam_5fdata_2eproto() {
  delete PB_UTATeamMemberData::default_instance_;
  delete PB_UTATeamMemberData_reflection_;
  delete PB_UTATeamData::default_instance_;
  delete PB_UTATeamData_reflection_;
}

void protobuf_AddDesc_universe_5fteam_5farena_5fteam_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#universe_team_arena_team_data.proto\"\224\002"
    "\n\024PB_UTATeamMemberData\022\014\n\004uuid\030\001 \001(\003\022\013\n\003"
    "uid\030\002 \001(\005\022\022\n\nprofession\030\003 \001(\005\022\r\n\005level\030\004"
    " \001(\005\022\021\n\ttop_level\030\005 \001(\005\022\023\n\013avatar_type\030\006"
    " \001(\005\022\023\n\013headshot_id\030\007 \001(\005\022\020\n\010fly_flag\030\010 "
    "\001(\005\022\022\n\ncapability\030\t \001(\005\022\021\n\trole_name\030\n \001"
    "(\t\022\022\n\nappearance\030\013 \001(\014\022\030\n\020today_reward_n"
    "um\030\014 \001(\005\022\032\n\022win_box_fetch_flag\030\r \001(\005\"\251\001\n"
    "\016PB_UTATeamData\022\021\n\tplat_type\030\001 \001(\005\022\026\n\016te"
    "am_unique_id\030\002 \001(\003\022\021\n\tteam_name\030\003 \001(\t\022*\n"
    "\013member_list\030\004 \003(\0132\025.PB_UTATeamMemberDat"
    "a\022\022\n\nhidden_idx\030\005 \001(\005\022\031\n\021team_id_in_hidd"
    "en\030\006 \001(\003", 488);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "universe_team_arena_team_data.proto", &protobuf_RegisterTypes);
  PB_UTATeamMemberData::default_instance_ = new PB_UTATeamMemberData();
  PB_UTATeamData::default_instance_ = new PB_UTATeamData();
  PB_UTATeamMemberData::default_instance_->InitAsDefaultInstance();
  PB_UTATeamData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_universe_5fteam_5farena_5fteam_5fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_universe_5fteam_5farena_5fteam_5fdata_2eproto {
  StaticDescriptorInitializer_universe_5fteam_5farena_5fteam_5fdata_2eproto() {
    protobuf_AddDesc_universe_5fteam_5farena_5fteam_5fdata_2eproto();
  }
} static_descriptor_initializer_universe_5fteam_5farena_5fteam_5fdata_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PB_UTATeamMemberData::kUuidFieldNumber;
const int PB_UTATeamMemberData::kUidFieldNumber;
const int PB_UTATeamMemberData::kProfessionFieldNumber;
const int PB_UTATeamMemberData::kLevelFieldNumber;
const int PB_UTATeamMemberData::kTopLevelFieldNumber;
const int PB_UTATeamMemberData::kAvatarTypeFieldNumber;
const int PB_UTATeamMemberData::kHeadshotIdFieldNumber;
const int PB_UTATeamMemberData::kFlyFlagFieldNumber;
const int PB_UTATeamMemberData::kCapabilityFieldNumber;
const int PB_UTATeamMemberData::kRoleNameFieldNumber;
const int PB_UTATeamMemberData::kAppearanceFieldNumber;
const int PB_UTATeamMemberData::kTodayRewardNumFieldNumber;
const int PB_UTATeamMemberData::kWinBoxFetchFlagFieldNumber;
#endif  // !_MSC_VER

PB_UTATeamMemberData::PB_UTATeamMemberData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PB_UTATeamMemberData)
}

void PB_UTATeamMemberData::InitAsDefaultInstance() {
}

PB_UTATeamMemberData::PB_UTATeamMemberData(const PB_UTATeamMemberData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PB_UTATeamMemberData)
}

void PB_UTATeamMemberData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uuid_ = GOOGLE_LONGLONG(0);
  uid_ = 0;
  profession_ = 0;
  level_ = 0;
  top_level_ = 0;
  avatar_type_ = 0;
  headshot_id_ = 0;
  fly_flag_ = 0;
  capability_ = 0;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appearance_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  today_reward_num_ = 0;
  win_box_fetch_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_UTATeamMemberData::~PB_UTATeamMemberData() {
  // @@protoc_insertion_point(destructor:PB_UTATeamMemberData)
  SharedDtor();
}

void PB_UTATeamMemberData::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete role_name_;
  }
  if (appearance_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete appearance_;
  }
  if (this != default_instance_) {
  }
}

void PB_UTATeamMemberData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_UTATeamMemberData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_UTATeamMemberData_descriptor_;
}

const PB_UTATeamMemberData& PB_UTATeamMemberData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_universe_5fteam_5farena_5fteam_5fdata_2eproto();
  return *default_instance_;
}

PB_UTATeamMemberData* PB_UTATeamMemberData::default_instance_ = NULL;

PB_UTATeamMemberData* PB_UTATeamMemberData::New() const {
  return new PB_UTATeamMemberData;
}

void PB_UTATeamMemberData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PB_UTATeamMemberData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uuid_, fly_flag_);
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(today_reward_num_, win_box_fetch_flag_);
    capability_ = 0;
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        role_name_->clear();
      }
    }
    if (has_appearance()) {
      if (appearance_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        appearance_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_UTATeamMemberData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PB_UTATeamMemberData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // optional int32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_profession;
        break;
      }

      // optional int32 profession = 3;
      case 3: {
        if (tag == 24) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (tag == 32) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_top_level;
        break;
      }

      // optional int32 top_level = 5;
      case 5: {
        if (tag == 40) {
         parse_top_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_level_)));
          set_has_top_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_avatar_type;
        break;
      }

      // optional int32 avatar_type = 6;
      case 6: {
        if (tag == 48) {
         parse_avatar_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avatar_type_)));
          set_has_avatar_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_headshot_id;
        break;
      }

      // optional int32 headshot_id = 7;
      case 7: {
        if (tag == 56) {
         parse_headshot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headshot_id_)));
          set_has_headshot_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_fly_flag;
        break;
      }

      // optional int32 fly_flag = 8;
      case 8: {
        if (tag == 64) {
         parse_fly_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fly_flag_)));
          set_has_fly_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_capability;
        break;
      }

      // optional int32 capability = 9;
      case 9: {
        if (tag == 72) {
         parse_capability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &capability_)));
          set_has_capability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_role_name;
        break;
      }

      // optional string role_name = 10;
      case 10: {
        if (tag == 82) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "role_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_appearance;
        break;
      }

      // optional bytes appearance = 11;
      case 11: {
        if (tag == 90) {
         parse_appearance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_appearance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_today_reward_num;
        break;
      }

      // optional int32 today_reward_num = 12;
      case 12: {
        if (tag == 96) {
         parse_today_reward_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &today_reward_num_)));
          set_has_today_reward_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_win_box_fetch_flag;
        break;
      }

      // optional int32 win_box_fetch_flag = 13;
      case 13: {
        if (tag == 104) {
         parse_win_box_fetch_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_box_fetch_flag_)));
          set_has_win_box_fetch_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PB_UTATeamMemberData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PB_UTATeamMemberData)
  return false;
#undef DO_
}

void PB_UTATeamMemberData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PB_UTATeamMemberData)
  // optional int64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uuid(), output);
  }

  // optional int32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uid(), output);
  }

  // optional int32 profession = 3;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->profession(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional int32 top_level = 5;
  if (has_top_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->top_level(), output);
  }

  // optional int32 avatar_type = 6;
  if (has_avatar_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->avatar_type(), output);
  }

  // optional int32 headshot_id = 7;
  if (has_headshot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->headshot_id(), output);
  }

  // optional int32 fly_flag = 8;
  if (has_fly_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->fly_flag(), output);
  }

  // optional int32 capability = 9;
  if (has_capability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->capability(), output);
  }

  // optional string role_name = 10;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "role_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->role_name(), output);
  }

  // optional bytes appearance = 11;
  if (has_appearance()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->appearance(), output);
  }

  // optional int32 today_reward_num = 12;
  if (has_today_reward_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->today_reward_num(), output);
  }

  // optional int32 win_box_fetch_flag = 13;
  if (has_win_box_fetch_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->win_box_fetch_flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PB_UTATeamMemberData)
}

::google::protobuf::uint8* PB_UTATeamMemberData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_UTATeamMemberData)
  // optional int64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uuid(), target);
  }

  // optional int32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->uid(), target);
  }

  // optional int32 profession = 3;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->profession(), target);
  }

  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // optional int32 top_level = 5;
  if (has_top_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->top_level(), target);
  }

  // optional int32 avatar_type = 6;
  if (has_avatar_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->avatar_type(), target);
  }

  // optional int32 headshot_id = 7;
  if (has_headshot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->headshot_id(), target);
  }

  // optional int32 fly_flag = 8;
  if (has_fly_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->fly_flag(), target);
  }

  // optional int32 capability = 9;
  if (has_capability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->capability(), target);
  }

  // optional string role_name = 10;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "role_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->role_name(), target);
  }

  // optional bytes appearance = 11;
  if (has_appearance()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->appearance(), target);
  }

  // optional int32 today_reward_num = 12;
  if (has_today_reward_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->today_reward_num(), target);
  }

  // optional int32 win_box_fetch_flag = 13;
  if (has_win_box_fetch_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->win_box_fetch_flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_UTATeamMemberData)
  return target;
}

int PB_UTATeamMemberData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uuid());
    }

    // optional int32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 profession = 3;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 top_level = 5;
    if (has_top_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->top_level());
    }

    // optional int32 avatar_type = 6;
    if (has_avatar_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avatar_type());
    }

    // optional int32 headshot_id = 7;
    if (has_headshot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headshot_id());
    }

    // optional int32 fly_flag = 8;
    if (has_fly_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fly_flag());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 capability = 9;
    if (has_capability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->capability());
    }

    // optional string role_name = 10;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional bytes appearance = 11;
    if (has_appearance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->appearance());
    }

    // optional int32 today_reward_num = 12;
    if (has_today_reward_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->today_reward_num());
    }

    // optional int32 win_box_fetch_flag = 13;
    if (has_win_box_fetch_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_box_fetch_flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_UTATeamMemberData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_UTATeamMemberData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_UTATeamMemberData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_UTATeamMemberData::MergeFrom(const PB_UTATeamMemberData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_top_level()) {
      set_top_level(from.top_level());
    }
    if (from.has_avatar_type()) {
      set_avatar_type(from.avatar_type());
    }
    if (from.has_headshot_id()) {
      set_headshot_id(from.headshot_id());
    }
    if (from.has_fly_flag()) {
      set_fly_flag(from.fly_flag());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_capability()) {
      set_capability(from.capability());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_appearance()) {
      set_appearance(from.appearance());
    }
    if (from.has_today_reward_num()) {
      set_today_reward_num(from.today_reward_num());
    }
    if (from.has_win_box_fetch_flag()) {
      set_win_box_fetch_flag(from.win_box_fetch_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_UTATeamMemberData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_UTATeamMemberData::CopyFrom(const PB_UTATeamMemberData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_UTATeamMemberData::IsInitialized() const {

  return true;
}

void PB_UTATeamMemberData::Swap(PB_UTATeamMemberData* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(uid_, other->uid_);
    std::swap(profession_, other->profession_);
    std::swap(level_, other->level_);
    std::swap(top_level_, other->top_level_);
    std::swap(avatar_type_, other->avatar_type_);
    std::swap(headshot_id_, other->headshot_id_);
    std::swap(fly_flag_, other->fly_flag_);
    std::swap(capability_, other->capability_);
    std::swap(role_name_, other->role_name_);
    std::swap(appearance_, other->appearance_);
    std::swap(today_reward_num_, other->today_reward_num_);
    std::swap(win_box_fetch_flag_, other->win_box_fetch_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_UTATeamMemberData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_UTATeamMemberData_descriptor_;
  metadata.reflection = PB_UTATeamMemberData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_UTATeamData::kPlatTypeFieldNumber;
const int PB_UTATeamData::kTeamUniqueIdFieldNumber;
const int PB_UTATeamData::kTeamNameFieldNumber;
const int PB_UTATeamData::kMemberListFieldNumber;
const int PB_UTATeamData::kHiddenIdxFieldNumber;
const int PB_UTATeamData::kTeamIdInHiddenFieldNumber;
#endif  // !_MSC_VER

PB_UTATeamData::PB_UTATeamData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PB_UTATeamData)
}

void PB_UTATeamData::InitAsDefaultInstance() {
}

PB_UTATeamData::PB_UTATeamData(const PB_UTATeamData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PB_UTATeamData)
}

void PB_UTATeamData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  plat_type_ = 0;
  team_unique_id_ = GOOGLE_LONGLONG(0);
  team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hidden_idx_ = 0;
  team_id_in_hidden_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_UTATeamData::~PB_UTATeamData() {
  // @@protoc_insertion_point(destructor:PB_UTATeamData)
  SharedDtor();
}

void PB_UTATeamData::SharedDtor() {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_name_;
  }
  if (this != default_instance_) {
  }
}

void PB_UTATeamData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_UTATeamData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_UTATeamData_descriptor_;
}

const PB_UTATeamData& PB_UTATeamData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_universe_5fteam_5farena_5fteam_5fdata_2eproto();
  return *default_instance_;
}

PB_UTATeamData* PB_UTATeamData::default_instance_ = NULL;

PB_UTATeamData* PB_UTATeamData::New() const {
  return new PB_UTATeamData;
}

void PB_UTATeamData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PB_UTATeamData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 55) {
    ZR_(plat_type_, hidden_idx_);
    team_unique_id_ = GOOGLE_LONGLONG(0);
    if (has_team_name()) {
      if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        team_name_->clear();
      }
    }
    team_id_in_hidden_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_UTATeamData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PB_UTATeamData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 plat_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plat_type_)));
          set_has_plat_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_team_unique_id;
        break;
      }

      // optional int64 team_unique_id = 2;
      case 2: {
        if (tag == 16) {
         parse_team_unique_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &team_unique_id_)));
          set_has_team_unique_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_team_name;
        break;
      }

      // optional string team_name = 3;
      case 3: {
        if (tag == 26) {
         parse_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "team_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_member_list;
        break;
      }

      // repeated .PB_UTATeamMemberData member_list = 4;
      case 4: {
        if (tag == 34) {
         parse_member_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_member_list;
        if (input->ExpectTag(40)) goto parse_hidden_idx;
        break;
      }

      // optional int32 hidden_idx = 5;
      case 5: {
        if (tag == 40) {
         parse_hidden_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hidden_idx_)));
          set_has_hidden_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_team_id_in_hidden;
        break;
      }

      // optional int64 team_id_in_hidden = 6;
      case 6: {
        if (tag == 48) {
         parse_team_id_in_hidden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &team_id_in_hidden_)));
          set_has_team_id_in_hidden();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PB_UTATeamData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PB_UTATeamData)
  return false;
#undef DO_
}

void PB_UTATeamData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PB_UTATeamData)
  // optional int32 plat_type = 1;
  if (has_plat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->plat_type(), output);
  }

  // optional int64 team_unique_id = 2;
  if (has_team_unique_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->team_unique_id(), output);
  }

  // optional string team_name = 3;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->team_name(), output);
  }

  // repeated .PB_UTATeamMemberData member_list = 4;
  for (int i = 0; i < this->member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->member_list(i), output);
  }

  // optional int32 hidden_idx = 5;
  if (has_hidden_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hidden_idx(), output);
  }

  // optional int64 team_id_in_hidden = 6;
  if (has_team_id_in_hidden()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->team_id_in_hidden(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PB_UTATeamData)
}

::google::protobuf::uint8* PB_UTATeamData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_UTATeamData)
  // optional int32 plat_type = 1;
  if (has_plat_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->plat_type(), target);
  }

  // optional int64 team_unique_id = 2;
  if (has_team_unique_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->team_unique_id(), target);
  }

  // optional string team_name = 3;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team_name(), target);
  }

  // repeated .PB_UTATeamMemberData member_list = 4;
  for (int i = 0; i < this->member_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->member_list(i), target);
  }

  // optional int32 hidden_idx = 5;
  if (has_hidden_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hidden_idx(), target);
  }

  // optional int64 team_id_in_hidden = 6;
  if (has_team_id_in_hidden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->team_id_in_hidden(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_UTATeamData)
  return target;
}

int PB_UTATeamData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 plat_type = 1;
    if (has_plat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plat_type());
    }

    // optional int64 team_unique_id = 2;
    if (has_team_unique_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->team_unique_id());
    }

    // optional string team_name = 3;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional int32 hidden_idx = 5;
    if (has_hidden_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hidden_idx());
    }

    // optional int64 team_id_in_hidden = 6;
    if (has_team_id_in_hidden()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->team_id_in_hidden());
    }

  }
  // repeated .PB_UTATeamMemberData member_list = 4;
  total_size += 1 * this->member_list_size();
  for (int i = 0; i < this->member_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_UTATeamData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_UTATeamData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_UTATeamData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_UTATeamData::MergeFrom(const PB_UTATeamData& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_list_.MergeFrom(from.member_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plat_type()) {
      set_plat_type(from.plat_type());
    }
    if (from.has_team_unique_id()) {
      set_team_unique_id(from.team_unique_id());
    }
    if (from.has_team_name()) {
      set_team_name(from.team_name());
    }
    if (from.has_hidden_idx()) {
      set_hidden_idx(from.hidden_idx());
    }
    if (from.has_team_id_in_hidden()) {
      set_team_id_in_hidden(from.team_id_in_hidden());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_UTATeamData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_UTATeamData::CopyFrom(const PB_UTATeamData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_UTATeamData::IsInitialized() const {

  return true;
}

void PB_UTATeamData::Swap(PB_UTATeamData* other) {
  if (other != this) {
    std::swap(plat_type_, other->plat_type_);
    std::swap(team_unique_id_, other->team_unique_id_);
    std::swap(team_name_, other->team_name_);
    member_list_.Swap(&other->member_list_);
    std::swap(hidden_idx_, other->hidden_idx_);
    std::swap(team_id_in_hidden_, other->team_id_in_hidden_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_UTATeamData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_UTATeamData_descriptor_;
  metadata.reflection = PB_UTATeamData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
