// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: universe_team_arena_team_data.proto

#ifndef PROTOBUF_universe_5fteam_5farena_5fteam_5fdata_2eproto__INCLUDED
#define PROTOBUF_universe_5fteam_5farena_5fteam_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_universe_5fteam_5farena_5fteam_5fdata_2eproto();
void protobuf_AssignDesc_universe_5fteam_5farena_5fteam_5fdata_2eproto();
void protobuf_ShutdownFile_universe_5fteam_5farena_5fteam_5fdata_2eproto();

class PB_UTATeamMemberData;
class PB_UTATeamData;

// ===================================================================

class PB_UTATeamMemberData : public ::google::protobuf::Message {
 public:
  PB_UTATeamMemberData();
  virtual ~PB_UTATeamMemberData();

  PB_UTATeamMemberData(const PB_UTATeamMemberData& from);

  inline PB_UTATeamMemberData& operator=(const PB_UTATeamMemberData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PB_UTATeamMemberData& default_instance();

  void Swap(PB_UTATeamMemberData* other);

  // implements Message ----------------------------------------------

  PB_UTATeamMemberData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB_UTATeamMemberData& from);
  void MergeFrom(const PB_UTATeamMemberData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline ::google::protobuf::int64 uuid() const;
  inline void set_uuid(::google::protobuf::int64 value);

  // optional int32 uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional int32 profession = 3;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 3;
  inline ::google::protobuf::int32 profession() const;
  inline void set_profession(::google::protobuf::int32 value);

  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 top_level = 5;
  inline bool has_top_level() const;
  inline void clear_top_level();
  static const int kTopLevelFieldNumber = 5;
  inline ::google::protobuf::int32 top_level() const;
  inline void set_top_level(::google::protobuf::int32 value);

  // optional int32 avatar_type = 6;
  inline bool has_avatar_type() const;
  inline void clear_avatar_type();
  static const int kAvatarTypeFieldNumber = 6;
  inline ::google::protobuf::int32 avatar_type() const;
  inline void set_avatar_type(::google::protobuf::int32 value);

  // optional int32 headshot_id = 7;
  inline bool has_headshot_id() const;
  inline void clear_headshot_id();
  static const int kHeadshotIdFieldNumber = 7;
  inline ::google::protobuf::int32 headshot_id() const;
  inline void set_headshot_id(::google::protobuf::int32 value);

  // optional int32 fly_flag = 8;
  inline bool has_fly_flag() const;
  inline void clear_fly_flag();
  static const int kFlyFlagFieldNumber = 8;
  inline ::google::protobuf::int32 fly_flag() const;
  inline void set_fly_flag(::google::protobuf::int32 value);

  // optional int32 capability = 9;
  inline bool has_capability() const;
  inline void clear_capability();
  static const int kCapabilityFieldNumber = 9;
  inline ::google::protobuf::int32 capability() const;
  inline void set_capability(::google::protobuf::int32 value);

  // optional string role_name = 10;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 10;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional bytes appearance = 11;
  inline bool has_appearance() const;
  inline void clear_appearance();
  static const int kAppearanceFieldNumber = 11;
  inline const ::std::string& appearance() const;
  inline void set_appearance(const ::std::string& value);
  inline void set_appearance(const char* value);
  inline void set_appearance(const void* value, size_t size);
  inline ::std::string* mutable_appearance();
  inline ::std::string* release_appearance();
  inline void set_allocated_appearance(::std::string* appearance);

  // optional int32 today_reward_num = 12;
  inline bool has_today_reward_num() const;
  inline void clear_today_reward_num();
  static const int kTodayRewardNumFieldNumber = 12;
  inline ::google::protobuf::int32 today_reward_num() const;
  inline void set_today_reward_num(::google::protobuf::int32 value);

  // optional int32 win_box_fetch_flag = 13;
  inline bool has_win_box_fetch_flag() const;
  inline void clear_win_box_fetch_flag();
  static const int kWinBoxFetchFlagFieldNumber = 13;
  inline ::google::protobuf::int32 win_box_fetch_flag() const;
  inline void set_win_box_fetch_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB_UTATeamMemberData)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_top_level();
  inline void clear_has_top_level();
  inline void set_has_avatar_type();
  inline void clear_has_avatar_type();
  inline void set_has_headshot_id();
  inline void clear_has_headshot_id();
  inline void set_has_fly_flag();
  inline void clear_has_fly_flag();
  inline void set_has_capability();
  inline void clear_has_capability();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_appearance();
  inline void clear_has_appearance();
  inline void set_has_today_reward_num();
  inline void clear_has_today_reward_num();
  inline void set_has_win_box_fetch_flag();
  inline void clear_has_win_box_fetch_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 uuid_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 profession_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 top_level_;
  ::google::protobuf::int32 avatar_type_;
  ::google::protobuf::int32 headshot_id_;
  ::google::protobuf::int32 fly_flag_;
  ::google::protobuf::int32 capability_;
  ::std::string* role_name_;
  ::std::string* appearance_;
  ::google::protobuf::int32 today_reward_num_;
  ::google::protobuf::int32 win_box_fetch_flag_;
  friend void  protobuf_AddDesc_universe_5fteam_5farena_5fteam_5fdata_2eproto();
  friend void protobuf_AssignDesc_universe_5fteam_5farena_5fteam_5fdata_2eproto();
  friend void protobuf_ShutdownFile_universe_5fteam_5farena_5fteam_5fdata_2eproto();

  void InitAsDefaultInstance();
  static PB_UTATeamMemberData* default_instance_;
};
// -------------------------------------------------------------------

class PB_UTATeamData : public ::google::protobuf::Message {
 public:
  PB_UTATeamData();
  virtual ~PB_UTATeamData();

  PB_UTATeamData(const PB_UTATeamData& from);

  inline PB_UTATeamData& operator=(const PB_UTATeamData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PB_UTATeamData& default_instance();

  void Swap(PB_UTATeamData* other);

  // implements Message ----------------------------------------------

  PB_UTATeamData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB_UTATeamData& from);
  void MergeFrom(const PB_UTATeamData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 plat_type = 1;
  inline bool has_plat_type() const;
  inline void clear_plat_type();
  static const int kPlatTypeFieldNumber = 1;
  inline ::google::protobuf::int32 plat_type() const;
  inline void set_plat_type(::google::protobuf::int32 value);

  // optional int64 team_unique_id = 2;
  inline bool has_team_unique_id() const;
  inline void clear_team_unique_id();
  static const int kTeamUniqueIdFieldNumber = 2;
  inline ::google::protobuf::int64 team_unique_id() const;
  inline void set_team_unique_id(::google::protobuf::int64 value);

  // optional string team_name = 3;
  inline bool has_team_name() const;
  inline void clear_team_name();
  static const int kTeamNameFieldNumber = 3;
  inline const ::std::string& team_name() const;
  inline void set_team_name(const ::std::string& value);
  inline void set_team_name(const char* value);
  inline void set_team_name(const char* value, size_t size);
  inline ::std::string* mutable_team_name();
  inline ::std::string* release_team_name();
  inline void set_allocated_team_name(::std::string* team_name);

  // repeated .PB_UTATeamMemberData member_list = 4;
  inline int member_list_size() const;
  inline void clear_member_list();
  static const int kMemberListFieldNumber = 4;
  inline const ::PB_UTATeamMemberData& member_list(int index) const;
  inline ::PB_UTATeamMemberData* mutable_member_list(int index);
  inline ::PB_UTATeamMemberData* add_member_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB_UTATeamMemberData >&
      member_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB_UTATeamMemberData >*
      mutable_member_list();

  // optional int32 hidden_idx = 5;
  inline bool has_hidden_idx() const;
  inline void clear_hidden_idx();
  static const int kHiddenIdxFieldNumber = 5;
  inline ::google::protobuf::int32 hidden_idx() const;
  inline void set_hidden_idx(::google::protobuf::int32 value);

  // optional int64 team_id_in_hidden = 6;
  inline bool has_team_id_in_hidden() const;
  inline void clear_team_id_in_hidden();
  static const int kTeamIdInHiddenFieldNumber = 6;
  inline ::google::protobuf::int64 team_id_in_hidden() const;
  inline void set_team_id_in_hidden(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PB_UTATeamData)
 private:
  inline void set_has_plat_type();
  inline void clear_has_plat_type();
  inline void set_has_team_unique_id();
  inline void clear_has_team_unique_id();
  inline void set_has_team_name();
  inline void clear_has_team_name();
  inline void set_has_hidden_idx();
  inline void clear_has_hidden_idx();
  inline void set_has_team_id_in_hidden();
  inline void clear_has_team_id_in_hidden();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 team_unique_id_;
  ::std::string* team_name_;
  ::google::protobuf::int32 plat_type_;
  ::google::protobuf::int32 hidden_idx_;
  ::google::protobuf::RepeatedPtrField< ::PB_UTATeamMemberData > member_list_;
  ::google::protobuf::int64 team_id_in_hidden_;
  friend void  protobuf_AddDesc_universe_5fteam_5farena_5fteam_5fdata_2eproto();
  friend void protobuf_AssignDesc_universe_5fteam_5farena_5fteam_5fdata_2eproto();
  friend void protobuf_ShutdownFile_universe_5fteam_5farena_5fteam_5fdata_2eproto();

  void InitAsDefaultInstance();
  static PB_UTATeamData* default_instance_;
};
// ===================================================================


// ===================================================================

// PB_UTATeamMemberData

// optional int64 uuid = 1;
inline bool PB_UTATeamMemberData::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_UTATeamMemberData::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB_UTATeamMemberData::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB_UTATeamMemberData::clear_uuid() {
  uuid_ = GOOGLE_LONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::int64 PB_UTATeamMemberData::uuid() const {
  // @@protoc_insertion_point(field_get:PB_UTATeamMemberData.uuid)
  return uuid_;
}
inline void PB_UTATeamMemberData::set_uuid(::google::protobuf::int64 value) {
  set_has_uuid();
  uuid_ = value;
  // @@protoc_insertion_point(field_set:PB_UTATeamMemberData.uuid)
}

// optional int32 uid = 2;
inline bool PB_UTATeamMemberData::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_UTATeamMemberData::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PB_UTATeamMemberData::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PB_UTATeamMemberData::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 PB_UTATeamMemberData::uid() const {
  // @@protoc_insertion_point(field_get:PB_UTATeamMemberData.uid)
  return uid_;
}
inline void PB_UTATeamMemberData::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:PB_UTATeamMemberData.uid)
}

// optional int32 profession = 3;
inline bool PB_UTATeamMemberData::has_profession() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PB_UTATeamMemberData::set_has_profession() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PB_UTATeamMemberData::clear_has_profession() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PB_UTATeamMemberData::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::google::protobuf::int32 PB_UTATeamMemberData::profession() const {
  // @@protoc_insertion_point(field_get:PB_UTATeamMemberData.profession)
  return profession_;
}
inline void PB_UTATeamMemberData::set_profession(::google::protobuf::int32 value) {
  set_has_profession();
  profession_ = value;
  // @@protoc_insertion_point(field_set:PB_UTATeamMemberData.profession)
}

// optional int32 level = 4;
inline bool PB_UTATeamMemberData::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PB_UTATeamMemberData::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PB_UTATeamMemberData::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PB_UTATeamMemberData::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 PB_UTATeamMemberData::level() const {
  // @@protoc_insertion_point(field_get:PB_UTATeamMemberData.level)
  return level_;
}
inline void PB_UTATeamMemberData::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:PB_UTATeamMemberData.level)
}

// optional int32 top_level = 5;
inline bool PB_UTATeamMemberData::has_top_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PB_UTATeamMemberData::set_has_top_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PB_UTATeamMemberData::clear_has_top_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PB_UTATeamMemberData::clear_top_level() {
  top_level_ = 0;
  clear_has_top_level();
}
inline ::google::protobuf::int32 PB_UTATeamMemberData::top_level() const {
  // @@protoc_insertion_point(field_get:PB_UTATeamMemberData.top_level)
  return top_level_;
}
inline void PB_UTATeamMemberData::set_top_level(::google::protobuf::int32 value) {
  set_has_top_level();
  top_level_ = value;
  // @@protoc_insertion_point(field_set:PB_UTATeamMemberData.top_level)
}

// optional int32 avatar_type = 6;
inline bool PB_UTATeamMemberData::has_avatar_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PB_UTATeamMemberData::set_has_avatar_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PB_UTATeamMemberData::clear_has_avatar_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PB_UTATeamMemberData::clear_avatar_type() {
  avatar_type_ = 0;
  clear_has_avatar_type();
}
inline ::google::protobuf::int32 PB_UTATeamMemberData::avatar_type() const {
  // @@protoc_insertion_point(field_get:PB_UTATeamMemberData.avatar_type)
  return avatar_type_;
}
inline void PB_UTATeamMemberData::set_avatar_type(::google::protobuf::int32 value) {
  set_has_avatar_type();
  avatar_type_ = value;
  // @@protoc_insertion_point(field_set:PB_UTATeamMemberData.avatar_type)
}

// optional int32 headshot_id = 7;
inline bool PB_UTATeamMemberData::has_headshot_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PB_UTATeamMemberData::set_has_headshot_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PB_UTATeamMemberData::clear_has_headshot_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PB_UTATeamMemberData::clear_headshot_id() {
  headshot_id_ = 0;
  clear_has_headshot_id();
}
inline ::google::protobuf::int32 PB_UTATeamMemberData::headshot_id() const {
  // @@protoc_insertion_point(field_get:PB_UTATeamMemberData.headshot_id)
  return headshot_id_;
}
inline void PB_UTATeamMemberData::set_headshot_id(::google::protobuf::int32 value) {
  set_has_headshot_id();
  headshot_id_ = value;
  // @@protoc_insertion_point(field_set:PB_UTATeamMemberData.headshot_id)
}

// optional int32 fly_flag = 8;
inline bool PB_UTATeamMemberData::has_fly_flag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PB_UTATeamMemberData::set_has_fly_flag() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PB_UTATeamMemberData::clear_has_fly_flag() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PB_UTATeamMemberData::clear_fly_flag() {
  fly_flag_ = 0;
  clear_has_fly_flag();
}
inline ::google::protobuf::int32 PB_UTATeamMemberData::fly_flag() const {
  // @@protoc_insertion_point(field_get:PB_UTATeamMemberData.fly_flag)
  return fly_flag_;
}
inline void PB_UTATeamMemberData::set_fly_flag(::google::protobuf::int32 value) {
  set_has_fly_flag();
  fly_flag_ = value;
  // @@protoc_insertion_point(field_set:PB_UTATeamMemberData.fly_flag)
}

// optional int32 capability = 9;
inline bool PB_UTATeamMemberData::has_capability() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PB_UTATeamMemberData::set_has_capability() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PB_UTATeamMemberData::clear_has_capability() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PB_UTATeamMemberData::clear_capability() {
  capability_ = 0;
  clear_has_capability();
}
inline ::google::protobuf::int32 PB_UTATeamMemberData::capability() const {
  // @@protoc_insertion_point(field_get:PB_UTATeamMemberData.capability)
  return capability_;
}
inline void PB_UTATeamMemberData::set_capability(::google::protobuf::int32 value) {
  set_has_capability();
  capability_ = value;
  // @@protoc_insertion_point(field_set:PB_UTATeamMemberData.capability)
}

// optional string role_name = 10;
inline bool PB_UTATeamMemberData::has_role_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PB_UTATeamMemberData::set_has_role_name() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PB_UTATeamMemberData::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PB_UTATeamMemberData::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& PB_UTATeamMemberData::role_name() const {
  // @@protoc_insertion_point(field_get:PB_UTATeamMemberData.role_name)
  return *role_name_;
}
inline void PB_UTATeamMemberData::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
  // @@protoc_insertion_point(field_set:PB_UTATeamMemberData.role_name)
}
inline void PB_UTATeamMemberData::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:PB_UTATeamMemberData.role_name)
}
inline void PB_UTATeamMemberData::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PB_UTATeamMemberData.role_name)
}
inline ::std::string* PB_UTATeamMemberData::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    role_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PB_UTATeamMemberData.role_name)
  return role_name_;
}
inline ::std::string* PB_UTATeamMemberData::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PB_UTATeamMemberData::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PB_UTATeamMemberData.role_name)
}

// optional bytes appearance = 11;
inline bool PB_UTATeamMemberData::has_appearance() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PB_UTATeamMemberData::set_has_appearance() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PB_UTATeamMemberData::clear_has_appearance() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PB_UTATeamMemberData::clear_appearance() {
  if (appearance_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appearance_->clear();
  }
  clear_has_appearance();
}
inline const ::std::string& PB_UTATeamMemberData::appearance() const {
  // @@protoc_insertion_point(field_get:PB_UTATeamMemberData.appearance)
  return *appearance_;
}
inline void PB_UTATeamMemberData::set_appearance(const ::std::string& value) {
  set_has_appearance();
  if (appearance_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appearance_ = new ::std::string;
  }
  appearance_->assign(value);
  // @@protoc_insertion_point(field_set:PB_UTATeamMemberData.appearance)
}
inline void PB_UTATeamMemberData::set_appearance(const char* value) {
  set_has_appearance();
  if (appearance_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appearance_ = new ::std::string;
  }
  appearance_->assign(value);
  // @@protoc_insertion_point(field_set_char:PB_UTATeamMemberData.appearance)
}
inline void PB_UTATeamMemberData::set_appearance(const void* value, size_t size) {
  set_has_appearance();
  if (appearance_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appearance_ = new ::std::string;
  }
  appearance_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PB_UTATeamMemberData.appearance)
}
inline ::std::string* PB_UTATeamMemberData::mutable_appearance() {
  set_has_appearance();
  if (appearance_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appearance_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PB_UTATeamMemberData.appearance)
  return appearance_;
}
inline ::std::string* PB_UTATeamMemberData::release_appearance() {
  clear_has_appearance();
  if (appearance_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = appearance_;
    appearance_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PB_UTATeamMemberData::set_allocated_appearance(::std::string* appearance) {
  if (appearance_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete appearance_;
  }
  if (appearance) {
    set_has_appearance();
    appearance_ = appearance;
  } else {
    clear_has_appearance();
    appearance_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PB_UTATeamMemberData.appearance)
}

// optional int32 today_reward_num = 12;
inline bool PB_UTATeamMemberData::has_today_reward_num() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PB_UTATeamMemberData::set_has_today_reward_num() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PB_UTATeamMemberData::clear_has_today_reward_num() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PB_UTATeamMemberData::clear_today_reward_num() {
  today_reward_num_ = 0;
  clear_has_today_reward_num();
}
inline ::google::protobuf::int32 PB_UTATeamMemberData::today_reward_num() const {
  // @@protoc_insertion_point(field_get:PB_UTATeamMemberData.today_reward_num)
  return today_reward_num_;
}
inline void PB_UTATeamMemberData::set_today_reward_num(::google::protobuf::int32 value) {
  set_has_today_reward_num();
  today_reward_num_ = value;
  // @@protoc_insertion_point(field_set:PB_UTATeamMemberData.today_reward_num)
}

// optional int32 win_box_fetch_flag = 13;
inline bool PB_UTATeamMemberData::has_win_box_fetch_flag() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PB_UTATeamMemberData::set_has_win_box_fetch_flag() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PB_UTATeamMemberData::clear_has_win_box_fetch_flag() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PB_UTATeamMemberData::clear_win_box_fetch_flag() {
  win_box_fetch_flag_ = 0;
  clear_has_win_box_fetch_flag();
}
inline ::google::protobuf::int32 PB_UTATeamMemberData::win_box_fetch_flag() const {
  // @@protoc_insertion_point(field_get:PB_UTATeamMemberData.win_box_fetch_flag)
  return win_box_fetch_flag_;
}
inline void PB_UTATeamMemberData::set_win_box_fetch_flag(::google::protobuf::int32 value) {
  set_has_win_box_fetch_flag();
  win_box_fetch_flag_ = value;
  // @@protoc_insertion_point(field_set:PB_UTATeamMemberData.win_box_fetch_flag)
}

// -------------------------------------------------------------------

// PB_UTATeamData

// optional int32 plat_type = 1;
inline bool PB_UTATeamData::has_plat_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_UTATeamData::set_has_plat_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB_UTATeamData::clear_has_plat_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB_UTATeamData::clear_plat_type() {
  plat_type_ = 0;
  clear_has_plat_type();
}
inline ::google::protobuf::int32 PB_UTATeamData::plat_type() const {
  // @@protoc_insertion_point(field_get:PB_UTATeamData.plat_type)
  return plat_type_;
}
inline void PB_UTATeamData::set_plat_type(::google::protobuf::int32 value) {
  set_has_plat_type();
  plat_type_ = value;
  // @@protoc_insertion_point(field_set:PB_UTATeamData.plat_type)
}

// optional int64 team_unique_id = 2;
inline bool PB_UTATeamData::has_team_unique_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_UTATeamData::set_has_team_unique_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PB_UTATeamData::clear_has_team_unique_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PB_UTATeamData::clear_team_unique_id() {
  team_unique_id_ = GOOGLE_LONGLONG(0);
  clear_has_team_unique_id();
}
inline ::google::protobuf::int64 PB_UTATeamData::team_unique_id() const {
  // @@protoc_insertion_point(field_get:PB_UTATeamData.team_unique_id)
  return team_unique_id_;
}
inline void PB_UTATeamData::set_team_unique_id(::google::protobuf::int64 value) {
  set_has_team_unique_id();
  team_unique_id_ = value;
  // @@protoc_insertion_point(field_set:PB_UTATeamData.team_unique_id)
}

// optional string team_name = 3;
inline bool PB_UTATeamData::has_team_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PB_UTATeamData::set_has_team_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PB_UTATeamData::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PB_UTATeamData::clear_team_name() {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_->clear();
  }
  clear_has_team_name();
}
inline const ::std::string& PB_UTATeamData::team_name() const {
  // @@protoc_insertion_point(field_get:PB_UTATeamData.team_name)
  return *team_name_;
}
inline void PB_UTATeamData::set_team_name(const ::std::string& value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
  // @@protoc_insertion_point(field_set:PB_UTATeamData.team_name)
}
inline void PB_UTATeamData::set_team_name(const char* value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:PB_UTATeamData.team_name)
}
inline void PB_UTATeamData::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PB_UTATeamData.team_name)
}
inline ::std::string* PB_UTATeamData::mutable_team_name() {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PB_UTATeamData.team_name)
  return team_name_;
}
inline ::std::string* PB_UTATeamData::release_team_name() {
  clear_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = team_name_;
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PB_UTATeamData::set_allocated_team_name(::std::string* team_name) {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_name_;
  }
  if (team_name) {
    set_has_team_name();
    team_name_ = team_name;
  } else {
    clear_has_team_name();
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PB_UTATeamData.team_name)
}

// repeated .PB_UTATeamMemberData member_list = 4;
inline int PB_UTATeamData::member_list_size() const {
  return member_list_.size();
}
inline void PB_UTATeamData::clear_member_list() {
  member_list_.Clear();
}
inline const ::PB_UTATeamMemberData& PB_UTATeamData::member_list(int index) const {
  // @@protoc_insertion_point(field_get:PB_UTATeamData.member_list)
  return member_list_.Get(index);
}
inline ::PB_UTATeamMemberData* PB_UTATeamData::mutable_member_list(int index) {
  // @@protoc_insertion_point(field_mutable:PB_UTATeamData.member_list)
  return member_list_.Mutable(index);
}
inline ::PB_UTATeamMemberData* PB_UTATeamData::add_member_list() {
  // @@protoc_insertion_point(field_add:PB_UTATeamData.member_list)
  return member_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB_UTATeamMemberData >&
PB_UTATeamData::member_list() const {
  // @@protoc_insertion_point(field_list:PB_UTATeamData.member_list)
  return member_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB_UTATeamMemberData >*
PB_UTATeamData::mutable_member_list() {
  // @@protoc_insertion_point(field_mutable_list:PB_UTATeamData.member_list)
  return &member_list_;
}

// optional int32 hidden_idx = 5;
inline bool PB_UTATeamData::has_hidden_idx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PB_UTATeamData::set_has_hidden_idx() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PB_UTATeamData::clear_has_hidden_idx() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PB_UTATeamData::clear_hidden_idx() {
  hidden_idx_ = 0;
  clear_has_hidden_idx();
}
inline ::google::protobuf::int32 PB_UTATeamData::hidden_idx() const {
  // @@protoc_insertion_point(field_get:PB_UTATeamData.hidden_idx)
  return hidden_idx_;
}
inline void PB_UTATeamData::set_hidden_idx(::google::protobuf::int32 value) {
  set_has_hidden_idx();
  hidden_idx_ = value;
  // @@protoc_insertion_point(field_set:PB_UTATeamData.hidden_idx)
}

// optional int64 team_id_in_hidden = 6;
inline bool PB_UTATeamData::has_team_id_in_hidden() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PB_UTATeamData::set_has_team_id_in_hidden() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PB_UTATeamData::clear_has_team_id_in_hidden() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PB_UTATeamData::clear_team_id_in_hidden() {
  team_id_in_hidden_ = GOOGLE_LONGLONG(0);
  clear_has_team_id_in_hidden();
}
inline ::google::protobuf::int64 PB_UTATeamData::team_id_in_hidden() const {
  // @@protoc_insertion_point(field_get:PB_UTATeamData.team_id_in_hidden)
  return team_id_in_hidden_;
}
inline void PB_UTATeamData::set_team_id_in_hidden(::google::protobuf::int64 value) {
  set_has_team_id_in_hidden();
  team_id_in_hidden_ = value;
  // @@protoc_insertion_point(field_set:PB_UTATeamData.team_id_in_hidden)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_universe_5fteam_5farena_5fteam_5fdata_2eproto__INCLUDED
