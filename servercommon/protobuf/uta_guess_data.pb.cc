// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uta_guess_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "uta_guess_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PB_UTAGuessUserInfoData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_UTAGuessUserInfoData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_UTAGuessTeamInfoData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_UTAGuessTeamInfoData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_UTAGuessMatchInfoData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_UTAGuessMatchInfoData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_uta_5fguess_5fdata_2eproto() {
  protobuf_AddDesc_uta_5fguess_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "uta_guess_data.proto");
  GOOGLE_CHECK(file != NULL);
  PB_UTAGuessUserInfoData_descriptor_ = file->message_type(0);
  static const int PB_UTAGuessUserInfoData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAGuessUserInfoData, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAGuessUserInfoData, plat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAGuessUserInfoData, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAGuessUserInfoData, team_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAGuessUserInfoData, match_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAGuessUserInfoData, bet_coin_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAGuessUserInfoData, is_get_),
  };
  PB_UTAGuessUserInfoData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_UTAGuessUserInfoData_descriptor_,
      PB_UTAGuessUserInfoData::default_instance_,
      PB_UTAGuessUserInfoData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAGuessUserInfoData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAGuessUserInfoData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_UTAGuessUserInfoData));
  PB_UTAGuessTeamInfoData_descriptor_ = file->message_type(1);
  static const int PB_UTAGuessTeamInfoData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAGuessTeamInfoData, team_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAGuessTeamInfoData, match_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAGuessTeamInfoData, plat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAGuessTeamInfoData, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAGuessTeamInfoData, total_bet_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAGuessTeamInfoData, guess_status_),
  };
  PB_UTAGuessTeamInfoData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_UTAGuessTeamInfoData_descriptor_,
      PB_UTAGuessTeamInfoData::default_instance_,
      PB_UTAGuessTeamInfoData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAGuessTeamInfoData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAGuessTeamInfoData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_UTAGuessTeamInfoData));
  PB_UTAGuessMatchInfoData_descriptor_ = file->message_type(2);
  static const int PB_UTAGuessMatchInfoData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAGuessMatchInfoData, match_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAGuessMatchInfoData, team_info_),
  };
  PB_UTAGuessMatchInfoData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_UTAGuessMatchInfoData_descriptor_,
      PB_UTAGuessMatchInfoData::default_instance_,
      PB_UTAGuessMatchInfoData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAGuessMatchInfoData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAGuessMatchInfoData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_UTAGuessMatchInfoData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_uta_5fguess_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_UTAGuessUserInfoData_descriptor_, &PB_UTAGuessUserInfoData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_UTAGuessTeamInfoData_descriptor_, &PB_UTAGuessTeamInfoData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_UTAGuessMatchInfoData_descriptor_, &PB_UTAGuessMatchInfoData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_uta_5fguess_5fdata_2eproto() {
  delete PB_UTAGuessUserInfoData::default_instance_;
  delete PB_UTAGuessUserInfoData_reflection_;
  delete PB_UTAGuessTeamInfoData::default_instance_;
  delete PB_UTAGuessTeamInfoData_reflection_;
  delete PB_UTAGuessMatchInfoData::default_instance_;
  delete PB_UTAGuessMatchInfoData_reflection_;
}

void protobuf_AddDesc_uta_5fguess_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024uta_guess_data.proto\"\225\001\n\027PB_UTAGuessUs"
    "erInfoData\022\013\n\003uid\030\001 \001(\005\022\017\n\007plat_id\030\002 \001(\005"
    "\022\021\n\tserver_id\030\003 \001(\005\022\020\n\010team_seq\030\004 \001(\003\022\021\n"
    "\tmatch_seq\030\005 \001(\003\022\024\n\014bet_coin_num\030\006 \001(\005\022\016"
    "\n\006is_get\030\007 \001(\005\"\217\001\n\027PB_UTAGuessTeamInfoDa"
    "ta\022\020\n\010team_seq\030\001 \001(\003\022\021\n\tmatch_seq\030\002 \001(\003\022"
    "\017\n\007plat_id\030\003 \001(\005\022\021\n\tserver_id\030\004 \001(\005\022\025\n\rt"
    "otal_bet_num\030\005 \001(\005\022\024\n\014guess_status\030\006 \001(\005"
    "\"Z\n\030PB_UTAGuessMatchInfoData\022\021\n\tmatch_se"
    "q\030\001 \001(\003\022+\n\tteam_info\030\002 \003(\0132\030.PB_UTAGuess"
    "TeamInfoData", 412);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "uta_guess_data.proto", &protobuf_RegisterTypes);
  PB_UTAGuessUserInfoData::default_instance_ = new PB_UTAGuessUserInfoData();
  PB_UTAGuessTeamInfoData::default_instance_ = new PB_UTAGuessTeamInfoData();
  PB_UTAGuessMatchInfoData::default_instance_ = new PB_UTAGuessMatchInfoData();
  PB_UTAGuessUserInfoData::default_instance_->InitAsDefaultInstance();
  PB_UTAGuessTeamInfoData::default_instance_->InitAsDefaultInstance();
  PB_UTAGuessMatchInfoData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_uta_5fguess_5fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_uta_5fguess_5fdata_2eproto {
  StaticDescriptorInitializer_uta_5fguess_5fdata_2eproto() {
    protobuf_AddDesc_uta_5fguess_5fdata_2eproto();
  }
} static_descriptor_initializer_uta_5fguess_5fdata_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PB_UTAGuessUserInfoData::kUidFieldNumber;
const int PB_UTAGuessUserInfoData::kPlatIdFieldNumber;
const int PB_UTAGuessUserInfoData::kServerIdFieldNumber;
const int PB_UTAGuessUserInfoData::kTeamSeqFieldNumber;
const int PB_UTAGuessUserInfoData::kMatchSeqFieldNumber;
const int PB_UTAGuessUserInfoData::kBetCoinNumFieldNumber;
const int PB_UTAGuessUserInfoData::kIsGetFieldNumber;
#endif  // !_MSC_VER

PB_UTAGuessUserInfoData::PB_UTAGuessUserInfoData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PB_UTAGuessUserInfoData)
}

void PB_UTAGuessUserInfoData::InitAsDefaultInstance() {
}

PB_UTAGuessUserInfoData::PB_UTAGuessUserInfoData(const PB_UTAGuessUserInfoData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PB_UTAGuessUserInfoData)
}

void PB_UTAGuessUserInfoData::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  plat_id_ = 0;
  server_id_ = 0;
  team_seq_ = GOOGLE_LONGLONG(0);
  match_seq_ = GOOGLE_LONGLONG(0);
  bet_coin_num_ = 0;
  is_get_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_UTAGuessUserInfoData::~PB_UTAGuessUserInfoData() {
  // @@protoc_insertion_point(destructor:PB_UTAGuessUserInfoData)
  SharedDtor();
}

void PB_UTAGuessUserInfoData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_UTAGuessUserInfoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_UTAGuessUserInfoData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_UTAGuessUserInfoData_descriptor_;
}

const PB_UTAGuessUserInfoData& PB_UTAGuessUserInfoData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uta_5fguess_5fdata_2eproto();
  return *default_instance_;
}

PB_UTAGuessUserInfoData* PB_UTAGuessUserInfoData::default_instance_ = NULL;

PB_UTAGuessUserInfoData* PB_UTAGuessUserInfoData::New() const {
  return new PB_UTAGuessUserInfoData;
}

void PB_UTAGuessUserInfoData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PB_UTAGuessUserInfoData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(uid_, is_get_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_UTAGuessUserInfoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PB_UTAGuessUserInfoData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_plat_id;
        break;
      }

      // optional int32 plat_id = 2;
      case 2: {
        if (tag == 16) {
         parse_plat_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plat_id_)));
          set_has_plat_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_server_id;
        break;
      }

      // optional int32 server_id = 3;
      case 3: {
        if (tag == 24) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_team_seq;
        break;
      }

      // optional int64 team_seq = 4;
      case 4: {
        if (tag == 32) {
         parse_team_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &team_seq_)));
          set_has_team_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_match_seq;
        break;
      }

      // optional int64 match_seq = 5;
      case 5: {
        if (tag == 40) {
         parse_match_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &match_seq_)));
          set_has_match_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_bet_coin_num;
        break;
      }

      // optional int32 bet_coin_num = 6;
      case 6: {
        if (tag == 48) {
         parse_bet_coin_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bet_coin_num_)));
          set_has_bet_coin_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_get;
        break;
      }

      // optional int32 is_get = 7;
      case 7: {
        if (tag == 56) {
         parse_is_get:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_get_)));
          set_has_is_get();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PB_UTAGuessUserInfoData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PB_UTAGuessUserInfoData)
  return false;
#undef DO_
}

void PB_UTAGuessUserInfoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PB_UTAGuessUserInfoData)
  // optional int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int32 plat_id = 2;
  if (has_plat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->plat_id(), output);
  }

  // optional int32 server_id = 3;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->server_id(), output);
  }

  // optional int64 team_seq = 4;
  if (has_team_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->team_seq(), output);
  }

  // optional int64 match_seq = 5;
  if (has_match_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->match_seq(), output);
  }

  // optional int32 bet_coin_num = 6;
  if (has_bet_coin_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bet_coin_num(), output);
  }

  // optional int32 is_get = 7;
  if (has_is_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->is_get(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PB_UTAGuessUserInfoData)
}

::google::protobuf::uint8* PB_UTAGuessUserInfoData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_UTAGuessUserInfoData)
  // optional int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int32 plat_id = 2;
  if (has_plat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->plat_id(), target);
  }

  // optional int32 server_id = 3;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->server_id(), target);
  }

  // optional int64 team_seq = 4;
  if (has_team_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->team_seq(), target);
  }

  // optional int64 match_seq = 5;
  if (has_match_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->match_seq(), target);
  }

  // optional int32 bet_coin_num = 6;
  if (has_bet_coin_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bet_coin_num(), target);
  }

  // optional int32 is_get = 7;
  if (has_is_get()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->is_get(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_UTAGuessUserInfoData)
  return target;
}

int PB_UTAGuessUserInfoData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 plat_id = 2;
    if (has_plat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plat_id());
    }

    // optional int32 server_id = 3;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }

    // optional int64 team_seq = 4;
    if (has_team_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->team_seq());
    }

    // optional int64 match_seq = 5;
    if (has_match_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->match_seq());
    }

    // optional int32 bet_coin_num = 6;
    if (has_bet_coin_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bet_coin_num());
    }

    // optional int32 is_get = 7;
    if (has_is_get()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_get());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_UTAGuessUserInfoData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_UTAGuessUserInfoData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_UTAGuessUserInfoData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_UTAGuessUserInfoData::MergeFrom(const PB_UTAGuessUserInfoData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_plat_id()) {
      set_plat_id(from.plat_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_team_seq()) {
      set_team_seq(from.team_seq());
    }
    if (from.has_match_seq()) {
      set_match_seq(from.match_seq());
    }
    if (from.has_bet_coin_num()) {
      set_bet_coin_num(from.bet_coin_num());
    }
    if (from.has_is_get()) {
      set_is_get(from.is_get());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_UTAGuessUserInfoData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_UTAGuessUserInfoData::CopyFrom(const PB_UTAGuessUserInfoData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_UTAGuessUserInfoData::IsInitialized() const {

  return true;
}

void PB_UTAGuessUserInfoData::Swap(PB_UTAGuessUserInfoData* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(plat_id_, other->plat_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(team_seq_, other->team_seq_);
    std::swap(match_seq_, other->match_seq_);
    std::swap(bet_coin_num_, other->bet_coin_num_);
    std::swap(is_get_, other->is_get_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_UTAGuessUserInfoData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_UTAGuessUserInfoData_descriptor_;
  metadata.reflection = PB_UTAGuessUserInfoData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_UTAGuessTeamInfoData::kTeamSeqFieldNumber;
const int PB_UTAGuessTeamInfoData::kMatchSeqFieldNumber;
const int PB_UTAGuessTeamInfoData::kPlatIdFieldNumber;
const int PB_UTAGuessTeamInfoData::kServerIdFieldNumber;
const int PB_UTAGuessTeamInfoData::kTotalBetNumFieldNumber;
const int PB_UTAGuessTeamInfoData::kGuessStatusFieldNumber;
#endif  // !_MSC_VER

PB_UTAGuessTeamInfoData::PB_UTAGuessTeamInfoData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PB_UTAGuessTeamInfoData)
}

void PB_UTAGuessTeamInfoData::InitAsDefaultInstance() {
}

PB_UTAGuessTeamInfoData::PB_UTAGuessTeamInfoData(const PB_UTAGuessTeamInfoData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PB_UTAGuessTeamInfoData)
}

void PB_UTAGuessTeamInfoData::SharedCtor() {
  _cached_size_ = 0;
  team_seq_ = GOOGLE_LONGLONG(0);
  match_seq_ = GOOGLE_LONGLONG(0);
  plat_id_ = 0;
  server_id_ = 0;
  total_bet_num_ = 0;
  guess_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_UTAGuessTeamInfoData::~PB_UTAGuessTeamInfoData() {
  // @@protoc_insertion_point(destructor:PB_UTAGuessTeamInfoData)
  SharedDtor();
}

void PB_UTAGuessTeamInfoData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_UTAGuessTeamInfoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_UTAGuessTeamInfoData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_UTAGuessTeamInfoData_descriptor_;
}

const PB_UTAGuessTeamInfoData& PB_UTAGuessTeamInfoData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uta_5fguess_5fdata_2eproto();
  return *default_instance_;
}

PB_UTAGuessTeamInfoData* PB_UTAGuessTeamInfoData::default_instance_ = NULL;

PB_UTAGuessTeamInfoData* PB_UTAGuessTeamInfoData::New() const {
  return new PB_UTAGuessTeamInfoData;
}

void PB_UTAGuessTeamInfoData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PB_UTAGuessTeamInfoData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(team_seq_, guess_status_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_UTAGuessTeamInfoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PB_UTAGuessTeamInfoData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 team_seq = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &team_seq_)));
          set_has_team_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_match_seq;
        break;
      }

      // optional int64 match_seq = 2;
      case 2: {
        if (tag == 16) {
         parse_match_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &match_seq_)));
          set_has_match_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_plat_id;
        break;
      }

      // optional int32 plat_id = 3;
      case 3: {
        if (tag == 24) {
         parse_plat_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plat_id_)));
          set_has_plat_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_server_id;
        break;
      }

      // optional int32 server_id = 4;
      case 4: {
        if (tag == 32) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_total_bet_num;
        break;
      }

      // optional int32 total_bet_num = 5;
      case 5: {
        if (tag == 40) {
         parse_total_bet_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_bet_num_)));
          set_has_total_bet_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_guess_status;
        break;
      }

      // optional int32 guess_status = 6;
      case 6: {
        if (tag == 48) {
         parse_guess_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guess_status_)));
          set_has_guess_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PB_UTAGuessTeamInfoData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PB_UTAGuessTeamInfoData)
  return false;
#undef DO_
}

void PB_UTAGuessTeamInfoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PB_UTAGuessTeamInfoData)
  // optional int64 team_seq = 1;
  if (has_team_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->team_seq(), output);
  }

  // optional int64 match_seq = 2;
  if (has_match_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->match_seq(), output);
  }

  // optional int32 plat_id = 3;
  if (has_plat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->plat_id(), output);
  }

  // optional int32 server_id = 4;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->server_id(), output);
  }

  // optional int32 total_bet_num = 5;
  if (has_total_bet_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->total_bet_num(), output);
  }

  // optional int32 guess_status = 6;
  if (has_guess_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->guess_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PB_UTAGuessTeamInfoData)
}

::google::protobuf::uint8* PB_UTAGuessTeamInfoData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_UTAGuessTeamInfoData)
  // optional int64 team_seq = 1;
  if (has_team_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->team_seq(), target);
  }

  // optional int64 match_seq = 2;
  if (has_match_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->match_seq(), target);
  }

  // optional int32 plat_id = 3;
  if (has_plat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->plat_id(), target);
  }

  // optional int32 server_id = 4;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->server_id(), target);
  }

  // optional int32 total_bet_num = 5;
  if (has_total_bet_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->total_bet_num(), target);
  }

  // optional int32 guess_status = 6;
  if (has_guess_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->guess_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_UTAGuessTeamInfoData)
  return target;
}

int PB_UTAGuessTeamInfoData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 team_seq = 1;
    if (has_team_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->team_seq());
    }

    // optional int64 match_seq = 2;
    if (has_match_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->match_seq());
    }

    // optional int32 plat_id = 3;
    if (has_plat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plat_id());
    }

    // optional int32 server_id = 4;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }

    // optional int32 total_bet_num = 5;
    if (has_total_bet_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_bet_num());
    }

    // optional int32 guess_status = 6;
    if (has_guess_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guess_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_UTAGuessTeamInfoData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_UTAGuessTeamInfoData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_UTAGuessTeamInfoData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_UTAGuessTeamInfoData::MergeFrom(const PB_UTAGuessTeamInfoData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_seq()) {
      set_team_seq(from.team_seq());
    }
    if (from.has_match_seq()) {
      set_match_seq(from.match_seq());
    }
    if (from.has_plat_id()) {
      set_plat_id(from.plat_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_total_bet_num()) {
      set_total_bet_num(from.total_bet_num());
    }
    if (from.has_guess_status()) {
      set_guess_status(from.guess_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_UTAGuessTeamInfoData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_UTAGuessTeamInfoData::CopyFrom(const PB_UTAGuessTeamInfoData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_UTAGuessTeamInfoData::IsInitialized() const {

  return true;
}

void PB_UTAGuessTeamInfoData::Swap(PB_UTAGuessTeamInfoData* other) {
  if (other != this) {
    std::swap(team_seq_, other->team_seq_);
    std::swap(match_seq_, other->match_seq_);
    std::swap(plat_id_, other->plat_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(total_bet_num_, other->total_bet_num_);
    std::swap(guess_status_, other->guess_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_UTAGuessTeamInfoData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_UTAGuessTeamInfoData_descriptor_;
  metadata.reflection = PB_UTAGuessTeamInfoData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_UTAGuessMatchInfoData::kMatchSeqFieldNumber;
const int PB_UTAGuessMatchInfoData::kTeamInfoFieldNumber;
#endif  // !_MSC_VER

PB_UTAGuessMatchInfoData::PB_UTAGuessMatchInfoData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PB_UTAGuessMatchInfoData)
}

void PB_UTAGuessMatchInfoData::InitAsDefaultInstance() {
}

PB_UTAGuessMatchInfoData::PB_UTAGuessMatchInfoData(const PB_UTAGuessMatchInfoData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PB_UTAGuessMatchInfoData)
}

void PB_UTAGuessMatchInfoData::SharedCtor() {
  _cached_size_ = 0;
  match_seq_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_UTAGuessMatchInfoData::~PB_UTAGuessMatchInfoData() {
  // @@protoc_insertion_point(destructor:PB_UTAGuessMatchInfoData)
  SharedDtor();
}

void PB_UTAGuessMatchInfoData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_UTAGuessMatchInfoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_UTAGuessMatchInfoData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_UTAGuessMatchInfoData_descriptor_;
}

const PB_UTAGuessMatchInfoData& PB_UTAGuessMatchInfoData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uta_5fguess_5fdata_2eproto();
  return *default_instance_;
}

PB_UTAGuessMatchInfoData* PB_UTAGuessMatchInfoData::default_instance_ = NULL;

PB_UTAGuessMatchInfoData* PB_UTAGuessMatchInfoData::New() const {
  return new PB_UTAGuessMatchInfoData;
}

void PB_UTAGuessMatchInfoData::Clear() {
  match_seq_ = GOOGLE_LONGLONG(0);
  team_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_UTAGuessMatchInfoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PB_UTAGuessMatchInfoData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 match_seq = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &match_seq_)));
          set_has_match_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_team_info;
        break;
      }

      // repeated .PB_UTAGuessTeamInfoData team_info = 2;
      case 2: {
        if (tag == 18) {
         parse_team_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_team_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_team_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PB_UTAGuessMatchInfoData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PB_UTAGuessMatchInfoData)
  return false;
#undef DO_
}

void PB_UTAGuessMatchInfoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PB_UTAGuessMatchInfoData)
  // optional int64 match_seq = 1;
  if (has_match_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->match_seq(), output);
  }

  // repeated .PB_UTAGuessTeamInfoData team_info = 2;
  for (int i = 0; i < this->team_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->team_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PB_UTAGuessMatchInfoData)
}

::google::protobuf::uint8* PB_UTAGuessMatchInfoData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_UTAGuessMatchInfoData)
  // optional int64 match_seq = 1;
  if (has_match_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->match_seq(), target);
  }

  // repeated .PB_UTAGuessTeamInfoData team_info = 2;
  for (int i = 0; i < this->team_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->team_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_UTAGuessMatchInfoData)
  return target;
}

int PB_UTAGuessMatchInfoData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 match_seq = 1;
    if (has_match_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->match_seq());
    }

  }
  // repeated .PB_UTAGuessTeamInfoData team_info = 2;
  total_size += 1 * this->team_info_size();
  for (int i = 0; i < this->team_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->team_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_UTAGuessMatchInfoData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_UTAGuessMatchInfoData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_UTAGuessMatchInfoData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_UTAGuessMatchInfoData::MergeFrom(const PB_UTAGuessMatchInfoData& from) {
  GOOGLE_CHECK_NE(&from, this);
  team_info_.MergeFrom(from.team_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_seq()) {
      set_match_seq(from.match_seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_UTAGuessMatchInfoData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_UTAGuessMatchInfoData::CopyFrom(const PB_UTAGuessMatchInfoData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_UTAGuessMatchInfoData::IsInitialized() const {

  return true;
}

void PB_UTAGuessMatchInfoData::Swap(PB_UTAGuessMatchInfoData* other) {
  if (other != this) {
    std::swap(match_seq_, other->match_seq_);
    team_info_.Swap(&other->team_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_UTAGuessMatchInfoData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_UTAGuessMatchInfoData_descriptor_;
  metadata.reflection = PB_UTAGuessMatchInfoData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
