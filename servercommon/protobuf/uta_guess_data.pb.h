// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uta_guess_data.proto

#ifndef PROTOBUF_uta_5fguess_5fdata_2eproto__INCLUDED
#define PROTOBUF_uta_5fguess_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_uta_5fguess_5fdata_2eproto();
void protobuf_AssignDesc_uta_5fguess_5fdata_2eproto();
void protobuf_ShutdownFile_uta_5fguess_5fdata_2eproto();

class PB_UTAGuessUserInfoData;
class PB_UTAGuessTeamInfoData;
class PB_UTAGuessMatchInfoData;

// ===================================================================

class PB_UTAGuessUserInfoData : public ::google::protobuf::Message {
 public:
  PB_UTAGuessUserInfoData();
  virtual ~PB_UTAGuessUserInfoData();

  PB_UTAGuessUserInfoData(const PB_UTAGuessUserInfoData& from);

  inline PB_UTAGuessUserInfoData& operator=(const PB_UTAGuessUserInfoData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PB_UTAGuessUserInfoData& default_instance();

  void Swap(PB_UTAGuessUserInfoData* other);

  // implements Message ----------------------------------------------

  PB_UTAGuessUserInfoData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB_UTAGuessUserInfoData& from);
  void MergeFrom(const PB_UTAGuessUserInfoData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional int32 plat_id = 2;
  inline bool has_plat_id() const;
  inline void clear_plat_id();
  static const int kPlatIdFieldNumber = 2;
  inline ::google::protobuf::int32 plat_id() const;
  inline void set_plat_id(::google::protobuf::int32 value);

  // optional int32 server_id = 3;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 3;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);

  // optional int64 team_seq = 4;
  inline bool has_team_seq() const;
  inline void clear_team_seq();
  static const int kTeamSeqFieldNumber = 4;
  inline ::google::protobuf::int64 team_seq() const;
  inline void set_team_seq(::google::protobuf::int64 value);

  // optional int64 match_seq = 5;
  inline bool has_match_seq() const;
  inline void clear_match_seq();
  static const int kMatchSeqFieldNumber = 5;
  inline ::google::protobuf::int64 match_seq() const;
  inline void set_match_seq(::google::protobuf::int64 value);

  // optional int32 bet_coin_num = 6;
  inline bool has_bet_coin_num() const;
  inline void clear_bet_coin_num();
  static const int kBetCoinNumFieldNumber = 6;
  inline ::google::protobuf::int32 bet_coin_num() const;
  inline void set_bet_coin_num(::google::protobuf::int32 value);

  // optional int32 is_get = 7;
  inline bool has_is_get() const;
  inline void clear_is_get();
  static const int kIsGetFieldNumber = 7;
  inline ::google::protobuf::int32 is_get() const;
  inline void set_is_get(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB_UTAGuessUserInfoData)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_plat_id();
  inline void clear_has_plat_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_team_seq();
  inline void clear_has_team_seq();
  inline void set_has_match_seq();
  inline void clear_has_match_seq();
  inline void set_has_bet_coin_num();
  inline void clear_has_bet_coin_num();
  inline void set_has_is_get();
  inline void clear_has_is_get();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 plat_id_;
  ::google::protobuf::int64 team_seq_;
  ::google::protobuf::int32 server_id_;
  ::google::protobuf::int32 bet_coin_num_;
  ::google::protobuf::int64 match_seq_;
  ::google::protobuf::int32 is_get_;
  friend void  protobuf_AddDesc_uta_5fguess_5fdata_2eproto();
  friend void protobuf_AssignDesc_uta_5fguess_5fdata_2eproto();
  friend void protobuf_ShutdownFile_uta_5fguess_5fdata_2eproto();

  void InitAsDefaultInstance();
  static PB_UTAGuessUserInfoData* default_instance_;
};
// -------------------------------------------------------------------

class PB_UTAGuessTeamInfoData : public ::google::protobuf::Message {
 public:
  PB_UTAGuessTeamInfoData();
  virtual ~PB_UTAGuessTeamInfoData();

  PB_UTAGuessTeamInfoData(const PB_UTAGuessTeamInfoData& from);

  inline PB_UTAGuessTeamInfoData& operator=(const PB_UTAGuessTeamInfoData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PB_UTAGuessTeamInfoData& default_instance();

  void Swap(PB_UTAGuessTeamInfoData* other);

  // implements Message ----------------------------------------------

  PB_UTAGuessTeamInfoData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB_UTAGuessTeamInfoData& from);
  void MergeFrom(const PB_UTAGuessTeamInfoData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 team_seq = 1;
  inline bool has_team_seq() const;
  inline void clear_team_seq();
  static const int kTeamSeqFieldNumber = 1;
  inline ::google::protobuf::int64 team_seq() const;
  inline void set_team_seq(::google::protobuf::int64 value);

  // optional int64 match_seq = 2;
  inline bool has_match_seq() const;
  inline void clear_match_seq();
  static const int kMatchSeqFieldNumber = 2;
  inline ::google::protobuf::int64 match_seq() const;
  inline void set_match_seq(::google::protobuf::int64 value);

  // optional int32 plat_id = 3;
  inline bool has_plat_id() const;
  inline void clear_plat_id();
  static const int kPlatIdFieldNumber = 3;
  inline ::google::protobuf::int32 plat_id() const;
  inline void set_plat_id(::google::protobuf::int32 value);

  // optional int32 server_id = 4;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 4;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);

  // optional int32 total_bet_num = 5;
  inline bool has_total_bet_num() const;
  inline void clear_total_bet_num();
  static const int kTotalBetNumFieldNumber = 5;
  inline ::google::protobuf::int32 total_bet_num() const;
  inline void set_total_bet_num(::google::protobuf::int32 value);

  // optional int32 guess_status = 6;
  inline bool has_guess_status() const;
  inline void clear_guess_status();
  static const int kGuessStatusFieldNumber = 6;
  inline ::google::protobuf::int32 guess_status() const;
  inline void set_guess_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB_UTAGuessTeamInfoData)
 private:
  inline void set_has_team_seq();
  inline void clear_has_team_seq();
  inline void set_has_match_seq();
  inline void clear_has_match_seq();
  inline void set_has_plat_id();
  inline void clear_has_plat_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_total_bet_num();
  inline void clear_has_total_bet_num();
  inline void set_has_guess_status();
  inline void clear_has_guess_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 team_seq_;
  ::google::protobuf::int64 match_seq_;
  ::google::protobuf::int32 plat_id_;
  ::google::protobuf::int32 server_id_;
  ::google::protobuf::int32 total_bet_num_;
  ::google::protobuf::int32 guess_status_;
  friend void  protobuf_AddDesc_uta_5fguess_5fdata_2eproto();
  friend void protobuf_AssignDesc_uta_5fguess_5fdata_2eproto();
  friend void protobuf_ShutdownFile_uta_5fguess_5fdata_2eproto();

  void InitAsDefaultInstance();
  static PB_UTAGuessTeamInfoData* default_instance_;
};
// -------------------------------------------------------------------

class PB_UTAGuessMatchInfoData : public ::google::protobuf::Message {
 public:
  PB_UTAGuessMatchInfoData();
  virtual ~PB_UTAGuessMatchInfoData();

  PB_UTAGuessMatchInfoData(const PB_UTAGuessMatchInfoData& from);

  inline PB_UTAGuessMatchInfoData& operator=(const PB_UTAGuessMatchInfoData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PB_UTAGuessMatchInfoData& default_instance();

  void Swap(PB_UTAGuessMatchInfoData* other);

  // implements Message ----------------------------------------------

  PB_UTAGuessMatchInfoData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB_UTAGuessMatchInfoData& from);
  void MergeFrom(const PB_UTAGuessMatchInfoData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 match_seq = 1;
  inline bool has_match_seq() const;
  inline void clear_match_seq();
  static const int kMatchSeqFieldNumber = 1;
  inline ::google::protobuf::int64 match_seq() const;
  inline void set_match_seq(::google::protobuf::int64 value);

  // repeated .PB_UTAGuessTeamInfoData team_info = 2;
  inline int team_info_size() const;
  inline void clear_team_info();
  static const int kTeamInfoFieldNumber = 2;
  inline const ::PB_UTAGuessTeamInfoData& team_info(int index) const;
  inline ::PB_UTAGuessTeamInfoData* mutable_team_info(int index);
  inline ::PB_UTAGuessTeamInfoData* add_team_info();
  inline const ::google::protobuf::RepeatedPtrField< ::PB_UTAGuessTeamInfoData >&
      team_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB_UTAGuessTeamInfoData >*
      mutable_team_info();

  // @@protoc_insertion_point(class_scope:PB_UTAGuessMatchInfoData)
 private:
  inline void set_has_match_seq();
  inline void clear_has_match_seq();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 match_seq_;
  ::google::protobuf::RepeatedPtrField< ::PB_UTAGuessTeamInfoData > team_info_;
  friend void  protobuf_AddDesc_uta_5fguess_5fdata_2eproto();
  friend void protobuf_AssignDesc_uta_5fguess_5fdata_2eproto();
  friend void protobuf_ShutdownFile_uta_5fguess_5fdata_2eproto();

  void InitAsDefaultInstance();
  static PB_UTAGuessMatchInfoData* default_instance_;
};
// ===================================================================


// ===================================================================

// PB_UTAGuessUserInfoData

// optional int32 uid = 1;
inline bool PB_UTAGuessUserInfoData::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_UTAGuessUserInfoData::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB_UTAGuessUserInfoData::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB_UTAGuessUserInfoData::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 PB_UTAGuessUserInfoData::uid() const {
  // @@protoc_insertion_point(field_get:PB_UTAGuessUserInfoData.uid)
  return uid_;
}
inline void PB_UTAGuessUserInfoData::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAGuessUserInfoData.uid)
}

// optional int32 plat_id = 2;
inline bool PB_UTAGuessUserInfoData::has_plat_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_UTAGuessUserInfoData::set_has_plat_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PB_UTAGuessUserInfoData::clear_has_plat_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PB_UTAGuessUserInfoData::clear_plat_id() {
  plat_id_ = 0;
  clear_has_plat_id();
}
inline ::google::protobuf::int32 PB_UTAGuessUserInfoData::plat_id() const {
  // @@protoc_insertion_point(field_get:PB_UTAGuessUserInfoData.plat_id)
  return plat_id_;
}
inline void PB_UTAGuessUserInfoData::set_plat_id(::google::protobuf::int32 value) {
  set_has_plat_id();
  plat_id_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAGuessUserInfoData.plat_id)
}

// optional int32 server_id = 3;
inline bool PB_UTAGuessUserInfoData::has_server_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PB_UTAGuessUserInfoData::set_has_server_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PB_UTAGuessUserInfoData::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PB_UTAGuessUserInfoData::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 PB_UTAGuessUserInfoData::server_id() const {
  // @@protoc_insertion_point(field_get:PB_UTAGuessUserInfoData.server_id)
  return server_id_;
}
inline void PB_UTAGuessUserInfoData::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAGuessUserInfoData.server_id)
}

// optional int64 team_seq = 4;
inline bool PB_UTAGuessUserInfoData::has_team_seq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PB_UTAGuessUserInfoData::set_has_team_seq() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PB_UTAGuessUserInfoData::clear_has_team_seq() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PB_UTAGuessUserInfoData::clear_team_seq() {
  team_seq_ = GOOGLE_LONGLONG(0);
  clear_has_team_seq();
}
inline ::google::protobuf::int64 PB_UTAGuessUserInfoData::team_seq() const {
  // @@protoc_insertion_point(field_get:PB_UTAGuessUserInfoData.team_seq)
  return team_seq_;
}
inline void PB_UTAGuessUserInfoData::set_team_seq(::google::protobuf::int64 value) {
  set_has_team_seq();
  team_seq_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAGuessUserInfoData.team_seq)
}

// optional int64 match_seq = 5;
inline bool PB_UTAGuessUserInfoData::has_match_seq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PB_UTAGuessUserInfoData::set_has_match_seq() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PB_UTAGuessUserInfoData::clear_has_match_seq() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PB_UTAGuessUserInfoData::clear_match_seq() {
  match_seq_ = GOOGLE_LONGLONG(0);
  clear_has_match_seq();
}
inline ::google::protobuf::int64 PB_UTAGuessUserInfoData::match_seq() const {
  // @@protoc_insertion_point(field_get:PB_UTAGuessUserInfoData.match_seq)
  return match_seq_;
}
inline void PB_UTAGuessUserInfoData::set_match_seq(::google::protobuf::int64 value) {
  set_has_match_seq();
  match_seq_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAGuessUserInfoData.match_seq)
}

// optional int32 bet_coin_num = 6;
inline bool PB_UTAGuessUserInfoData::has_bet_coin_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PB_UTAGuessUserInfoData::set_has_bet_coin_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PB_UTAGuessUserInfoData::clear_has_bet_coin_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PB_UTAGuessUserInfoData::clear_bet_coin_num() {
  bet_coin_num_ = 0;
  clear_has_bet_coin_num();
}
inline ::google::protobuf::int32 PB_UTAGuessUserInfoData::bet_coin_num() const {
  // @@protoc_insertion_point(field_get:PB_UTAGuessUserInfoData.bet_coin_num)
  return bet_coin_num_;
}
inline void PB_UTAGuessUserInfoData::set_bet_coin_num(::google::protobuf::int32 value) {
  set_has_bet_coin_num();
  bet_coin_num_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAGuessUserInfoData.bet_coin_num)
}

// optional int32 is_get = 7;
inline bool PB_UTAGuessUserInfoData::has_is_get() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PB_UTAGuessUserInfoData::set_has_is_get() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PB_UTAGuessUserInfoData::clear_has_is_get() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PB_UTAGuessUserInfoData::clear_is_get() {
  is_get_ = 0;
  clear_has_is_get();
}
inline ::google::protobuf::int32 PB_UTAGuessUserInfoData::is_get() const {
  // @@protoc_insertion_point(field_get:PB_UTAGuessUserInfoData.is_get)
  return is_get_;
}
inline void PB_UTAGuessUserInfoData::set_is_get(::google::protobuf::int32 value) {
  set_has_is_get();
  is_get_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAGuessUserInfoData.is_get)
}

// -------------------------------------------------------------------

// PB_UTAGuessTeamInfoData

// optional int64 team_seq = 1;
inline bool PB_UTAGuessTeamInfoData::has_team_seq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_UTAGuessTeamInfoData::set_has_team_seq() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB_UTAGuessTeamInfoData::clear_has_team_seq() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB_UTAGuessTeamInfoData::clear_team_seq() {
  team_seq_ = GOOGLE_LONGLONG(0);
  clear_has_team_seq();
}
inline ::google::protobuf::int64 PB_UTAGuessTeamInfoData::team_seq() const {
  // @@protoc_insertion_point(field_get:PB_UTAGuessTeamInfoData.team_seq)
  return team_seq_;
}
inline void PB_UTAGuessTeamInfoData::set_team_seq(::google::protobuf::int64 value) {
  set_has_team_seq();
  team_seq_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAGuessTeamInfoData.team_seq)
}

// optional int64 match_seq = 2;
inline bool PB_UTAGuessTeamInfoData::has_match_seq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_UTAGuessTeamInfoData::set_has_match_seq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PB_UTAGuessTeamInfoData::clear_has_match_seq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PB_UTAGuessTeamInfoData::clear_match_seq() {
  match_seq_ = GOOGLE_LONGLONG(0);
  clear_has_match_seq();
}
inline ::google::protobuf::int64 PB_UTAGuessTeamInfoData::match_seq() const {
  // @@protoc_insertion_point(field_get:PB_UTAGuessTeamInfoData.match_seq)
  return match_seq_;
}
inline void PB_UTAGuessTeamInfoData::set_match_seq(::google::protobuf::int64 value) {
  set_has_match_seq();
  match_seq_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAGuessTeamInfoData.match_seq)
}

// optional int32 plat_id = 3;
inline bool PB_UTAGuessTeamInfoData::has_plat_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PB_UTAGuessTeamInfoData::set_has_plat_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PB_UTAGuessTeamInfoData::clear_has_plat_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PB_UTAGuessTeamInfoData::clear_plat_id() {
  plat_id_ = 0;
  clear_has_plat_id();
}
inline ::google::protobuf::int32 PB_UTAGuessTeamInfoData::plat_id() const {
  // @@protoc_insertion_point(field_get:PB_UTAGuessTeamInfoData.plat_id)
  return plat_id_;
}
inline void PB_UTAGuessTeamInfoData::set_plat_id(::google::protobuf::int32 value) {
  set_has_plat_id();
  plat_id_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAGuessTeamInfoData.plat_id)
}

// optional int32 server_id = 4;
inline bool PB_UTAGuessTeamInfoData::has_server_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PB_UTAGuessTeamInfoData::set_has_server_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PB_UTAGuessTeamInfoData::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PB_UTAGuessTeamInfoData::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 PB_UTAGuessTeamInfoData::server_id() const {
  // @@protoc_insertion_point(field_get:PB_UTAGuessTeamInfoData.server_id)
  return server_id_;
}
inline void PB_UTAGuessTeamInfoData::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAGuessTeamInfoData.server_id)
}

// optional int32 total_bet_num = 5;
inline bool PB_UTAGuessTeamInfoData::has_total_bet_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PB_UTAGuessTeamInfoData::set_has_total_bet_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PB_UTAGuessTeamInfoData::clear_has_total_bet_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PB_UTAGuessTeamInfoData::clear_total_bet_num() {
  total_bet_num_ = 0;
  clear_has_total_bet_num();
}
inline ::google::protobuf::int32 PB_UTAGuessTeamInfoData::total_bet_num() const {
  // @@protoc_insertion_point(field_get:PB_UTAGuessTeamInfoData.total_bet_num)
  return total_bet_num_;
}
inline void PB_UTAGuessTeamInfoData::set_total_bet_num(::google::protobuf::int32 value) {
  set_has_total_bet_num();
  total_bet_num_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAGuessTeamInfoData.total_bet_num)
}

// optional int32 guess_status = 6;
inline bool PB_UTAGuessTeamInfoData::has_guess_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PB_UTAGuessTeamInfoData::set_has_guess_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PB_UTAGuessTeamInfoData::clear_has_guess_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PB_UTAGuessTeamInfoData::clear_guess_status() {
  guess_status_ = 0;
  clear_has_guess_status();
}
inline ::google::protobuf::int32 PB_UTAGuessTeamInfoData::guess_status() const {
  // @@protoc_insertion_point(field_get:PB_UTAGuessTeamInfoData.guess_status)
  return guess_status_;
}
inline void PB_UTAGuessTeamInfoData::set_guess_status(::google::protobuf::int32 value) {
  set_has_guess_status();
  guess_status_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAGuessTeamInfoData.guess_status)
}

// -------------------------------------------------------------------

// PB_UTAGuessMatchInfoData

// optional int64 match_seq = 1;
inline bool PB_UTAGuessMatchInfoData::has_match_seq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_UTAGuessMatchInfoData::set_has_match_seq() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB_UTAGuessMatchInfoData::clear_has_match_seq() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB_UTAGuessMatchInfoData::clear_match_seq() {
  match_seq_ = GOOGLE_LONGLONG(0);
  clear_has_match_seq();
}
inline ::google::protobuf::int64 PB_UTAGuessMatchInfoData::match_seq() const {
  // @@protoc_insertion_point(field_get:PB_UTAGuessMatchInfoData.match_seq)
  return match_seq_;
}
inline void PB_UTAGuessMatchInfoData::set_match_seq(::google::protobuf::int64 value) {
  set_has_match_seq();
  match_seq_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAGuessMatchInfoData.match_seq)
}

// repeated .PB_UTAGuessTeamInfoData team_info = 2;
inline int PB_UTAGuessMatchInfoData::team_info_size() const {
  return team_info_.size();
}
inline void PB_UTAGuessMatchInfoData::clear_team_info() {
  team_info_.Clear();
}
inline const ::PB_UTAGuessTeamInfoData& PB_UTAGuessMatchInfoData::team_info(int index) const {
  // @@protoc_insertion_point(field_get:PB_UTAGuessMatchInfoData.team_info)
  return team_info_.Get(index);
}
inline ::PB_UTAGuessTeamInfoData* PB_UTAGuessMatchInfoData::mutable_team_info(int index) {
  // @@protoc_insertion_point(field_mutable:PB_UTAGuessMatchInfoData.team_info)
  return team_info_.Mutable(index);
}
inline ::PB_UTAGuessTeamInfoData* PB_UTAGuessMatchInfoData::add_team_info() {
  // @@protoc_insertion_point(field_add:PB_UTAGuessMatchInfoData.team_info)
  return team_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB_UTAGuessTeamInfoData >&
PB_UTAGuessMatchInfoData::team_info() const {
  // @@protoc_insertion_point(field_list:PB_UTAGuessMatchInfoData.team_info)
  return team_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB_UTAGuessTeamInfoData >*
PB_UTAGuessMatchInfoData::mutable_team_info() {
  // @@protoc_insertion_point(field_mutable_list:PB_UTAGuessMatchInfoData.team_info)
  return &team_info_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_uta_5fguess_5fdata_2eproto__INCLUDED
