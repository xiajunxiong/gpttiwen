// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uta_last_season_main_over_view.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "uta_last_season_main_over_view.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PB_UTAMainOverviewSchedule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_UTAMainOverviewSchedule_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_UTAMainOverviewScheduleList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_UTAMainOverviewScheduleList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_uta_5flast_5fseason_5fmain_5fover_5fview_2eproto() {
  protobuf_AddDesc_uta_5flast_5fseason_5fmain_5fover_5fview_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "uta_last_season_main_over_view.proto");
  GOOGLE_CHECK(file != NULL);
  PB_UTAMainOverviewSchedule_descriptor_ = file->message_type(0);
  static const int PB_UTAMainOverviewSchedule_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAMainOverviewSchedule, overview_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAMainOverviewSchedule, atk_team_unique_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAMainOverviewSchedule, def_team_unique_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAMainOverviewSchedule, atk_team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAMainOverviewSchedule, def_team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAMainOverviewSchedule, fight_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAMainOverviewSchedule, video_id_),
  };
  PB_UTAMainOverviewSchedule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_UTAMainOverviewSchedule_descriptor_,
      PB_UTAMainOverviewSchedule::default_instance_,
      PB_UTAMainOverviewSchedule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAMainOverviewSchedule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAMainOverviewSchedule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_UTAMainOverviewSchedule));
  PB_UTAMainOverviewScheduleList_descriptor_ = file->message_type(1);
  static const int PB_UTAMainOverviewScheduleList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAMainOverviewScheduleList, schedule_list_),
  };
  PB_UTAMainOverviewScheduleList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_UTAMainOverviewScheduleList_descriptor_,
      PB_UTAMainOverviewScheduleList::default_instance_,
      PB_UTAMainOverviewScheduleList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAMainOverviewScheduleList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAMainOverviewScheduleList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_UTAMainOverviewScheduleList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_uta_5flast_5fseason_5fmain_5fover_5fview_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_UTAMainOverviewSchedule_descriptor_, &PB_UTAMainOverviewSchedule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_UTAMainOverviewScheduleList_descriptor_, &PB_UTAMainOverviewScheduleList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_uta_5flast_5fseason_5fmain_5fover_5fview_2eproto() {
  delete PB_UTAMainOverviewSchedule::default_instance_;
  delete PB_UTAMainOverviewSchedule_reflection_;
  delete PB_UTAMainOverviewScheduleList::default_instance_;
  delete PB_UTAMainOverviewScheduleList_reflection_;
}

void protobuf_AddDesc_uta_5flast_5fseason_5fmain_5fover_5fview_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n$uta_last_season_main_over_view.proto\"\301"
    "\001\n\032PB_UTAMainOverviewSchedule\022\025\n\rovervie"
    "w_type\030\001 \001(\005\022\032\n\022atk_team_unique_id\030\002 \001(\003"
    "\022\032\n\022def_team_unique_id\030\003 \001(\003\022\025\n\ratk_team"
    "_name\030\004 \001(\t\022\025\n\rdef_team_name\030\005 \001(\t\022\024\n\014fi"
    "ght_result\030\006 \001(\005\022\020\n\010video_id\030\007 \001(\003\"T\n\036PB"
    "_UTAMainOverviewScheduleList\0222\n\rschedule"
    "_list\030\002 \003(\0132\033.PB_UTAMainOverviewSchedule", 320);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "uta_last_season_main_over_view.proto", &protobuf_RegisterTypes);
  PB_UTAMainOverviewSchedule::default_instance_ = new PB_UTAMainOverviewSchedule();
  PB_UTAMainOverviewScheduleList::default_instance_ = new PB_UTAMainOverviewScheduleList();
  PB_UTAMainOverviewSchedule::default_instance_->InitAsDefaultInstance();
  PB_UTAMainOverviewScheduleList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_uta_5flast_5fseason_5fmain_5fover_5fview_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_uta_5flast_5fseason_5fmain_5fover_5fview_2eproto {
  StaticDescriptorInitializer_uta_5flast_5fseason_5fmain_5fover_5fview_2eproto() {
    protobuf_AddDesc_uta_5flast_5fseason_5fmain_5fover_5fview_2eproto();
  }
} static_descriptor_initializer_uta_5flast_5fseason_5fmain_5fover_5fview_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PB_UTAMainOverviewSchedule::kOverviewTypeFieldNumber;
const int PB_UTAMainOverviewSchedule::kAtkTeamUniqueIdFieldNumber;
const int PB_UTAMainOverviewSchedule::kDefTeamUniqueIdFieldNumber;
const int PB_UTAMainOverviewSchedule::kAtkTeamNameFieldNumber;
const int PB_UTAMainOverviewSchedule::kDefTeamNameFieldNumber;
const int PB_UTAMainOverviewSchedule::kFightResultFieldNumber;
const int PB_UTAMainOverviewSchedule::kVideoIdFieldNumber;
#endif  // !_MSC_VER

PB_UTAMainOverviewSchedule::PB_UTAMainOverviewSchedule()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PB_UTAMainOverviewSchedule)
}

void PB_UTAMainOverviewSchedule::InitAsDefaultInstance() {
}

PB_UTAMainOverviewSchedule::PB_UTAMainOverviewSchedule(const PB_UTAMainOverviewSchedule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PB_UTAMainOverviewSchedule)
}

void PB_UTAMainOverviewSchedule::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  overview_type_ = 0;
  atk_team_unique_id_ = GOOGLE_LONGLONG(0);
  def_team_unique_id_ = GOOGLE_LONGLONG(0);
  atk_team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  def_team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fight_result_ = 0;
  video_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_UTAMainOverviewSchedule::~PB_UTAMainOverviewSchedule() {
  // @@protoc_insertion_point(destructor:PB_UTAMainOverviewSchedule)
  SharedDtor();
}

void PB_UTAMainOverviewSchedule::SharedDtor() {
  if (atk_team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete atk_team_name_;
  }
  if (def_team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete def_team_name_;
  }
  if (this != default_instance_) {
  }
}

void PB_UTAMainOverviewSchedule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_UTAMainOverviewSchedule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_UTAMainOverviewSchedule_descriptor_;
}

const PB_UTAMainOverviewSchedule& PB_UTAMainOverviewSchedule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uta_5flast_5fseason_5fmain_5fover_5fview_2eproto();
  return *default_instance_;
}

PB_UTAMainOverviewSchedule* PB_UTAMainOverviewSchedule::default_instance_ = NULL;

PB_UTAMainOverviewSchedule* PB_UTAMainOverviewSchedule::New() const {
  return new PB_UTAMainOverviewSchedule;
}

void PB_UTAMainOverviewSchedule::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PB_UTAMainOverviewSchedule*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(atk_team_unique_id_, fight_result_);
    if (has_atk_team_name()) {
      if (atk_team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        atk_team_name_->clear();
      }
    }
    if (has_def_team_name()) {
      if (def_team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        def_team_name_->clear();
      }
    }
    video_id_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_UTAMainOverviewSchedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PB_UTAMainOverviewSchedule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 overview_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overview_type_)));
          set_has_overview_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_atk_team_unique_id;
        break;
      }

      // optional int64 atk_team_unique_id = 2;
      case 2: {
        if (tag == 16) {
         parse_atk_team_unique_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &atk_team_unique_id_)));
          set_has_atk_team_unique_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_def_team_unique_id;
        break;
      }

      // optional int64 def_team_unique_id = 3;
      case 3: {
        if (tag == 24) {
         parse_def_team_unique_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &def_team_unique_id_)));
          set_has_def_team_unique_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_atk_team_name;
        break;
      }

      // optional string atk_team_name = 4;
      case 4: {
        if (tag == 34) {
         parse_atk_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_atk_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->atk_team_name().data(), this->atk_team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "atk_team_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_def_team_name;
        break;
      }

      // optional string def_team_name = 5;
      case 5: {
        if (tag == 42) {
         parse_def_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_def_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->def_team_name().data(), this->def_team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "def_team_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_fight_result;
        break;
      }

      // optional int32 fight_result = 6;
      case 6: {
        if (tag == 48) {
         parse_fight_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_result_)));
          set_has_fight_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_video_id;
        break;
      }

      // optional int64 video_id = 7;
      case 7: {
        if (tag == 56) {
         parse_video_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &video_id_)));
          set_has_video_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PB_UTAMainOverviewSchedule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PB_UTAMainOverviewSchedule)
  return false;
#undef DO_
}

void PB_UTAMainOverviewSchedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PB_UTAMainOverviewSchedule)
  // optional int32 overview_type = 1;
  if (has_overview_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->overview_type(), output);
  }

  // optional int64 atk_team_unique_id = 2;
  if (has_atk_team_unique_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->atk_team_unique_id(), output);
  }

  // optional int64 def_team_unique_id = 3;
  if (has_def_team_unique_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->def_team_unique_id(), output);
  }

  // optional string atk_team_name = 4;
  if (has_atk_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->atk_team_name().data(), this->atk_team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "atk_team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->atk_team_name(), output);
  }

  // optional string def_team_name = 5;
  if (has_def_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->def_team_name().data(), this->def_team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "def_team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->def_team_name(), output);
  }

  // optional int32 fight_result = 6;
  if (has_fight_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fight_result(), output);
  }

  // optional int64 video_id = 7;
  if (has_video_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->video_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PB_UTAMainOverviewSchedule)
}

::google::protobuf::uint8* PB_UTAMainOverviewSchedule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_UTAMainOverviewSchedule)
  // optional int32 overview_type = 1;
  if (has_overview_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->overview_type(), target);
  }

  // optional int64 atk_team_unique_id = 2;
  if (has_atk_team_unique_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->atk_team_unique_id(), target);
  }

  // optional int64 def_team_unique_id = 3;
  if (has_def_team_unique_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->def_team_unique_id(), target);
  }

  // optional string atk_team_name = 4;
  if (has_atk_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->atk_team_name().data(), this->atk_team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "atk_team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->atk_team_name(), target);
  }

  // optional string def_team_name = 5;
  if (has_def_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->def_team_name().data(), this->def_team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "def_team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->def_team_name(), target);
  }

  // optional int32 fight_result = 6;
  if (has_fight_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->fight_result(), target);
  }

  // optional int64 video_id = 7;
  if (has_video_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->video_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_UTAMainOverviewSchedule)
  return target;
}

int PB_UTAMainOverviewSchedule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 overview_type = 1;
    if (has_overview_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->overview_type());
    }

    // optional int64 atk_team_unique_id = 2;
    if (has_atk_team_unique_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->atk_team_unique_id());
    }

    // optional int64 def_team_unique_id = 3;
    if (has_def_team_unique_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->def_team_unique_id());
    }

    // optional string atk_team_name = 4;
    if (has_atk_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->atk_team_name());
    }

    // optional string def_team_name = 5;
    if (has_def_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->def_team_name());
    }

    // optional int32 fight_result = 6;
    if (has_fight_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight_result());
    }

    // optional int64 video_id = 7;
    if (has_video_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->video_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_UTAMainOverviewSchedule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_UTAMainOverviewSchedule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_UTAMainOverviewSchedule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_UTAMainOverviewSchedule::MergeFrom(const PB_UTAMainOverviewSchedule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_overview_type()) {
      set_overview_type(from.overview_type());
    }
    if (from.has_atk_team_unique_id()) {
      set_atk_team_unique_id(from.atk_team_unique_id());
    }
    if (from.has_def_team_unique_id()) {
      set_def_team_unique_id(from.def_team_unique_id());
    }
    if (from.has_atk_team_name()) {
      set_atk_team_name(from.atk_team_name());
    }
    if (from.has_def_team_name()) {
      set_def_team_name(from.def_team_name());
    }
    if (from.has_fight_result()) {
      set_fight_result(from.fight_result());
    }
    if (from.has_video_id()) {
      set_video_id(from.video_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_UTAMainOverviewSchedule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_UTAMainOverviewSchedule::CopyFrom(const PB_UTAMainOverviewSchedule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_UTAMainOverviewSchedule::IsInitialized() const {

  return true;
}

void PB_UTAMainOverviewSchedule::Swap(PB_UTAMainOverviewSchedule* other) {
  if (other != this) {
    std::swap(overview_type_, other->overview_type_);
    std::swap(atk_team_unique_id_, other->atk_team_unique_id_);
    std::swap(def_team_unique_id_, other->def_team_unique_id_);
    std::swap(atk_team_name_, other->atk_team_name_);
    std::swap(def_team_name_, other->def_team_name_);
    std::swap(fight_result_, other->fight_result_);
    std::swap(video_id_, other->video_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_UTAMainOverviewSchedule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_UTAMainOverviewSchedule_descriptor_;
  metadata.reflection = PB_UTAMainOverviewSchedule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_UTAMainOverviewScheduleList::kScheduleListFieldNumber;
#endif  // !_MSC_VER

PB_UTAMainOverviewScheduleList::PB_UTAMainOverviewScheduleList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PB_UTAMainOverviewScheduleList)
}

void PB_UTAMainOverviewScheduleList::InitAsDefaultInstance() {
}

PB_UTAMainOverviewScheduleList::PB_UTAMainOverviewScheduleList(const PB_UTAMainOverviewScheduleList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PB_UTAMainOverviewScheduleList)
}

void PB_UTAMainOverviewScheduleList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_UTAMainOverviewScheduleList::~PB_UTAMainOverviewScheduleList() {
  // @@protoc_insertion_point(destructor:PB_UTAMainOverviewScheduleList)
  SharedDtor();
}

void PB_UTAMainOverviewScheduleList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_UTAMainOverviewScheduleList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_UTAMainOverviewScheduleList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_UTAMainOverviewScheduleList_descriptor_;
}

const PB_UTAMainOverviewScheduleList& PB_UTAMainOverviewScheduleList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uta_5flast_5fseason_5fmain_5fover_5fview_2eproto();
  return *default_instance_;
}

PB_UTAMainOverviewScheduleList* PB_UTAMainOverviewScheduleList::default_instance_ = NULL;

PB_UTAMainOverviewScheduleList* PB_UTAMainOverviewScheduleList::New() const {
  return new PB_UTAMainOverviewScheduleList;
}

void PB_UTAMainOverviewScheduleList::Clear() {
  schedule_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_UTAMainOverviewScheduleList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PB_UTAMainOverviewScheduleList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB_UTAMainOverviewSchedule schedule_list = 2;
      case 2: {
        if (tag == 18) {
         parse_schedule_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_schedule_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_schedule_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PB_UTAMainOverviewScheduleList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PB_UTAMainOverviewScheduleList)
  return false;
#undef DO_
}

void PB_UTAMainOverviewScheduleList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PB_UTAMainOverviewScheduleList)
  // repeated .PB_UTAMainOverviewSchedule schedule_list = 2;
  for (int i = 0; i < this->schedule_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->schedule_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PB_UTAMainOverviewScheduleList)
}

::google::protobuf::uint8* PB_UTAMainOverviewScheduleList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_UTAMainOverviewScheduleList)
  // repeated .PB_UTAMainOverviewSchedule schedule_list = 2;
  for (int i = 0; i < this->schedule_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->schedule_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_UTAMainOverviewScheduleList)
  return target;
}

int PB_UTAMainOverviewScheduleList::ByteSize() const {
  int total_size = 0;

  // repeated .PB_UTAMainOverviewSchedule schedule_list = 2;
  total_size += 1 * this->schedule_list_size();
  for (int i = 0; i < this->schedule_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->schedule_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_UTAMainOverviewScheduleList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_UTAMainOverviewScheduleList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_UTAMainOverviewScheduleList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_UTAMainOverviewScheduleList::MergeFrom(const PB_UTAMainOverviewScheduleList& from) {
  GOOGLE_CHECK_NE(&from, this);
  schedule_list_.MergeFrom(from.schedule_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_UTAMainOverviewScheduleList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_UTAMainOverviewScheduleList::CopyFrom(const PB_UTAMainOverviewScheduleList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_UTAMainOverviewScheduleList::IsInitialized() const {

  return true;
}

void PB_UTAMainOverviewScheduleList::Swap(PB_UTAMainOverviewScheduleList* other) {
  if (other != this) {
    schedule_list_.Swap(&other->schedule_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_UTAMainOverviewScheduleList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_UTAMainOverviewScheduleList_descriptor_;
  metadata.reflection = PB_UTAMainOverviewScheduleList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
