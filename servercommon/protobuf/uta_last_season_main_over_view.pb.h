// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uta_last_season_main_over_view.proto

#ifndef PROTOBUF_uta_5flast_5fseason_5fmain_5fover_5fview_2eproto__INCLUDED
#define PROTOBUF_uta_5flast_5fseason_5fmain_5fover_5fview_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_uta_5flast_5fseason_5fmain_5fover_5fview_2eproto();
void protobuf_AssignDesc_uta_5flast_5fseason_5fmain_5fover_5fview_2eproto();
void protobuf_ShutdownFile_uta_5flast_5fseason_5fmain_5fover_5fview_2eproto();

class PB_UTAMainOverviewSchedule;
class PB_UTAMainOverviewScheduleList;

// ===================================================================

class PB_UTAMainOverviewSchedule : public ::google::protobuf::Message {
 public:
  PB_UTAMainOverviewSchedule();
  virtual ~PB_UTAMainOverviewSchedule();

  PB_UTAMainOverviewSchedule(const PB_UTAMainOverviewSchedule& from);

  inline PB_UTAMainOverviewSchedule& operator=(const PB_UTAMainOverviewSchedule& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PB_UTAMainOverviewSchedule& default_instance();

  void Swap(PB_UTAMainOverviewSchedule* other);

  // implements Message ----------------------------------------------

  PB_UTAMainOverviewSchedule* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB_UTAMainOverviewSchedule& from);
  void MergeFrom(const PB_UTAMainOverviewSchedule& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 overview_type = 1;
  inline bool has_overview_type() const;
  inline void clear_overview_type();
  static const int kOverviewTypeFieldNumber = 1;
  inline ::google::protobuf::int32 overview_type() const;
  inline void set_overview_type(::google::protobuf::int32 value);

  // optional int64 atk_team_unique_id = 2;
  inline bool has_atk_team_unique_id() const;
  inline void clear_atk_team_unique_id();
  static const int kAtkTeamUniqueIdFieldNumber = 2;
  inline ::google::protobuf::int64 atk_team_unique_id() const;
  inline void set_atk_team_unique_id(::google::protobuf::int64 value);

  // optional int64 def_team_unique_id = 3;
  inline bool has_def_team_unique_id() const;
  inline void clear_def_team_unique_id();
  static const int kDefTeamUniqueIdFieldNumber = 3;
  inline ::google::protobuf::int64 def_team_unique_id() const;
  inline void set_def_team_unique_id(::google::protobuf::int64 value);

  // optional string atk_team_name = 4;
  inline bool has_atk_team_name() const;
  inline void clear_atk_team_name();
  static const int kAtkTeamNameFieldNumber = 4;
  inline const ::std::string& atk_team_name() const;
  inline void set_atk_team_name(const ::std::string& value);
  inline void set_atk_team_name(const char* value);
  inline void set_atk_team_name(const char* value, size_t size);
  inline ::std::string* mutable_atk_team_name();
  inline ::std::string* release_atk_team_name();
  inline void set_allocated_atk_team_name(::std::string* atk_team_name);

  // optional string def_team_name = 5;
  inline bool has_def_team_name() const;
  inline void clear_def_team_name();
  static const int kDefTeamNameFieldNumber = 5;
  inline const ::std::string& def_team_name() const;
  inline void set_def_team_name(const ::std::string& value);
  inline void set_def_team_name(const char* value);
  inline void set_def_team_name(const char* value, size_t size);
  inline ::std::string* mutable_def_team_name();
  inline ::std::string* release_def_team_name();
  inline void set_allocated_def_team_name(::std::string* def_team_name);

  // optional int32 fight_result = 6;
  inline bool has_fight_result() const;
  inline void clear_fight_result();
  static const int kFightResultFieldNumber = 6;
  inline ::google::protobuf::int32 fight_result() const;
  inline void set_fight_result(::google::protobuf::int32 value);

  // optional int64 video_id = 7;
  inline bool has_video_id() const;
  inline void clear_video_id();
  static const int kVideoIdFieldNumber = 7;
  inline ::google::protobuf::int64 video_id() const;
  inline void set_video_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PB_UTAMainOverviewSchedule)
 private:
  inline void set_has_overview_type();
  inline void clear_has_overview_type();
  inline void set_has_atk_team_unique_id();
  inline void clear_has_atk_team_unique_id();
  inline void set_has_def_team_unique_id();
  inline void clear_has_def_team_unique_id();
  inline void set_has_atk_team_name();
  inline void clear_has_atk_team_name();
  inline void set_has_def_team_name();
  inline void clear_has_def_team_name();
  inline void set_has_fight_result();
  inline void clear_has_fight_result();
  inline void set_has_video_id();
  inline void clear_has_video_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 atk_team_unique_id_;
  ::google::protobuf::int64 def_team_unique_id_;
  ::google::protobuf::int32 overview_type_;
  ::google::protobuf::int32 fight_result_;
  ::std::string* atk_team_name_;
  ::std::string* def_team_name_;
  ::google::protobuf::int64 video_id_;
  friend void  protobuf_AddDesc_uta_5flast_5fseason_5fmain_5fover_5fview_2eproto();
  friend void protobuf_AssignDesc_uta_5flast_5fseason_5fmain_5fover_5fview_2eproto();
  friend void protobuf_ShutdownFile_uta_5flast_5fseason_5fmain_5fover_5fview_2eproto();

  void InitAsDefaultInstance();
  static PB_UTAMainOverviewSchedule* default_instance_;
};
// -------------------------------------------------------------------

class PB_UTAMainOverviewScheduleList : public ::google::protobuf::Message {
 public:
  PB_UTAMainOverviewScheduleList();
  virtual ~PB_UTAMainOverviewScheduleList();

  PB_UTAMainOverviewScheduleList(const PB_UTAMainOverviewScheduleList& from);

  inline PB_UTAMainOverviewScheduleList& operator=(const PB_UTAMainOverviewScheduleList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PB_UTAMainOverviewScheduleList& default_instance();

  void Swap(PB_UTAMainOverviewScheduleList* other);

  // implements Message ----------------------------------------------

  PB_UTAMainOverviewScheduleList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB_UTAMainOverviewScheduleList& from);
  void MergeFrom(const PB_UTAMainOverviewScheduleList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB_UTAMainOverviewSchedule schedule_list = 2;
  inline int schedule_list_size() const;
  inline void clear_schedule_list();
  static const int kScheduleListFieldNumber = 2;
  inline const ::PB_UTAMainOverviewSchedule& schedule_list(int index) const;
  inline ::PB_UTAMainOverviewSchedule* mutable_schedule_list(int index);
  inline ::PB_UTAMainOverviewSchedule* add_schedule_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB_UTAMainOverviewSchedule >&
      schedule_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB_UTAMainOverviewSchedule >*
      mutable_schedule_list();

  // @@protoc_insertion_point(class_scope:PB_UTAMainOverviewScheduleList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::PB_UTAMainOverviewSchedule > schedule_list_;
  friend void  protobuf_AddDesc_uta_5flast_5fseason_5fmain_5fover_5fview_2eproto();
  friend void protobuf_AssignDesc_uta_5flast_5fseason_5fmain_5fover_5fview_2eproto();
  friend void protobuf_ShutdownFile_uta_5flast_5fseason_5fmain_5fover_5fview_2eproto();

  void InitAsDefaultInstance();
  static PB_UTAMainOverviewScheduleList* default_instance_;
};
// ===================================================================


// ===================================================================

// PB_UTAMainOverviewSchedule

// optional int32 overview_type = 1;
inline bool PB_UTAMainOverviewSchedule::has_overview_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_UTAMainOverviewSchedule::set_has_overview_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB_UTAMainOverviewSchedule::clear_has_overview_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB_UTAMainOverviewSchedule::clear_overview_type() {
  overview_type_ = 0;
  clear_has_overview_type();
}
inline ::google::protobuf::int32 PB_UTAMainOverviewSchedule::overview_type() const {
  // @@protoc_insertion_point(field_get:PB_UTAMainOverviewSchedule.overview_type)
  return overview_type_;
}
inline void PB_UTAMainOverviewSchedule::set_overview_type(::google::protobuf::int32 value) {
  set_has_overview_type();
  overview_type_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAMainOverviewSchedule.overview_type)
}

// optional int64 atk_team_unique_id = 2;
inline bool PB_UTAMainOverviewSchedule::has_atk_team_unique_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_UTAMainOverviewSchedule::set_has_atk_team_unique_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PB_UTAMainOverviewSchedule::clear_has_atk_team_unique_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PB_UTAMainOverviewSchedule::clear_atk_team_unique_id() {
  atk_team_unique_id_ = GOOGLE_LONGLONG(0);
  clear_has_atk_team_unique_id();
}
inline ::google::protobuf::int64 PB_UTAMainOverviewSchedule::atk_team_unique_id() const {
  // @@protoc_insertion_point(field_get:PB_UTAMainOverviewSchedule.atk_team_unique_id)
  return atk_team_unique_id_;
}
inline void PB_UTAMainOverviewSchedule::set_atk_team_unique_id(::google::protobuf::int64 value) {
  set_has_atk_team_unique_id();
  atk_team_unique_id_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAMainOverviewSchedule.atk_team_unique_id)
}

// optional int64 def_team_unique_id = 3;
inline bool PB_UTAMainOverviewSchedule::has_def_team_unique_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PB_UTAMainOverviewSchedule::set_has_def_team_unique_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PB_UTAMainOverviewSchedule::clear_has_def_team_unique_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PB_UTAMainOverviewSchedule::clear_def_team_unique_id() {
  def_team_unique_id_ = GOOGLE_LONGLONG(0);
  clear_has_def_team_unique_id();
}
inline ::google::protobuf::int64 PB_UTAMainOverviewSchedule::def_team_unique_id() const {
  // @@protoc_insertion_point(field_get:PB_UTAMainOverviewSchedule.def_team_unique_id)
  return def_team_unique_id_;
}
inline void PB_UTAMainOverviewSchedule::set_def_team_unique_id(::google::protobuf::int64 value) {
  set_has_def_team_unique_id();
  def_team_unique_id_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAMainOverviewSchedule.def_team_unique_id)
}

// optional string atk_team_name = 4;
inline bool PB_UTAMainOverviewSchedule::has_atk_team_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PB_UTAMainOverviewSchedule::set_has_atk_team_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PB_UTAMainOverviewSchedule::clear_has_atk_team_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PB_UTAMainOverviewSchedule::clear_atk_team_name() {
  if (atk_team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    atk_team_name_->clear();
  }
  clear_has_atk_team_name();
}
inline const ::std::string& PB_UTAMainOverviewSchedule::atk_team_name() const {
  // @@protoc_insertion_point(field_get:PB_UTAMainOverviewSchedule.atk_team_name)
  return *atk_team_name_;
}
inline void PB_UTAMainOverviewSchedule::set_atk_team_name(const ::std::string& value) {
  set_has_atk_team_name();
  if (atk_team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    atk_team_name_ = new ::std::string;
  }
  atk_team_name_->assign(value);
  // @@protoc_insertion_point(field_set:PB_UTAMainOverviewSchedule.atk_team_name)
}
inline void PB_UTAMainOverviewSchedule::set_atk_team_name(const char* value) {
  set_has_atk_team_name();
  if (atk_team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    atk_team_name_ = new ::std::string;
  }
  atk_team_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:PB_UTAMainOverviewSchedule.atk_team_name)
}
inline void PB_UTAMainOverviewSchedule::set_atk_team_name(const char* value, size_t size) {
  set_has_atk_team_name();
  if (atk_team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    atk_team_name_ = new ::std::string;
  }
  atk_team_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PB_UTAMainOverviewSchedule.atk_team_name)
}
inline ::std::string* PB_UTAMainOverviewSchedule::mutable_atk_team_name() {
  set_has_atk_team_name();
  if (atk_team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    atk_team_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PB_UTAMainOverviewSchedule.atk_team_name)
  return atk_team_name_;
}
inline ::std::string* PB_UTAMainOverviewSchedule::release_atk_team_name() {
  clear_has_atk_team_name();
  if (atk_team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = atk_team_name_;
    atk_team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PB_UTAMainOverviewSchedule::set_allocated_atk_team_name(::std::string* atk_team_name) {
  if (atk_team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete atk_team_name_;
  }
  if (atk_team_name) {
    set_has_atk_team_name();
    atk_team_name_ = atk_team_name;
  } else {
    clear_has_atk_team_name();
    atk_team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PB_UTAMainOverviewSchedule.atk_team_name)
}

// optional string def_team_name = 5;
inline bool PB_UTAMainOverviewSchedule::has_def_team_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PB_UTAMainOverviewSchedule::set_has_def_team_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PB_UTAMainOverviewSchedule::clear_has_def_team_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PB_UTAMainOverviewSchedule::clear_def_team_name() {
  if (def_team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    def_team_name_->clear();
  }
  clear_has_def_team_name();
}
inline const ::std::string& PB_UTAMainOverviewSchedule::def_team_name() const {
  // @@protoc_insertion_point(field_get:PB_UTAMainOverviewSchedule.def_team_name)
  return *def_team_name_;
}
inline void PB_UTAMainOverviewSchedule::set_def_team_name(const ::std::string& value) {
  set_has_def_team_name();
  if (def_team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    def_team_name_ = new ::std::string;
  }
  def_team_name_->assign(value);
  // @@protoc_insertion_point(field_set:PB_UTAMainOverviewSchedule.def_team_name)
}
inline void PB_UTAMainOverviewSchedule::set_def_team_name(const char* value) {
  set_has_def_team_name();
  if (def_team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    def_team_name_ = new ::std::string;
  }
  def_team_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:PB_UTAMainOverviewSchedule.def_team_name)
}
inline void PB_UTAMainOverviewSchedule::set_def_team_name(const char* value, size_t size) {
  set_has_def_team_name();
  if (def_team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    def_team_name_ = new ::std::string;
  }
  def_team_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PB_UTAMainOverviewSchedule.def_team_name)
}
inline ::std::string* PB_UTAMainOverviewSchedule::mutable_def_team_name() {
  set_has_def_team_name();
  if (def_team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    def_team_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PB_UTAMainOverviewSchedule.def_team_name)
  return def_team_name_;
}
inline ::std::string* PB_UTAMainOverviewSchedule::release_def_team_name() {
  clear_has_def_team_name();
  if (def_team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = def_team_name_;
    def_team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PB_UTAMainOverviewSchedule::set_allocated_def_team_name(::std::string* def_team_name) {
  if (def_team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete def_team_name_;
  }
  if (def_team_name) {
    set_has_def_team_name();
    def_team_name_ = def_team_name;
  } else {
    clear_has_def_team_name();
    def_team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PB_UTAMainOverviewSchedule.def_team_name)
}

// optional int32 fight_result = 6;
inline bool PB_UTAMainOverviewSchedule::has_fight_result() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PB_UTAMainOverviewSchedule::set_has_fight_result() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PB_UTAMainOverviewSchedule::clear_has_fight_result() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PB_UTAMainOverviewSchedule::clear_fight_result() {
  fight_result_ = 0;
  clear_has_fight_result();
}
inline ::google::protobuf::int32 PB_UTAMainOverviewSchedule::fight_result() const {
  // @@protoc_insertion_point(field_get:PB_UTAMainOverviewSchedule.fight_result)
  return fight_result_;
}
inline void PB_UTAMainOverviewSchedule::set_fight_result(::google::protobuf::int32 value) {
  set_has_fight_result();
  fight_result_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAMainOverviewSchedule.fight_result)
}

// optional int64 video_id = 7;
inline bool PB_UTAMainOverviewSchedule::has_video_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PB_UTAMainOverviewSchedule::set_has_video_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PB_UTAMainOverviewSchedule::clear_has_video_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PB_UTAMainOverviewSchedule::clear_video_id() {
  video_id_ = GOOGLE_LONGLONG(0);
  clear_has_video_id();
}
inline ::google::protobuf::int64 PB_UTAMainOverviewSchedule::video_id() const {
  // @@protoc_insertion_point(field_get:PB_UTAMainOverviewSchedule.video_id)
  return video_id_;
}
inline void PB_UTAMainOverviewSchedule::set_video_id(::google::protobuf::int64 value) {
  set_has_video_id();
  video_id_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAMainOverviewSchedule.video_id)
}

// -------------------------------------------------------------------

// PB_UTAMainOverviewScheduleList

// repeated .PB_UTAMainOverviewSchedule schedule_list = 2;
inline int PB_UTAMainOverviewScheduleList::schedule_list_size() const {
  return schedule_list_.size();
}
inline void PB_UTAMainOverviewScheduleList::clear_schedule_list() {
  schedule_list_.Clear();
}
inline const ::PB_UTAMainOverviewSchedule& PB_UTAMainOverviewScheduleList::schedule_list(int index) const {
  // @@protoc_insertion_point(field_get:PB_UTAMainOverviewScheduleList.schedule_list)
  return schedule_list_.Get(index);
}
inline ::PB_UTAMainOverviewSchedule* PB_UTAMainOverviewScheduleList::mutable_schedule_list(int index) {
  // @@protoc_insertion_point(field_mutable:PB_UTAMainOverviewScheduleList.schedule_list)
  return schedule_list_.Mutable(index);
}
inline ::PB_UTAMainOverviewSchedule* PB_UTAMainOverviewScheduleList::add_schedule_list() {
  // @@protoc_insertion_point(field_add:PB_UTAMainOverviewScheduleList.schedule_list)
  return schedule_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB_UTAMainOverviewSchedule >&
PB_UTAMainOverviewScheduleList::schedule_list() const {
  // @@protoc_insertion_point(field_list:PB_UTAMainOverviewScheduleList.schedule_list)
  return schedule_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB_UTAMainOverviewSchedule >*
PB_UTAMainOverviewScheduleList::mutable_schedule_list() {
  // @@protoc_insertion_point(field_mutable_list:PB_UTAMainOverviewScheduleList.schedule_list)
  return &schedule_list_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_uta_5flast_5fseason_5fmain_5fover_5fview_2eproto__INCLUDED
