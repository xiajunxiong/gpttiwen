// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: utachampionrecord_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "utachampionrecord_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PB_UTAChampionRecordUserInfoData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_UTAChampionRecordUserInfoData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_UTAChampionRecordUserTeamInfoData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_UTAChampionRecordUserTeamInfoData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_UTAChampionRecordData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_UTAChampionRecordData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_utachampionrecord_5fdata_2eproto() {
  protobuf_AddDesc_utachampionrecord_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "utachampionrecord_data.proto");
  GOOGLE_CHECK(file != NULL);
  PB_UTAChampionRecordUserInfoData_descriptor_ = file->message_type(0);
  static const int PB_UTAChampionRecordUserInfoData_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAChampionRecordUserInfoData, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAChampionRecordUserInfoData, plat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAChampionRecordUserInfoData, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAChampionRecordUserInfoData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAChampionRecordUserInfoData, fly_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAChampionRecordUserInfoData, top_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAChampionRecordUserInfoData, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAChampionRecordUserInfoData, guild_banner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAChampionRecordUserInfoData, title_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAChampionRecordUserInfoData, facescore_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAChampionRecordUserInfoData, prof_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAChampionRecordUserInfoData, advance_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAChampionRecordUserInfoData, avatar_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAChampionRecordUserInfoData, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAChampionRecordUserInfoData, weapon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAChampionRecordUserInfoData, sub_weapon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAChampionRecordUserInfoData, headshot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAChampionRecordUserInfoData, special_appearance_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAChampionRecordUserInfoData, special_appearance_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAChampionRecordUserInfoData, wear_surface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAChampionRecordUserInfoData, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAChampionRecordUserInfoData, smart_mounts_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAChampionRecordUserInfoData, is_use_advanced_flag_),
  };
  PB_UTAChampionRecordUserInfoData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_UTAChampionRecordUserInfoData_descriptor_,
      PB_UTAChampionRecordUserInfoData::default_instance_,
      PB_UTAChampionRecordUserInfoData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAChampionRecordUserInfoData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAChampionRecordUserInfoData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_UTAChampionRecordUserInfoData));
  PB_UTAChampionRecordUserTeamInfoData_descriptor_ = file->message_type(1);
  static const int PB_UTAChampionRecordUserTeamInfoData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAChampionRecordUserTeamInfoData, user_info_),
  };
  PB_UTAChampionRecordUserTeamInfoData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_UTAChampionRecordUserTeamInfoData_descriptor_,
      PB_UTAChampionRecordUserTeamInfoData::default_instance_,
      PB_UTAChampionRecordUserTeamInfoData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAChampionRecordUserTeamInfoData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAChampionRecordUserTeamInfoData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_UTAChampionRecordUserTeamInfoData));
  PB_UTAChampionRecordData_descriptor_ = file->message_type(2);
  static const int PB_UTAChampionRecordData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAChampionRecordData, change_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAChampionRecordData, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAChampionRecordData, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAChampionRecordData, user_team_info_),
  };
  PB_UTAChampionRecordData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_UTAChampionRecordData_descriptor_,
      PB_UTAChampionRecordData::default_instance_,
      PB_UTAChampionRecordData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAChampionRecordData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UTAChampionRecordData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_UTAChampionRecordData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_utachampionrecord_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_UTAChampionRecordUserInfoData_descriptor_, &PB_UTAChampionRecordUserInfoData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_UTAChampionRecordUserTeamInfoData_descriptor_, &PB_UTAChampionRecordUserTeamInfoData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_UTAChampionRecordData_descriptor_, &PB_UTAChampionRecordData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_utachampionrecord_5fdata_2eproto() {
  delete PB_UTAChampionRecordUserInfoData::default_instance_;
  delete PB_UTAChampionRecordUserInfoData_reflection_;
  delete PB_UTAChampionRecordUserTeamInfoData::default_instance_;
  delete PB_UTAChampionRecordUserTeamInfoData_reflection_;
  delete PB_UTAChampionRecordData::default_instance_;
  delete PB_UTAChampionRecordData_reflection_;
}

void protobuf_AddDesc_utachampionrecord_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034utachampionrecord_data.proto\"\214\004\n PB_UT"
    "AChampionRecordUserInfoData\022\013\n\003uid\030\001 \001(\005"
    "\022\017\n\007plat_id\030\002 \001(\005\022\021\n\tserver_id\030\003 \001(\005\022\r\n\005"
    "level\030\004 \001(\005\022\020\n\010fly_flag\030\005 \001(\005\022\021\n\ttop_lev"
    "el\030\006 \001(\005\022\022\n\nguild_name\030\007 \001(\t\022\024\n\014guild_ba"
    "nner\030\010 \001(\t\022\020\n\010title_id\030\t \001(\005\022\024\n\014facescor"
    "e_id\030\n \001(\005\022\021\n\tprof_base\030\013 \001(\005\022\025\n\radvance"
    "_times\030\014 \001(\005\022\023\n\013avatar_type\030\r \001(\005\022\r\n\005col"
    "or\030\016 \001(\005\022\021\n\tweapon_id\030\017 \001(\005\022\025\n\rsub_weapo"
    "n_id\030\020 \001(\005\022\023\n\013headshot_id\030\021 \001(\005\022\037\n\027speci"
    "al_appearance_type\030\022 \001(\005\022 \n\030special_appe"
    "arance_param\030\023 \001(\005\022\024\n\014wear_surface\030\024 \003(\005"
    "\022\021\n\trole_name\030\025 \001(\t\022\032\n\022smart_mounts_inde"
    "x\030\026 \001(\005\022\034\n\024is_use_advanced_flag\030\027 \001(\005\"\\\n"
    "$PB_UTAChampionRecordUserTeamInfoData\0224\n"
    "\tuser_info\030\001 \003(\0132!.PB_UTAChampionRecordU"
    "serInfoData\"\220\001\n\030PB_UTAChampionRecordData"
    "\022\024\n\014change_state\030\001 \001(\005\022\014\n\004rank\030\002 \001(\005\022\021\n\t"
    "team_name\030\003 \001(\014\022=\n\016user_team_info\030\004 \001(\0132"
    "%.PB_UTAChampionRecordUserTeamInfoData", 798);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "utachampionrecord_data.proto", &protobuf_RegisterTypes);
  PB_UTAChampionRecordUserInfoData::default_instance_ = new PB_UTAChampionRecordUserInfoData();
  PB_UTAChampionRecordUserTeamInfoData::default_instance_ = new PB_UTAChampionRecordUserTeamInfoData();
  PB_UTAChampionRecordData::default_instance_ = new PB_UTAChampionRecordData();
  PB_UTAChampionRecordUserInfoData::default_instance_->InitAsDefaultInstance();
  PB_UTAChampionRecordUserTeamInfoData::default_instance_->InitAsDefaultInstance();
  PB_UTAChampionRecordData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_utachampionrecord_5fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_utachampionrecord_5fdata_2eproto {
  StaticDescriptorInitializer_utachampionrecord_5fdata_2eproto() {
    protobuf_AddDesc_utachampionrecord_5fdata_2eproto();
  }
} static_descriptor_initializer_utachampionrecord_5fdata_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PB_UTAChampionRecordUserInfoData::kUidFieldNumber;
const int PB_UTAChampionRecordUserInfoData::kPlatIdFieldNumber;
const int PB_UTAChampionRecordUserInfoData::kServerIdFieldNumber;
const int PB_UTAChampionRecordUserInfoData::kLevelFieldNumber;
const int PB_UTAChampionRecordUserInfoData::kFlyFlagFieldNumber;
const int PB_UTAChampionRecordUserInfoData::kTopLevelFieldNumber;
const int PB_UTAChampionRecordUserInfoData::kGuildNameFieldNumber;
const int PB_UTAChampionRecordUserInfoData::kGuildBannerFieldNumber;
const int PB_UTAChampionRecordUserInfoData::kTitleIdFieldNumber;
const int PB_UTAChampionRecordUserInfoData::kFacescoreIdFieldNumber;
const int PB_UTAChampionRecordUserInfoData::kProfBaseFieldNumber;
const int PB_UTAChampionRecordUserInfoData::kAdvanceTimesFieldNumber;
const int PB_UTAChampionRecordUserInfoData::kAvatarTypeFieldNumber;
const int PB_UTAChampionRecordUserInfoData::kColorFieldNumber;
const int PB_UTAChampionRecordUserInfoData::kWeaponIdFieldNumber;
const int PB_UTAChampionRecordUserInfoData::kSubWeaponIdFieldNumber;
const int PB_UTAChampionRecordUserInfoData::kHeadshotIdFieldNumber;
const int PB_UTAChampionRecordUserInfoData::kSpecialAppearanceTypeFieldNumber;
const int PB_UTAChampionRecordUserInfoData::kSpecialAppearanceParamFieldNumber;
const int PB_UTAChampionRecordUserInfoData::kWearSurfaceFieldNumber;
const int PB_UTAChampionRecordUserInfoData::kRoleNameFieldNumber;
const int PB_UTAChampionRecordUserInfoData::kSmartMountsIndexFieldNumber;
const int PB_UTAChampionRecordUserInfoData::kIsUseAdvancedFlagFieldNumber;
#endif  // !_MSC_VER

PB_UTAChampionRecordUserInfoData::PB_UTAChampionRecordUserInfoData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PB_UTAChampionRecordUserInfoData)
}

void PB_UTAChampionRecordUserInfoData::InitAsDefaultInstance() {
}

PB_UTAChampionRecordUserInfoData::PB_UTAChampionRecordUserInfoData(const PB_UTAChampionRecordUserInfoData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PB_UTAChampionRecordUserInfoData)
}

void PB_UTAChampionRecordUserInfoData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0;
  plat_id_ = 0;
  server_id_ = 0;
  level_ = 0;
  fly_flag_ = 0;
  top_level_ = 0;
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_banner_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_id_ = 0;
  facescore_id_ = 0;
  prof_base_ = 0;
  advance_times_ = 0;
  avatar_type_ = 0;
  color_ = 0;
  weapon_id_ = 0;
  sub_weapon_id_ = 0;
  headshot_id_ = 0;
  special_appearance_type_ = 0;
  special_appearance_param_ = 0;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smart_mounts_index_ = 0;
  is_use_advanced_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_UTAChampionRecordUserInfoData::~PB_UTAChampionRecordUserInfoData() {
  // @@protoc_insertion_point(destructor:PB_UTAChampionRecordUserInfoData)
  SharedDtor();
}

void PB_UTAChampionRecordUserInfoData::SharedDtor() {
  if (guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guild_name_;
  }
  if (guild_banner_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guild_banner_;
  }
  if (role_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void PB_UTAChampionRecordUserInfoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_UTAChampionRecordUserInfoData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_UTAChampionRecordUserInfoData_descriptor_;
}

const PB_UTAChampionRecordUserInfoData& PB_UTAChampionRecordUserInfoData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_utachampionrecord_5fdata_2eproto();
  return *default_instance_;
}

PB_UTAChampionRecordUserInfoData* PB_UTAChampionRecordUserInfoData::default_instance_ = NULL;

PB_UTAChampionRecordUserInfoData* PB_UTAChampionRecordUserInfoData::New() const {
  return new PB_UTAChampionRecordUserInfoData;
}

void PB_UTAChampionRecordUserInfoData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PB_UTAChampionRecordUserInfoData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uid_, top_level_);
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guild_name_->clear();
      }
    }
    if (has_guild_banner()) {
      if (guild_banner_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guild_banner_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(title_id_, sub_weapon_id_);
  }
  if (_has_bits_[16 / 32] & 7798784) {
    ZR_(headshot_id_, special_appearance_type_);
    ZR_(special_appearance_param_, smart_mounts_index_);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        role_name_->clear();
      }
    }
    is_use_advanced_flag_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  wear_surface_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_UTAChampionRecordUserInfoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PB_UTAChampionRecordUserInfoData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_plat_id;
        break;
      }

      // optional int32 plat_id = 2;
      case 2: {
        if (tag == 16) {
         parse_plat_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plat_id_)));
          set_has_plat_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_server_id;
        break;
      }

      // optional int32 server_id = 3;
      case 3: {
        if (tag == 24) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (tag == 32) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fly_flag;
        break;
      }

      // optional int32 fly_flag = 5;
      case 5: {
        if (tag == 40) {
         parse_fly_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fly_flag_)));
          set_has_fly_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_top_level;
        break;
      }

      // optional int32 top_level = 6;
      case 6: {
        if (tag == 48) {
         parse_top_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_level_)));
          set_has_top_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_guild_name;
        break;
      }

      // optional string guild_name = 7;
      case 7: {
        if (tag == 58) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guild_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_guild_banner;
        break;
      }

      // optional string guild_banner = 8;
      case 8: {
        if (tag == 66) {
         parse_guild_banner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_banner()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild_banner().data(), this->guild_banner().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guild_banner");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_title_id;
        break;
      }

      // optional int32 title_id = 9;
      case 9: {
        if (tag == 72) {
         parse_title_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &title_id_)));
          set_has_title_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_facescore_id;
        break;
      }

      // optional int32 facescore_id = 10;
      case 10: {
        if (tag == 80) {
         parse_facescore_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &facescore_id_)));
          set_has_facescore_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_prof_base;
        break;
      }

      // optional int32 prof_base = 11;
      case 11: {
        if (tag == 88) {
         parse_prof_base:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prof_base_)));
          set_has_prof_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_advance_times;
        break;
      }

      // optional int32 advance_times = 12;
      case 12: {
        if (tag == 96) {
         parse_advance_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &advance_times_)));
          set_has_advance_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_avatar_type;
        break;
      }

      // optional int32 avatar_type = 13;
      case 13: {
        if (tag == 104) {
         parse_avatar_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avatar_type_)));
          set_has_avatar_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_color;
        break;
      }

      // optional int32 color = 14;
      case 14: {
        if (tag == 112) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_weapon_id;
        break;
      }

      // optional int32 weapon_id = 15;
      case 15: {
        if (tag == 120) {
         parse_weapon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weapon_id_)));
          set_has_weapon_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_sub_weapon_id;
        break;
      }

      // optional int32 sub_weapon_id = 16;
      case 16: {
        if (tag == 128) {
         parse_sub_weapon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_weapon_id_)));
          set_has_sub_weapon_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_headshot_id;
        break;
      }

      // optional int32 headshot_id = 17;
      case 17: {
        if (tag == 136) {
         parse_headshot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headshot_id_)));
          set_has_headshot_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_special_appearance_type;
        break;
      }

      // optional int32 special_appearance_type = 18;
      case 18: {
        if (tag == 144) {
         parse_special_appearance_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &special_appearance_type_)));
          set_has_special_appearance_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_special_appearance_param;
        break;
      }

      // optional int32 special_appearance_param = 19;
      case 19: {
        if (tag == 152) {
         parse_special_appearance_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &special_appearance_param_)));
          set_has_special_appearance_param();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_wear_surface;
        break;
      }

      // repeated int32 wear_surface = 20;
      case 20: {
        if (tag == 160) {
         parse_wear_surface:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 160, input, this->mutable_wear_surface())));
        } else if (tag == 162) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_wear_surface())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_wear_surface;
        if (input->ExpectTag(170)) goto parse_role_name;
        break;
      }

      // optional string role_name = 21;
      case 21: {
        if (tag == 170) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "role_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_smart_mounts_index;
        break;
      }

      // optional int32 smart_mounts_index = 22;
      case 22: {
        if (tag == 176) {
         parse_smart_mounts_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &smart_mounts_index_)));
          set_has_smart_mounts_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_is_use_advanced_flag;
        break;
      }

      // optional int32 is_use_advanced_flag = 23;
      case 23: {
        if (tag == 184) {
         parse_is_use_advanced_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_use_advanced_flag_)));
          set_has_is_use_advanced_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PB_UTAChampionRecordUserInfoData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PB_UTAChampionRecordUserInfoData)
  return false;
#undef DO_
}

void PB_UTAChampionRecordUserInfoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PB_UTAChampionRecordUserInfoData)
  // optional int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int32 plat_id = 2;
  if (has_plat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->plat_id(), output);
  }

  // optional int32 server_id = 3;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->server_id(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional int32 fly_flag = 5;
  if (has_fly_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fly_flag(), output);
  }

  // optional int32 top_level = 6;
  if (has_top_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->top_level(), output);
  }

  // optional string guild_name = 7;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guild_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->guild_name(), output);
  }

  // optional string guild_banner = 8;
  if (has_guild_banner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_banner().data(), this->guild_banner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guild_banner");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->guild_banner(), output);
  }

  // optional int32 title_id = 9;
  if (has_title_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->title_id(), output);
  }

  // optional int32 facescore_id = 10;
  if (has_facescore_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->facescore_id(), output);
  }

  // optional int32 prof_base = 11;
  if (has_prof_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->prof_base(), output);
  }

  // optional int32 advance_times = 12;
  if (has_advance_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->advance_times(), output);
  }

  // optional int32 avatar_type = 13;
  if (has_avatar_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->avatar_type(), output);
  }

  // optional int32 color = 14;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->color(), output);
  }

  // optional int32 weapon_id = 15;
  if (has_weapon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->weapon_id(), output);
  }

  // optional int32 sub_weapon_id = 16;
  if (has_sub_weapon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->sub_weapon_id(), output);
  }

  // optional int32 headshot_id = 17;
  if (has_headshot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->headshot_id(), output);
  }

  // optional int32 special_appearance_type = 18;
  if (has_special_appearance_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->special_appearance_type(), output);
  }

  // optional int32 special_appearance_param = 19;
  if (has_special_appearance_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->special_appearance_param(), output);
  }

  // repeated int32 wear_surface = 20;
  for (int i = 0; i < this->wear_surface_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      20, this->wear_surface(i), output);
  }

  // optional string role_name = 21;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "role_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->role_name(), output);
  }

  // optional int32 smart_mounts_index = 22;
  if (has_smart_mounts_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->smart_mounts_index(), output);
  }

  // optional int32 is_use_advanced_flag = 23;
  if (has_is_use_advanced_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->is_use_advanced_flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PB_UTAChampionRecordUserInfoData)
}

::google::protobuf::uint8* PB_UTAChampionRecordUserInfoData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_UTAChampionRecordUserInfoData)
  // optional int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int32 plat_id = 2;
  if (has_plat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->plat_id(), target);
  }

  // optional int32 server_id = 3;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->server_id(), target);
  }

  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // optional int32 fly_flag = 5;
  if (has_fly_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fly_flag(), target);
  }

  // optional int32 top_level = 6;
  if (has_top_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->top_level(), target);
  }

  // optional string guild_name = 7;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guild_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->guild_name(), target);
  }

  // optional string guild_banner = 8;
  if (has_guild_banner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_banner().data(), this->guild_banner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guild_banner");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->guild_banner(), target);
  }

  // optional int32 title_id = 9;
  if (has_title_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->title_id(), target);
  }

  // optional int32 facescore_id = 10;
  if (has_facescore_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->facescore_id(), target);
  }

  // optional int32 prof_base = 11;
  if (has_prof_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->prof_base(), target);
  }

  // optional int32 advance_times = 12;
  if (has_advance_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->advance_times(), target);
  }

  // optional int32 avatar_type = 13;
  if (has_avatar_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->avatar_type(), target);
  }

  // optional int32 color = 14;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->color(), target);
  }

  // optional int32 weapon_id = 15;
  if (has_weapon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->weapon_id(), target);
  }

  // optional int32 sub_weapon_id = 16;
  if (has_sub_weapon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->sub_weapon_id(), target);
  }

  // optional int32 headshot_id = 17;
  if (has_headshot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->headshot_id(), target);
  }

  // optional int32 special_appearance_type = 18;
  if (has_special_appearance_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->special_appearance_type(), target);
  }

  // optional int32 special_appearance_param = 19;
  if (has_special_appearance_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->special_appearance_param(), target);
  }

  // repeated int32 wear_surface = 20;
  for (int i = 0; i < this->wear_surface_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(20, this->wear_surface(i), target);
  }

  // optional string role_name = 21;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "role_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->role_name(), target);
  }

  // optional int32 smart_mounts_index = 22;
  if (has_smart_mounts_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->smart_mounts_index(), target);
  }

  // optional int32 is_use_advanced_flag = 23;
  if (has_is_use_advanced_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->is_use_advanced_flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_UTAChampionRecordUserInfoData)
  return target;
}

int PB_UTAChampionRecordUserInfoData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 plat_id = 2;
    if (has_plat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plat_id());
    }

    // optional int32 server_id = 3;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 fly_flag = 5;
    if (has_fly_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fly_flag());
    }

    // optional int32 top_level = 6;
    if (has_top_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->top_level());
    }

    // optional string guild_name = 7;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

    // optional string guild_banner = 8;
    if (has_guild_banner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_banner());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 title_id = 9;
    if (has_title_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->title_id());
    }

    // optional int32 facescore_id = 10;
    if (has_facescore_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->facescore_id());
    }

    // optional int32 prof_base = 11;
    if (has_prof_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prof_base());
    }

    // optional int32 advance_times = 12;
    if (has_advance_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->advance_times());
    }

    // optional int32 avatar_type = 13;
    if (has_avatar_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avatar_type());
    }

    // optional int32 color = 14;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }

    // optional int32 weapon_id = 15;
    if (has_weapon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weapon_id());
    }

    // optional int32 sub_weapon_id = 16;
    if (has_sub_weapon_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_weapon_id());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 headshot_id = 17;
    if (has_headshot_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headshot_id());
    }

    // optional int32 special_appearance_type = 18;
    if (has_special_appearance_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->special_appearance_type());
    }

    // optional int32 special_appearance_param = 19;
    if (has_special_appearance_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->special_appearance_param());
    }

    // optional string role_name = 21;
    if (has_role_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional int32 smart_mounts_index = 22;
    if (has_smart_mounts_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->smart_mounts_index());
    }

    // optional int32 is_use_advanced_flag = 23;
    if (has_is_use_advanced_flag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_use_advanced_flag());
    }

  }
  // repeated int32 wear_surface = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->wear_surface_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->wear_surface(i));
    }
    total_size += 2 * this->wear_surface_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_UTAChampionRecordUserInfoData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_UTAChampionRecordUserInfoData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_UTAChampionRecordUserInfoData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_UTAChampionRecordUserInfoData::MergeFrom(const PB_UTAChampionRecordUserInfoData& from) {
  GOOGLE_CHECK_NE(&from, this);
  wear_surface_.MergeFrom(from.wear_surface_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_plat_id()) {
      set_plat_id(from.plat_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fly_flag()) {
      set_fly_flag(from.fly_flag());
    }
    if (from.has_top_level()) {
      set_top_level(from.top_level());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
    if (from.has_guild_banner()) {
      set_guild_banner(from.guild_banner());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_title_id()) {
      set_title_id(from.title_id());
    }
    if (from.has_facescore_id()) {
      set_facescore_id(from.facescore_id());
    }
    if (from.has_prof_base()) {
      set_prof_base(from.prof_base());
    }
    if (from.has_advance_times()) {
      set_advance_times(from.advance_times());
    }
    if (from.has_avatar_type()) {
      set_avatar_type(from.avatar_type());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_weapon_id()) {
      set_weapon_id(from.weapon_id());
    }
    if (from.has_sub_weapon_id()) {
      set_sub_weapon_id(from.sub_weapon_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_headshot_id()) {
      set_headshot_id(from.headshot_id());
    }
    if (from.has_special_appearance_type()) {
      set_special_appearance_type(from.special_appearance_type());
    }
    if (from.has_special_appearance_param()) {
      set_special_appearance_param(from.special_appearance_param());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_smart_mounts_index()) {
      set_smart_mounts_index(from.smart_mounts_index());
    }
    if (from.has_is_use_advanced_flag()) {
      set_is_use_advanced_flag(from.is_use_advanced_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_UTAChampionRecordUserInfoData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_UTAChampionRecordUserInfoData::CopyFrom(const PB_UTAChampionRecordUserInfoData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_UTAChampionRecordUserInfoData::IsInitialized() const {

  return true;
}

void PB_UTAChampionRecordUserInfoData::Swap(PB_UTAChampionRecordUserInfoData* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(plat_id_, other->plat_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(level_, other->level_);
    std::swap(fly_flag_, other->fly_flag_);
    std::swap(top_level_, other->top_level_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(guild_banner_, other->guild_banner_);
    std::swap(title_id_, other->title_id_);
    std::swap(facescore_id_, other->facescore_id_);
    std::swap(prof_base_, other->prof_base_);
    std::swap(advance_times_, other->advance_times_);
    std::swap(avatar_type_, other->avatar_type_);
    std::swap(color_, other->color_);
    std::swap(weapon_id_, other->weapon_id_);
    std::swap(sub_weapon_id_, other->sub_weapon_id_);
    std::swap(headshot_id_, other->headshot_id_);
    std::swap(special_appearance_type_, other->special_appearance_type_);
    std::swap(special_appearance_param_, other->special_appearance_param_);
    wear_surface_.Swap(&other->wear_surface_);
    std::swap(role_name_, other->role_name_);
    std::swap(smart_mounts_index_, other->smart_mounts_index_);
    std::swap(is_use_advanced_flag_, other->is_use_advanced_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_UTAChampionRecordUserInfoData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_UTAChampionRecordUserInfoData_descriptor_;
  metadata.reflection = PB_UTAChampionRecordUserInfoData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_UTAChampionRecordUserTeamInfoData::kUserInfoFieldNumber;
#endif  // !_MSC_VER

PB_UTAChampionRecordUserTeamInfoData::PB_UTAChampionRecordUserTeamInfoData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PB_UTAChampionRecordUserTeamInfoData)
}

void PB_UTAChampionRecordUserTeamInfoData::InitAsDefaultInstance() {
}

PB_UTAChampionRecordUserTeamInfoData::PB_UTAChampionRecordUserTeamInfoData(const PB_UTAChampionRecordUserTeamInfoData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PB_UTAChampionRecordUserTeamInfoData)
}

void PB_UTAChampionRecordUserTeamInfoData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_UTAChampionRecordUserTeamInfoData::~PB_UTAChampionRecordUserTeamInfoData() {
  // @@protoc_insertion_point(destructor:PB_UTAChampionRecordUserTeamInfoData)
  SharedDtor();
}

void PB_UTAChampionRecordUserTeamInfoData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_UTAChampionRecordUserTeamInfoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_UTAChampionRecordUserTeamInfoData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_UTAChampionRecordUserTeamInfoData_descriptor_;
}

const PB_UTAChampionRecordUserTeamInfoData& PB_UTAChampionRecordUserTeamInfoData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_utachampionrecord_5fdata_2eproto();
  return *default_instance_;
}

PB_UTAChampionRecordUserTeamInfoData* PB_UTAChampionRecordUserTeamInfoData::default_instance_ = NULL;

PB_UTAChampionRecordUserTeamInfoData* PB_UTAChampionRecordUserTeamInfoData::New() const {
  return new PB_UTAChampionRecordUserTeamInfoData;
}

void PB_UTAChampionRecordUserTeamInfoData::Clear() {
  user_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_UTAChampionRecordUserTeamInfoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PB_UTAChampionRecordUserTeamInfoData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB_UTAChampionRecordUserInfoData user_info = 1;
      case 1: {
        if (tag == 10) {
         parse_user_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_user_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PB_UTAChampionRecordUserTeamInfoData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PB_UTAChampionRecordUserTeamInfoData)
  return false;
#undef DO_
}

void PB_UTAChampionRecordUserTeamInfoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PB_UTAChampionRecordUserTeamInfoData)
  // repeated .PB_UTAChampionRecordUserInfoData user_info = 1;
  for (int i = 0; i < this->user_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PB_UTAChampionRecordUserTeamInfoData)
}

::google::protobuf::uint8* PB_UTAChampionRecordUserTeamInfoData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_UTAChampionRecordUserTeamInfoData)
  // repeated .PB_UTAChampionRecordUserInfoData user_info = 1;
  for (int i = 0; i < this->user_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_UTAChampionRecordUserTeamInfoData)
  return target;
}

int PB_UTAChampionRecordUserTeamInfoData::ByteSize() const {
  int total_size = 0;

  // repeated .PB_UTAChampionRecordUserInfoData user_info = 1;
  total_size += 1 * this->user_info_size();
  for (int i = 0; i < this->user_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_UTAChampionRecordUserTeamInfoData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_UTAChampionRecordUserTeamInfoData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_UTAChampionRecordUserTeamInfoData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_UTAChampionRecordUserTeamInfoData::MergeFrom(const PB_UTAChampionRecordUserTeamInfoData& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_info_.MergeFrom(from.user_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_UTAChampionRecordUserTeamInfoData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_UTAChampionRecordUserTeamInfoData::CopyFrom(const PB_UTAChampionRecordUserTeamInfoData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_UTAChampionRecordUserTeamInfoData::IsInitialized() const {

  return true;
}

void PB_UTAChampionRecordUserTeamInfoData::Swap(PB_UTAChampionRecordUserTeamInfoData* other) {
  if (other != this) {
    user_info_.Swap(&other->user_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_UTAChampionRecordUserTeamInfoData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_UTAChampionRecordUserTeamInfoData_descriptor_;
  metadata.reflection = PB_UTAChampionRecordUserTeamInfoData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_UTAChampionRecordData::kChangeStateFieldNumber;
const int PB_UTAChampionRecordData::kRankFieldNumber;
const int PB_UTAChampionRecordData::kTeamNameFieldNumber;
const int PB_UTAChampionRecordData::kUserTeamInfoFieldNumber;
#endif  // !_MSC_VER

PB_UTAChampionRecordData::PB_UTAChampionRecordData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PB_UTAChampionRecordData)
}

void PB_UTAChampionRecordData::InitAsDefaultInstance() {
  user_team_info_ = const_cast< ::PB_UTAChampionRecordUserTeamInfoData*>(&::PB_UTAChampionRecordUserTeamInfoData::default_instance());
}

PB_UTAChampionRecordData::PB_UTAChampionRecordData(const PB_UTAChampionRecordData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PB_UTAChampionRecordData)
}

void PB_UTAChampionRecordData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  change_state_ = 0;
  rank_ = 0;
  team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_team_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_UTAChampionRecordData::~PB_UTAChampionRecordData() {
  // @@protoc_insertion_point(destructor:PB_UTAChampionRecordData)
  SharedDtor();
}

void PB_UTAChampionRecordData::SharedDtor() {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_name_;
  }
  if (this != default_instance_) {
    delete user_team_info_;
  }
}

void PB_UTAChampionRecordData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_UTAChampionRecordData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_UTAChampionRecordData_descriptor_;
}

const PB_UTAChampionRecordData& PB_UTAChampionRecordData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_utachampionrecord_5fdata_2eproto();
  return *default_instance_;
}

PB_UTAChampionRecordData* PB_UTAChampionRecordData::default_instance_ = NULL;

PB_UTAChampionRecordData* PB_UTAChampionRecordData::New() const {
  return new PB_UTAChampionRecordData;
}

void PB_UTAChampionRecordData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PB_UTAChampionRecordData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(change_state_, rank_);
    if (has_team_name()) {
      if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        team_name_->clear();
      }
    }
    if (has_user_team_info()) {
      if (user_team_info_ != NULL) user_team_info_->::PB_UTAChampionRecordUserTeamInfoData::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_UTAChampionRecordData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PB_UTAChampionRecordData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 change_state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_state_)));
          set_has_change_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // optional int32 rank = 2;
      case 2: {
        if (tag == 16) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_team_name;
        break;
      }

      // optional bytes team_name = 3;
      case 3: {
        if (tag == 26) {
         parse_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_team_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_user_team_info;
        break;
      }

      // optional .PB_UTAChampionRecordUserTeamInfoData user_team_info = 4;
      case 4: {
        if (tag == 34) {
         parse_user_team_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_team_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PB_UTAChampionRecordData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PB_UTAChampionRecordData)
  return false;
#undef DO_
}

void PB_UTAChampionRecordData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PB_UTAChampionRecordData)
  // optional int32 change_state = 1;
  if (has_change_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->change_state(), output);
  }

  // optional int32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }

  // optional bytes team_name = 3;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->team_name(), output);
  }

  // optional .PB_UTAChampionRecordUserTeamInfoData user_team_info = 4;
  if (has_user_team_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->user_team_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PB_UTAChampionRecordData)
}

::google::protobuf::uint8* PB_UTAChampionRecordData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_UTAChampionRecordData)
  // optional int32 change_state = 1;
  if (has_change_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->change_state(), target);
  }

  // optional int32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }

  // optional bytes team_name = 3;
  if (has_team_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->team_name(), target);
  }

  // optional .PB_UTAChampionRecordUserTeamInfoData user_team_info = 4;
  if (has_user_team_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->user_team_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_UTAChampionRecordData)
  return target;
}

int PB_UTAChampionRecordData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 change_state = 1;
    if (has_change_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change_state());
    }

    // optional int32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional bytes team_name = 3;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->team_name());
    }

    // optional .PB_UTAChampionRecordUserTeamInfoData user_team_info = 4;
    if (has_user_team_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_team_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_UTAChampionRecordData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_UTAChampionRecordData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_UTAChampionRecordData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_UTAChampionRecordData::MergeFrom(const PB_UTAChampionRecordData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_change_state()) {
      set_change_state(from.change_state());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_team_name()) {
      set_team_name(from.team_name());
    }
    if (from.has_user_team_info()) {
      mutable_user_team_info()->::PB_UTAChampionRecordUserTeamInfoData::MergeFrom(from.user_team_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_UTAChampionRecordData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_UTAChampionRecordData::CopyFrom(const PB_UTAChampionRecordData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_UTAChampionRecordData::IsInitialized() const {

  return true;
}

void PB_UTAChampionRecordData::Swap(PB_UTAChampionRecordData* other) {
  if (other != this) {
    std::swap(change_state_, other->change_state_);
    std::swap(rank_, other->rank_);
    std::swap(team_name_, other->team_name_);
    std::swap(user_team_info_, other->user_team_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_UTAChampionRecordData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_UTAChampionRecordData_descriptor_;
  metadata.reflection = PB_UTAChampionRecordData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
