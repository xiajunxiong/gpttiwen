// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: utachampionrecord_data.proto

#ifndef PROTOBUF_utachampionrecord_5fdata_2eproto__INCLUDED
#define PROTOBUF_utachampionrecord_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_utachampionrecord_5fdata_2eproto();
void protobuf_AssignDesc_utachampionrecord_5fdata_2eproto();
void protobuf_ShutdownFile_utachampionrecord_5fdata_2eproto();

class PB_UTAChampionRecordUserInfoData;
class PB_UTAChampionRecordUserTeamInfoData;
class PB_UTAChampionRecordData;

// ===================================================================

class PB_UTAChampionRecordUserInfoData : public ::google::protobuf::Message {
 public:
  PB_UTAChampionRecordUserInfoData();
  virtual ~PB_UTAChampionRecordUserInfoData();

  PB_UTAChampionRecordUserInfoData(const PB_UTAChampionRecordUserInfoData& from);

  inline PB_UTAChampionRecordUserInfoData& operator=(const PB_UTAChampionRecordUserInfoData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PB_UTAChampionRecordUserInfoData& default_instance();

  void Swap(PB_UTAChampionRecordUserInfoData* other);

  // implements Message ----------------------------------------------

  PB_UTAChampionRecordUserInfoData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB_UTAChampionRecordUserInfoData& from);
  void MergeFrom(const PB_UTAChampionRecordUserInfoData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional int32 plat_id = 2;
  inline bool has_plat_id() const;
  inline void clear_plat_id();
  static const int kPlatIdFieldNumber = 2;
  inline ::google::protobuf::int32 plat_id() const;
  inline void set_plat_id(::google::protobuf::int32 value);

  // optional int32 server_id = 3;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 3;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);

  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 fly_flag = 5;
  inline bool has_fly_flag() const;
  inline void clear_fly_flag();
  static const int kFlyFlagFieldNumber = 5;
  inline ::google::protobuf::int32 fly_flag() const;
  inline void set_fly_flag(::google::protobuf::int32 value);

  // optional int32 top_level = 6;
  inline bool has_top_level() const;
  inline void clear_top_level();
  static const int kTopLevelFieldNumber = 6;
  inline ::google::protobuf::int32 top_level() const;
  inline void set_top_level(::google::protobuf::int32 value);

  // optional string guild_name = 7;
  inline bool has_guild_name() const;
  inline void clear_guild_name();
  static const int kGuildNameFieldNumber = 7;
  inline const ::std::string& guild_name() const;
  inline void set_guild_name(const ::std::string& value);
  inline void set_guild_name(const char* value);
  inline void set_guild_name(const char* value, size_t size);
  inline ::std::string* mutable_guild_name();
  inline ::std::string* release_guild_name();
  inline void set_allocated_guild_name(::std::string* guild_name);

  // optional string guild_banner = 8;
  inline bool has_guild_banner() const;
  inline void clear_guild_banner();
  static const int kGuildBannerFieldNumber = 8;
  inline const ::std::string& guild_banner() const;
  inline void set_guild_banner(const ::std::string& value);
  inline void set_guild_banner(const char* value);
  inline void set_guild_banner(const char* value, size_t size);
  inline ::std::string* mutable_guild_banner();
  inline ::std::string* release_guild_banner();
  inline void set_allocated_guild_banner(::std::string* guild_banner);

  // optional int32 title_id = 9;
  inline bool has_title_id() const;
  inline void clear_title_id();
  static const int kTitleIdFieldNumber = 9;
  inline ::google::protobuf::int32 title_id() const;
  inline void set_title_id(::google::protobuf::int32 value);

  // optional int32 facescore_id = 10;
  inline bool has_facescore_id() const;
  inline void clear_facescore_id();
  static const int kFacescoreIdFieldNumber = 10;
  inline ::google::protobuf::int32 facescore_id() const;
  inline void set_facescore_id(::google::protobuf::int32 value);

  // optional int32 prof_base = 11;
  inline bool has_prof_base() const;
  inline void clear_prof_base();
  static const int kProfBaseFieldNumber = 11;
  inline ::google::protobuf::int32 prof_base() const;
  inline void set_prof_base(::google::protobuf::int32 value);

  // optional int32 advance_times = 12;
  inline bool has_advance_times() const;
  inline void clear_advance_times();
  static const int kAdvanceTimesFieldNumber = 12;
  inline ::google::protobuf::int32 advance_times() const;
  inline void set_advance_times(::google::protobuf::int32 value);

  // optional int32 avatar_type = 13;
  inline bool has_avatar_type() const;
  inline void clear_avatar_type();
  static const int kAvatarTypeFieldNumber = 13;
  inline ::google::protobuf::int32 avatar_type() const;
  inline void set_avatar_type(::google::protobuf::int32 value);

  // optional int32 color = 14;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 14;
  inline ::google::protobuf::int32 color() const;
  inline void set_color(::google::protobuf::int32 value);

  // optional int32 weapon_id = 15;
  inline bool has_weapon_id() const;
  inline void clear_weapon_id();
  static const int kWeaponIdFieldNumber = 15;
  inline ::google::protobuf::int32 weapon_id() const;
  inline void set_weapon_id(::google::protobuf::int32 value);

  // optional int32 sub_weapon_id = 16;
  inline bool has_sub_weapon_id() const;
  inline void clear_sub_weapon_id();
  static const int kSubWeaponIdFieldNumber = 16;
  inline ::google::protobuf::int32 sub_weapon_id() const;
  inline void set_sub_weapon_id(::google::protobuf::int32 value);

  // optional int32 headshot_id = 17;
  inline bool has_headshot_id() const;
  inline void clear_headshot_id();
  static const int kHeadshotIdFieldNumber = 17;
  inline ::google::protobuf::int32 headshot_id() const;
  inline void set_headshot_id(::google::protobuf::int32 value);

  // optional int32 special_appearance_type = 18;
  inline bool has_special_appearance_type() const;
  inline void clear_special_appearance_type();
  static const int kSpecialAppearanceTypeFieldNumber = 18;
  inline ::google::protobuf::int32 special_appearance_type() const;
  inline void set_special_appearance_type(::google::protobuf::int32 value);

  // optional int32 special_appearance_param = 19;
  inline bool has_special_appearance_param() const;
  inline void clear_special_appearance_param();
  static const int kSpecialAppearanceParamFieldNumber = 19;
  inline ::google::protobuf::int32 special_appearance_param() const;
  inline void set_special_appearance_param(::google::protobuf::int32 value);

  // repeated int32 wear_surface = 20;
  inline int wear_surface_size() const;
  inline void clear_wear_surface();
  static const int kWearSurfaceFieldNumber = 20;
  inline ::google::protobuf::int32 wear_surface(int index) const;
  inline void set_wear_surface(int index, ::google::protobuf::int32 value);
  inline void add_wear_surface(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      wear_surface() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_wear_surface();

  // optional string role_name = 21;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 21;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional int32 smart_mounts_index = 22;
  inline bool has_smart_mounts_index() const;
  inline void clear_smart_mounts_index();
  static const int kSmartMountsIndexFieldNumber = 22;
  inline ::google::protobuf::int32 smart_mounts_index() const;
  inline void set_smart_mounts_index(::google::protobuf::int32 value);

  // optional int32 is_use_advanced_flag = 23;
  inline bool has_is_use_advanced_flag() const;
  inline void clear_is_use_advanced_flag();
  static const int kIsUseAdvancedFlagFieldNumber = 23;
  inline ::google::protobuf::int32 is_use_advanced_flag() const;
  inline void set_is_use_advanced_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB_UTAChampionRecordUserInfoData)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_plat_id();
  inline void clear_has_plat_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_fly_flag();
  inline void clear_has_fly_flag();
  inline void set_has_top_level();
  inline void clear_has_top_level();
  inline void set_has_guild_name();
  inline void clear_has_guild_name();
  inline void set_has_guild_banner();
  inline void clear_has_guild_banner();
  inline void set_has_title_id();
  inline void clear_has_title_id();
  inline void set_has_facescore_id();
  inline void clear_has_facescore_id();
  inline void set_has_prof_base();
  inline void clear_has_prof_base();
  inline void set_has_advance_times();
  inline void clear_has_advance_times();
  inline void set_has_avatar_type();
  inline void clear_has_avatar_type();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_weapon_id();
  inline void clear_has_weapon_id();
  inline void set_has_sub_weapon_id();
  inline void clear_has_sub_weapon_id();
  inline void set_has_headshot_id();
  inline void clear_has_headshot_id();
  inline void set_has_special_appearance_type();
  inline void clear_has_special_appearance_type();
  inline void set_has_special_appearance_param();
  inline void clear_has_special_appearance_param();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_smart_mounts_index();
  inline void clear_has_smart_mounts_index();
  inline void set_has_is_use_advanced_flag();
  inline void clear_has_is_use_advanced_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 plat_id_;
  ::google::protobuf::int32 server_id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 fly_flag_;
  ::google::protobuf::int32 top_level_;
  ::std::string* guild_name_;
  ::std::string* guild_banner_;
  ::google::protobuf::int32 title_id_;
  ::google::protobuf::int32 facescore_id_;
  ::google::protobuf::int32 prof_base_;
  ::google::protobuf::int32 advance_times_;
  ::google::protobuf::int32 avatar_type_;
  ::google::protobuf::int32 color_;
  ::google::protobuf::int32 weapon_id_;
  ::google::protobuf::int32 sub_weapon_id_;
  ::google::protobuf::int32 headshot_id_;
  ::google::protobuf::int32 special_appearance_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > wear_surface_;
  ::google::protobuf::int32 special_appearance_param_;
  ::google::protobuf::int32 smart_mounts_index_;
  ::std::string* role_name_;
  ::google::protobuf::int32 is_use_advanced_flag_;
  friend void  protobuf_AddDesc_utachampionrecord_5fdata_2eproto();
  friend void protobuf_AssignDesc_utachampionrecord_5fdata_2eproto();
  friend void protobuf_ShutdownFile_utachampionrecord_5fdata_2eproto();

  void InitAsDefaultInstance();
  static PB_UTAChampionRecordUserInfoData* default_instance_;
};
// -------------------------------------------------------------------

class PB_UTAChampionRecordUserTeamInfoData : public ::google::protobuf::Message {
 public:
  PB_UTAChampionRecordUserTeamInfoData();
  virtual ~PB_UTAChampionRecordUserTeamInfoData();

  PB_UTAChampionRecordUserTeamInfoData(const PB_UTAChampionRecordUserTeamInfoData& from);

  inline PB_UTAChampionRecordUserTeamInfoData& operator=(const PB_UTAChampionRecordUserTeamInfoData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PB_UTAChampionRecordUserTeamInfoData& default_instance();

  void Swap(PB_UTAChampionRecordUserTeamInfoData* other);

  // implements Message ----------------------------------------------

  PB_UTAChampionRecordUserTeamInfoData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB_UTAChampionRecordUserTeamInfoData& from);
  void MergeFrom(const PB_UTAChampionRecordUserTeamInfoData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB_UTAChampionRecordUserInfoData user_info = 1;
  inline int user_info_size() const;
  inline void clear_user_info();
  static const int kUserInfoFieldNumber = 1;
  inline const ::PB_UTAChampionRecordUserInfoData& user_info(int index) const;
  inline ::PB_UTAChampionRecordUserInfoData* mutable_user_info(int index);
  inline ::PB_UTAChampionRecordUserInfoData* add_user_info();
  inline const ::google::protobuf::RepeatedPtrField< ::PB_UTAChampionRecordUserInfoData >&
      user_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB_UTAChampionRecordUserInfoData >*
      mutable_user_info();

  // @@protoc_insertion_point(class_scope:PB_UTAChampionRecordUserTeamInfoData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::PB_UTAChampionRecordUserInfoData > user_info_;
  friend void  protobuf_AddDesc_utachampionrecord_5fdata_2eproto();
  friend void protobuf_AssignDesc_utachampionrecord_5fdata_2eproto();
  friend void protobuf_ShutdownFile_utachampionrecord_5fdata_2eproto();

  void InitAsDefaultInstance();
  static PB_UTAChampionRecordUserTeamInfoData* default_instance_;
};
// -------------------------------------------------------------------

class PB_UTAChampionRecordData : public ::google::protobuf::Message {
 public:
  PB_UTAChampionRecordData();
  virtual ~PB_UTAChampionRecordData();

  PB_UTAChampionRecordData(const PB_UTAChampionRecordData& from);

  inline PB_UTAChampionRecordData& operator=(const PB_UTAChampionRecordData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PB_UTAChampionRecordData& default_instance();

  void Swap(PB_UTAChampionRecordData* other);

  // implements Message ----------------------------------------------

  PB_UTAChampionRecordData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB_UTAChampionRecordData& from);
  void MergeFrom(const PB_UTAChampionRecordData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 change_state = 1;
  inline bool has_change_state() const;
  inline void clear_change_state();
  static const int kChangeStateFieldNumber = 1;
  inline ::google::protobuf::int32 change_state() const;
  inline void set_change_state(::google::protobuf::int32 value);

  // optional int32 rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional bytes team_name = 3;
  inline bool has_team_name() const;
  inline void clear_team_name();
  static const int kTeamNameFieldNumber = 3;
  inline const ::std::string& team_name() const;
  inline void set_team_name(const ::std::string& value);
  inline void set_team_name(const char* value);
  inline void set_team_name(const void* value, size_t size);
  inline ::std::string* mutable_team_name();
  inline ::std::string* release_team_name();
  inline void set_allocated_team_name(::std::string* team_name);

  // optional .PB_UTAChampionRecordUserTeamInfoData user_team_info = 4;
  inline bool has_user_team_info() const;
  inline void clear_user_team_info();
  static const int kUserTeamInfoFieldNumber = 4;
  inline const ::PB_UTAChampionRecordUserTeamInfoData& user_team_info() const;
  inline ::PB_UTAChampionRecordUserTeamInfoData* mutable_user_team_info();
  inline ::PB_UTAChampionRecordUserTeamInfoData* release_user_team_info();
  inline void set_allocated_user_team_info(::PB_UTAChampionRecordUserTeamInfoData* user_team_info);

  // @@protoc_insertion_point(class_scope:PB_UTAChampionRecordData)
 private:
  inline void set_has_change_state();
  inline void clear_has_change_state();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_team_name();
  inline void clear_has_team_name();
  inline void set_has_user_team_info();
  inline void clear_has_user_team_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 change_state_;
  ::google::protobuf::int32 rank_;
  ::std::string* team_name_;
  ::PB_UTAChampionRecordUserTeamInfoData* user_team_info_;
  friend void  protobuf_AddDesc_utachampionrecord_5fdata_2eproto();
  friend void protobuf_AssignDesc_utachampionrecord_5fdata_2eproto();
  friend void protobuf_ShutdownFile_utachampionrecord_5fdata_2eproto();

  void InitAsDefaultInstance();
  static PB_UTAChampionRecordData* default_instance_;
};
// ===================================================================


// ===================================================================

// PB_UTAChampionRecordUserInfoData

// optional int32 uid = 1;
inline bool PB_UTAChampionRecordUserInfoData::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_UTAChampionRecordUserInfoData::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 PB_UTAChampionRecordUserInfoData::uid() const {
  // @@protoc_insertion_point(field_get:PB_UTAChampionRecordUserInfoData.uid)
  return uid_;
}
inline void PB_UTAChampionRecordUserInfoData::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAChampionRecordUserInfoData.uid)
}

// optional int32 plat_id = 2;
inline bool PB_UTAChampionRecordUserInfoData::has_plat_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_UTAChampionRecordUserInfoData::set_has_plat_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_has_plat_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_plat_id() {
  plat_id_ = 0;
  clear_has_plat_id();
}
inline ::google::protobuf::int32 PB_UTAChampionRecordUserInfoData::plat_id() const {
  // @@protoc_insertion_point(field_get:PB_UTAChampionRecordUserInfoData.plat_id)
  return plat_id_;
}
inline void PB_UTAChampionRecordUserInfoData::set_plat_id(::google::protobuf::int32 value) {
  set_has_plat_id();
  plat_id_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAChampionRecordUserInfoData.plat_id)
}

// optional int32 server_id = 3;
inline bool PB_UTAChampionRecordUserInfoData::has_server_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PB_UTAChampionRecordUserInfoData::set_has_server_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 PB_UTAChampionRecordUserInfoData::server_id() const {
  // @@protoc_insertion_point(field_get:PB_UTAChampionRecordUserInfoData.server_id)
  return server_id_;
}
inline void PB_UTAChampionRecordUserInfoData::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAChampionRecordUserInfoData.server_id)
}

// optional int32 level = 4;
inline bool PB_UTAChampionRecordUserInfoData::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PB_UTAChampionRecordUserInfoData::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 PB_UTAChampionRecordUserInfoData::level() const {
  // @@protoc_insertion_point(field_get:PB_UTAChampionRecordUserInfoData.level)
  return level_;
}
inline void PB_UTAChampionRecordUserInfoData::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAChampionRecordUserInfoData.level)
}

// optional int32 fly_flag = 5;
inline bool PB_UTAChampionRecordUserInfoData::has_fly_flag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PB_UTAChampionRecordUserInfoData::set_has_fly_flag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_has_fly_flag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_fly_flag() {
  fly_flag_ = 0;
  clear_has_fly_flag();
}
inline ::google::protobuf::int32 PB_UTAChampionRecordUserInfoData::fly_flag() const {
  // @@protoc_insertion_point(field_get:PB_UTAChampionRecordUserInfoData.fly_flag)
  return fly_flag_;
}
inline void PB_UTAChampionRecordUserInfoData::set_fly_flag(::google::protobuf::int32 value) {
  set_has_fly_flag();
  fly_flag_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAChampionRecordUserInfoData.fly_flag)
}

// optional int32 top_level = 6;
inline bool PB_UTAChampionRecordUserInfoData::has_top_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PB_UTAChampionRecordUserInfoData::set_has_top_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_has_top_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_top_level() {
  top_level_ = 0;
  clear_has_top_level();
}
inline ::google::protobuf::int32 PB_UTAChampionRecordUserInfoData::top_level() const {
  // @@protoc_insertion_point(field_get:PB_UTAChampionRecordUserInfoData.top_level)
  return top_level_;
}
inline void PB_UTAChampionRecordUserInfoData::set_top_level(::google::protobuf::int32 value) {
  set_has_top_level();
  top_level_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAChampionRecordUserInfoData.top_level)
}

// optional string guild_name = 7;
inline bool PB_UTAChampionRecordUserInfoData::has_guild_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PB_UTAChampionRecordUserInfoData::set_has_guild_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_has_guild_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_guild_name() {
  if (guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_name_->clear();
  }
  clear_has_guild_name();
}
inline const ::std::string& PB_UTAChampionRecordUserInfoData::guild_name() const {
  // @@protoc_insertion_point(field_get:PB_UTAChampionRecordUserInfoData.guild_name)
  return *guild_name_;
}
inline void PB_UTAChampionRecordUserInfoData::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
  // @@protoc_insertion_point(field_set:PB_UTAChampionRecordUserInfoData.guild_name)
}
inline void PB_UTAChampionRecordUserInfoData::set_guild_name(const char* value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:PB_UTAChampionRecordUserInfoData.guild_name)
}
inline void PB_UTAChampionRecordUserInfoData::set_guild_name(const char* value, size_t size) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PB_UTAChampionRecordUserInfoData.guild_name)
}
inline ::std::string* PB_UTAChampionRecordUserInfoData::mutable_guild_name() {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PB_UTAChampionRecordUserInfoData.guild_name)
  return guild_name_;
}
inline ::std::string* PB_UTAChampionRecordUserInfoData::release_guild_name() {
  clear_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guild_name_;
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PB_UTAChampionRecordUserInfoData::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guild_name_;
  }
  if (guild_name) {
    set_has_guild_name();
    guild_name_ = guild_name;
  } else {
    clear_has_guild_name();
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PB_UTAChampionRecordUserInfoData.guild_name)
}

// optional string guild_banner = 8;
inline bool PB_UTAChampionRecordUserInfoData::has_guild_banner() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PB_UTAChampionRecordUserInfoData::set_has_guild_banner() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_has_guild_banner() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_guild_banner() {
  if (guild_banner_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_banner_->clear();
  }
  clear_has_guild_banner();
}
inline const ::std::string& PB_UTAChampionRecordUserInfoData::guild_banner() const {
  // @@protoc_insertion_point(field_get:PB_UTAChampionRecordUserInfoData.guild_banner)
  return *guild_banner_;
}
inline void PB_UTAChampionRecordUserInfoData::set_guild_banner(const ::std::string& value) {
  set_has_guild_banner();
  if (guild_banner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_banner_ = new ::std::string;
  }
  guild_banner_->assign(value);
  // @@protoc_insertion_point(field_set:PB_UTAChampionRecordUserInfoData.guild_banner)
}
inline void PB_UTAChampionRecordUserInfoData::set_guild_banner(const char* value) {
  set_has_guild_banner();
  if (guild_banner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_banner_ = new ::std::string;
  }
  guild_banner_->assign(value);
  // @@protoc_insertion_point(field_set_char:PB_UTAChampionRecordUserInfoData.guild_banner)
}
inline void PB_UTAChampionRecordUserInfoData::set_guild_banner(const char* value, size_t size) {
  set_has_guild_banner();
  if (guild_banner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_banner_ = new ::std::string;
  }
  guild_banner_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PB_UTAChampionRecordUserInfoData.guild_banner)
}
inline ::std::string* PB_UTAChampionRecordUserInfoData::mutable_guild_banner() {
  set_has_guild_banner();
  if (guild_banner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_banner_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PB_UTAChampionRecordUserInfoData.guild_banner)
  return guild_banner_;
}
inline ::std::string* PB_UTAChampionRecordUserInfoData::release_guild_banner() {
  clear_has_guild_banner();
  if (guild_banner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guild_banner_;
    guild_banner_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PB_UTAChampionRecordUserInfoData::set_allocated_guild_banner(::std::string* guild_banner) {
  if (guild_banner_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guild_banner_;
  }
  if (guild_banner) {
    set_has_guild_banner();
    guild_banner_ = guild_banner;
  } else {
    clear_has_guild_banner();
    guild_banner_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PB_UTAChampionRecordUserInfoData.guild_banner)
}

// optional int32 title_id = 9;
inline bool PB_UTAChampionRecordUserInfoData::has_title_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PB_UTAChampionRecordUserInfoData::set_has_title_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_has_title_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_title_id() {
  title_id_ = 0;
  clear_has_title_id();
}
inline ::google::protobuf::int32 PB_UTAChampionRecordUserInfoData::title_id() const {
  // @@protoc_insertion_point(field_get:PB_UTAChampionRecordUserInfoData.title_id)
  return title_id_;
}
inline void PB_UTAChampionRecordUserInfoData::set_title_id(::google::protobuf::int32 value) {
  set_has_title_id();
  title_id_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAChampionRecordUserInfoData.title_id)
}

// optional int32 facescore_id = 10;
inline bool PB_UTAChampionRecordUserInfoData::has_facescore_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PB_UTAChampionRecordUserInfoData::set_has_facescore_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_has_facescore_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_facescore_id() {
  facescore_id_ = 0;
  clear_has_facescore_id();
}
inline ::google::protobuf::int32 PB_UTAChampionRecordUserInfoData::facescore_id() const {
  // @@protoc_insertion_point(field_get:PB_UTAChampionRecordUserInfoData.facescore_id)
  return facescore_id_;
}
inline void PB_UTAChampionRecordUserInfoData::set_facescore_id(::google::protobuf::int32 value) {
  set_has_facescore_id();
  facescore_id_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAChampionRecordUserInfoData.facescore_id)
}

// optional int32 prof_base = 11;
inline bool PB_UTAChampionRecordUserInfoData::has_prof_base() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PB_UTAChampionRecordUserInfoData::set_has_prof_base() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_has_prof_base() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_prof_base() {
  prof_base_ = 0;
  clear_has_prof_base();
}
inline ::google::protobuf::int32 PB_UTAChampionRecordUserInfoData::prof_base() const {
  // @@protoc_insertion_point(field_get:PB_UTAChampionRecordUserInfoData.prof_base)
  return prof_base_;
}
inline void PB_UTAChampionRecordUserInfoData::set_prof_base(::google::protobuf::int32 value) {
  set_has_prof_base();
  prof_base_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAChampionRecordUserInfoData.prof_base)
}

// optional int32 advance_times = 12;
inline bool PB_UTAChampionRecordUserInfoData::has_advance_times() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PB_UTAChampionRecordUserInfoData::set_has_advance_times() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_has_advance_times() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_advance_times() {
  advance_times_ = 0;
  clear_has_advance_times();
}
inline ::google::protobuf::int32 PB_UTAChampionRecordUserInfoData::advance_times() const {
  // @@protoc_insertion_point(field_get:PB_UTAChampionRecordUserInfoData.advance_times)
  return advance_times_;
}
inline void PB_UTAChampionRecordUserInfoData::set_advance_times(::google::protobuf::int32 value) {
  set_has_advance_times();
  advance_times_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAChampionRecordUserInfoData.advance_times)
}

// optional int32 avatar_type = 13;
inline bool PB_UTAChampionRecordUserInfoData::has_avatar_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PB_UTAChampionRecordUserInfoData::set_has_avatar_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_has_avatar_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_avatar_type() {
  avatar_type_ = 0;
  clear_has_avatar_type();
}
inline ::google::protobuf::int32 PB_UTAChampionRecordUserInfoData::avatar_type() const {
  // @@protoc_insertion_point(field_get:PB_UTAChampionRecordUserInfoData.avatar_type)
  return avatar_type_;
}
inline void PB_UTAChampionRecordUserInfoData::set_avatar_type(::google::protobuf::int32 value) {
  set_has_avatar_type();
  avatar_type_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAChampionRecordUserInfoData.avatar_type)
}

// optional int32 color = 14;
inline bool PB_UTAChampionRecordUserInfoData::has_color() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PB_UTAChampionRecordUserInfoData::set_has_color() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_has_color() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::google::protobuf::int32 PB_UTAChampionRecordUserInfoData::color() const {
  // @@protoc_insertion_point(field_get:PB_UTAChampionRecordUserInfoData.color)
  return color_;
}
inline void PB_UTAChampionRecordUserInfoData::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAChampionRecordUserInfoData.color)
}

// optional int32 weapon_id = 15;
inline bool PB_UTAChampionRecordUserInfoData::has_weapon_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PB_UTAChampionRecordUserInfoData::set_has_weapon_id() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_has_weapon_id() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_weapon_id() {
  weapon_id_ = 0;
  clear_has_weapon_id();
}
inline ::google::protobuf::int32 PB_UTAChampionRecordUserInfoData::weapon_id() const {
  // @@protoc_insertion_point(field_get:PB_UTAChampionRecordUserInfoData.weapon_id)
  return weapon_id_;
}
inline void PB_UTAChampionRecordUserInfoData::set_weapon_id(::google::protobuf::int32 value) {
  set_has_weapon_id();
  weapon_id_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAChampionRecordUserInfoData.weapon_id)
}

// optional int32 sub_weapon_id = 16;
inline bool PB_UTAChampionRecordUserInfoData::has_sub_weapon_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PB_UTAChampionRecordUserInfoData::set_has_sub_weapon_id() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_has_sub_weapon_id() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_sub_weapon_id() {
  sub_weapon_id_ = 0;
  clear_has_sub_weapon_id();
}
inline ::google::protobuf::int32 PB_UTAChampionRecordUserInfoData::sub_weapon_id() const {
  // @@protoc_insertion_point(field_get:PB_UTAChampionRecordUserInfoData.sub_weapon_id)
  return sub_weapon_id_;
}
inline void PB_UTAChampionRecordUserInfoData::set_sub_weapon_id(::google::protobuf::int32 value) {
  set_has_sub_weapon_id();
  sub_weapon_id_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAChampionRecordUserInfoData.sub_weapon_id)
}

// optional int32 headshot_id = 17;
inline bool PB_UTAChampionRecordUserInfoData::has_headshot_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PB_UTAChampionRecordUserInfoData::set_has_headshot_id() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_has_headshot_id() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_headshot_id() {
  headshot_id_ = 0;
  clear_has_headshot_id();
}
inline ::google::protobuf::int32 PB_UTAChampionRecordUserInfoData::headshot_id() const {
  // @@protoc_insertion_point(field_get:PB_UTAChampionRecordUserInfoData.headshot_id)
  return headshot_id_;
}
inline void PB_UTAChampionRecordUserInfoData::set_headshot_id(::google::protobuf::int32 value) {
  set_has_headshot_id();
  headshot_id_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAChampionRecordUserInfoData.headshot_id)
}

// optional int32 special_appearance_type = 18;
inline bool PB_UTAChampionRecordUserInfoData::has_special_appearance_type() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PB_UTAChampionRecordUserInfoData::set_has_special_appearance_type() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_has_special_appearance_type() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_special_appearance_type() {
  special_appearance_type_ = 0;
  clear_has_special_appearance_type();
}
inline ::google::protobuf::int32 PB_UTAChampionRecordUserInfoData::special_appearance_type() const {
  // @@protoc_insertion_point(field_get:PB_UTAChampionRecordUserInfoData.special_appearance_type)
  return special_appearance_type_;
}
inline void PB_UTAChampionRecordUserInfoData::set_special_appearance_type(::google::protobuf::int32 value) {
  set_has_special_appearance_type();
  special_appearance_type_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAChampionRecordUserInfoData.special_appearance_type)
}

// optional int32 special_appearance_param = 19;
inline bool PB_UTAChampionRecordUserInfoData::has_special_appearance_param() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PB_UTAChampionRecordUserInfoData::set_has_special_appearance_param() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_has_special_appearance_param() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_special_appearance_param() {
  special_appearance_param_ = 0;
  clear_has_special_appearance_param();
}
inline ::google::protobuf::int32 PB_UTAChampionRecordUserInfoData::special_appearance_param() const {
  // @@protoc_insertion_point(field_get:PB_UTAChampionRecordUserInfoData.special_appearance_param)
  return special_appearance_param_;
}
inline void PB_UTAChampionRecordUserInfoData::set_special_appearance_param(::google::protobuf::int32 value) {
  set_has_special_appearance_param();
  special_appearance_param_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAChampionRecordUserInfoData.special_appearance_param)
}

// repeated int32 wear_surface = 20;
inline int PB_UTAChampionRecordUserInfoData::wear_surface_size() const {
  return wear_surface_.size();
}
inline void PB_UTAChampionRecordUserInfoData::clear_wear_surface() {
  wear_surface_.Clear();
}
inline ::google::protobuf::int32 PB_UTAChampionRecordUserInfoData::wear_surface(int index) const {
  // @@protoc_insertion_point(field_get:PB_UTAChampionRecordUserInfoData.wear_surface)
  return wear_surface_.Get(index);
}
inline void PB_UTAChampionRecordUserInfoData::set_wear_surface(int index, ::google::protobuf::int32 value) {
  wear_surface_.Set(index, value);
  // @@protoc_insertion_point(field_set:PB_UTAChampionRecordUserInfoData.wear_surface)
}
inline void PB_UTAChampionRecordUserInfoData::add_wear_surface(::google::protobuf::int32 value) {
  wear_surface_.Add(value);
  // @@protoc_insertion_point(field_add:PB_UTAChampionRecordUserInfoData.wear_surface)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_UTAChampionRecordUserInfoData::wear_surface() const {
  // @@protoc_insertion_point(field_list:PB_UTAChampionRecordUserInfoData.wear_surface)
  return wear_surface_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_UTAChampionRecordUserInfoData::mutable_wear_surface() {
  // @@protoc_insertion_point(field_mutable_list:PB_UTAChampionRecordUserInfoData.wear_surface)
  return &wear_surface_;
}

// optional string role_name = 21;
inline bool PB_UTAChampionRecordUserInfoData::has_role_name() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PB_UTAChampionRecordUserInfoData::set_has_role_name() {
  _has_bits_[0] |= 0x00100000u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_has_role_name() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& PB_UTAChampionRecordUserInfoData::role_name() const {
  // @@protoc_insertion_point(field_get:PB_UTAChampionRecordUserInfoData.role_name)
  return *role_name_;
}
inline void PB_UTAChampionRecordUserInfoData::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
  // @@protoc_insertion_point(field_set:PB_UTAChampionRecordUserInfoData.role_name)
}
inline void PB_UTAChampionRecordUserInfoData::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:PB_UTAChampionRecordUserInfoData.role_name)
}
inline void PB_UTAChampionRecordUserInfoData::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PB_UTAChampionRecordUserInfoData.role_name)
}
inline ::std::string* PB_UTAChampionRecordUserInfoData::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    role_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PB_UTAChampionRecordUserInfoData.role_name)
  return role_name_;
}
inline ::std::string* PB_UTAChampionRecordUserInfoData::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PB_UTAChampionRecordUserInfoData::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PB_UTAChampionRecordUserInfoData.role_name)
}

// optional int32 smart_mounts_index = 22;
inline bool PB_UTAChampionRecordUserInfoData::has_smart_mounts_index() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void PB_UTAChampionRecordUserInfoData::set_has_smart_mounts_index() {
  _has_bits_[0] |= 0x00200000u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_has_smart_mounts_index() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_smart_mounts_index() {
  smart_mounts_index_ = 0;
  clear_has_smart_mounts_index();
}
inline ::google::protobuf::int32 PB_UTAChampionRecordUserInfoData::smart_mounts_index() const {
  // @@protoc_insertion_point(field_get:PB_UTAChampionRecordUserInfoData.smart_mounts_index)
  return smart_mounts_index_;
}
inline void PB_UTAChampionRecordUserInfoData::set_smart_mounts_index(::google::protobuf::int32 value) {
  set_has_smart_mounts_index();
  smart_mounts_index_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAChampionRecordUserInfoData.smart_mounts_index)
}

// optional int32 is_use_advanced_flag = 23;
inline bool PB_UTAChampionRecordUserInfoData::has_is_use_advanced_flag() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void PB_UTAChampionRecordUserInfoData::set_has_is_use_advanced_flag() {
  _has_bits_[0] |= 0x00400000u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_has_is_use_advanced_flag() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void PB_UTAChampionRecordUserInfoData::clear_is_use_advanced_flag() {
  is_use_advanced_flag_ = 0;
  clear_has_is_use_advanced_flag();
}
inline ::google::protobuf::int32 PB_UTAChampionRecordUserInfoData::is_use_advanced_flag() const {
  // @@protoc_insertion_point(field_get:PB_UTAChampionRecordUserInfoData.is_use_advanced_flag)
  return is_use_advanced_flag_;
}
inline void PB_UTAChampionRecordUserInfoData::set_is_use_advanced_flag(::google::protobuf::int32 value) {
  set_has_is_use_advanced_flag();
  is_use_advanced_flag_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAChampionRecordUserInfoData.is_use_advanced_flag)
}

// -------------------------------------------------------------------

// PB_UTAChampionRecordUserTeamInfoData

// repeated .PB_UTAChampionRecordUserInfoData user_info = 1;
inline int PB_UTAChampionRecordUserTeamInfoData::user_info_size() const {
  return user_info_.size();
}
inline void PB_UTAChampionRecordUserTeamInfoData::clear_user_info() {
  user_info_.Clear();
}
inline const ::PB_UTAChampionRecordUserInfoData& PB_UTAChampionRecordUserTeamInfoData::user_info(int index) const {
  // @@protoc_insertion_point(field_get:PB_UTAChampionRecordUserTeamInfoData.user_info)
  return user_info_.Get(index);
}
inline ::PB_UTAChampionRecordUserInfoData* PB_UTAChampionRecordUserTeamInfoData::mutable_user_info(int index) {
  // @@protoc_insertion_point(field_mutable:PB_UTAChampionRecordUserTeamInfoData.user_info)
  return user_info_.Mutable(index);
}
inline ::PB_UTAChampionRecordUserInfoData* PB_UTAChampionRecordUserTeamInfoData::add_user_info() {
  // @@protoc_insertion_point(field_add:PB_UTAChampionRecordUserTeamInfoData.user_info)
  return user_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB_UTAChampionRecordUserInfoData >&
PB_UTAChampionRecordUserTeamInfoData::user_info() const {
  // @@protoc_insertion_point(field_list:PB_UTAChampionRecordUserTeamInfoData.user_info)
  return user_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB_UTAChampionRecordUserInfoData >*
PB_UTAChampionRecordUserTeamInfoData::mutable_user_info() {
  // @@protoc_insertion_point(field_mutable_list:PB_UTAChampionRecordUserTeamInfoData.user_info)
  return &user_info_;
}

// -------------------------------------------------------------------

// PB_UTAChampionRecordData

// optional int32 change_state = 1;
inline bool PB_UTAChampionRecordData::has_change_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_UTAChampionRecordData::set_has_change_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB_UTAChampionRecordData::clear_has_change_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB_UTAChampionRecordData::clear_change_state() {
  change_state_ = 0;
  clear_has_change_state();
}
inline ::google::protobuf::int32 PB_UTAChampionRecordData::change_state() const {
  // @@protoc_insertion_point(field_get:PB_UTAChampionRecordData.change_state)
  return change_state_;
}
inline void PB_UTAChampionRecordData::set_change_state(::google::protobuf::int32 value) {
  set_has_change_state();
  change_state_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAChampionRecordData.change_state)
}

// optional int32 rank = 2;
inline bool PB_UTAChampionRecordData::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_UTAChampionRecordData::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PB_UTAChampionRecordData::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PB_UTAChampionRecordData::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 PB_UTAChampionRecordData::rank() const {
  // @@protoc_insertion_point(field_get:PB_UTAChampionRecordData.rank)
  return rank_;
}
inline void PB_UTAChampionRecordData::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:PB_UTAChampionRecordData.rank)
}

// optional bytes team_name = 3;
inline bool PB_UTAChampionRecordData::has_team_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PB_UTAChampionRecordData::set_has_team_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PB_UTAChampionRecordData::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PB_UTAChampionRecordData::clear_team_name() {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_->clear();
  }
  clear_has_team_name();
}
inline const ::std::string& PB_UTAChampionRecordData::team_name() const {
  // @@protoc_insertion_point(field_get:PB_UTAChampionRecordData.team_name)
  return *team_name_;
}
inline void PB_UTAChampionRecordData::set_team_name(const ::std::string& value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
  // @@protoc_insertion_point(field_set:PB_UTAChampionRecordData.team_name)
}
inline void PB_UTAChampionRecordData::set_team_name(const char* value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:PB_UTAChampionRecordData.team_name)
}
inline void PB_UTAChampionRecordData::set_team_name(const void* value, size_t size) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PB_UTAChampionRecordData.team_name)
}
inline ::std::string* PB_UTAChampionRecordData::mutable_team_name() {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PB_UTAChampionRecordData.team_name)
  return team_name_;
}
inline ::std::string* PB_UTAChampionRecordData::release_team_name() {
  clear_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = team_name_;
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PB_UTAChampionRecordData::set_allocated_team_name(::std::string* team_name) {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_name_;
  }
  if (team_name) {
    set_has_team_name();
    team_name_ = team_name;
  } else {
    clear_has_team_name();
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PB_UTAChampionRecordData.team_name)
}

// optional .PB_UTAChampionRecordUserTeamInfoData user_team_info = 4;
inline bool PB_UTAChampionRecordData::has_user_team_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PB_UTAChampionRecordData::set_has_user_team_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PB_UTAChampionRecordData::clear_has_user_team_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PB_UTAChampionRecordData::clear_user_team_info() {
  if (user_team_info_ != NULL) user_team_info_->::PB_UTAChampionRecordUserTeamInfoData::Clear();
  clear_has_user_team_info();
}
inline const ::PB_UTAChampionRecordUserTeamInfoData& PB_UTAChampionRecordData::user_team_info() const {
  // @@protoc_insertion_point(field_get:PB_UTAChampionRecordData.user_team_info)
  return user_team_info_ != NULL ? *user_team_info_ : *default_instance_->user_team_info_;
}
inline ::PB_UTAChampionRecordUserTeamInfoData* PB_UTAChampionRecordData::mutable_user_team_info() {
  set_has_user_team_info();
  if (user_team_info_ == NULL) user_team_info_ = new ::PB_UTAChampionRecordUserTeamInfoData;
  // @@protoc_insertion_point(field_mutable:PB_UTAChampionRecordData.user_team_info)
  return user_team_info_;
}
inline ::PB_UTAChampionRecordUserTeamInfoData* PB_UTAChampionRecordData::release_user_team_info() {
  clear_has_user_team_info();
  ::PB_UTAChampionRecordUserTeamInfoData* temp = user_team_info_;
  user_team_info_ = NULL;
  return temp;
}
inline void PB_UTAChampionRecordData::set_allocated_user_team_info(::PB_UTAChampionRecordUserTeamInfoData* user_team_info) {
  delete user_team_info_;
  user_team_info_ = user_team_info;
  if (user_team_info) {
    set_has_user_team_info();
  } else {
    clear_has_user_team_info();
  }
  // @@protoc_insertion_point(field_set_allocated:PB_UTAChampionRecordData.user_team_info)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_utachampionrecord_5fdata_2eproto__INCLUDED
