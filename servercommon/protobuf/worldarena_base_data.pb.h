// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: worldarena_base_data.proto

#ifndef PROTOBUF_worldarena_5fbase_5fdata_2eproto__INCLUDED
#define PROTOBUF_worldarena_5fbase_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_worldarena_5fbase_5fdata_2eproto();
void protobuf_AssignDesc_worldarena_5fbase_5fdata_2eproto();
void protobuf_ShutdownFile_worldarena_5fbase_5fdata_2eproto();

class PB_WorldArenaBaseData;

// ===================================================================

class PB_WorldArenaBaseData : public ::google::protobuf::Message {
 public:
  PB_WorldArenaBaseData();
  virtual ~PB_WorldArenaBaseData();

  PB_WorldArenaBaseData(const PB_WorldArenaBaseData& from);

  inline PB_WorldArenaBaseData& operator=(const PB_WorldArenaBaseData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PB_WorldArenaBaseData& default_instance();

  void Swap(PB_WorldArenaBaseData* other);

  // implements Message ----------------------------------------------

  PB_WorldArenaBaseData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB_WorldArenaBaseData& from);
  void MergeFrom(const PB_WorldArenaBaseData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cur_status = 1;
  inline bool has_cur_status() const;
  inline void clear_cur_status();
  static const int kCurStatusFieldNumber = 1;
  inline ::google::protobuf::int32 cur_status() const;
  inline void set_cur_status(::google::protobuf::int32 value);

  // optional int32 season_index = 2;
  inline bool has_season_index() const;
  inline void clear_season_index();
  static const int kSeasonIndexFieldNumber = 2;
  inline ::google::protobuf::int32 season_index() const;
  inline void set_season_index(::google::protobuf::int32 value);

  // optional uint32 next_status_timestamp = 3;
  inline bool has_next_status_timestamp() const;
  inline void clear_next_status_timestamp();
  static const int kNextStatusTimestampFieldNumber = 3;
  inline ::google::protobuf::uint32 next_status_timestamp() const;
  inline void set_next_status_timestamp(::google::protobuf::uint32 value);

  // optional uint32 next_signup_status_timestamp = 4;
  inline bool has_next_signup_status_timestamp() const;
  inline void clear_next_signup_status_timestamp();
  static const int kNextSignupStatusTimestampFieldNumber = 4;
  inline ::google::protobuf::uint32 next_signup_status_timestamp() const;
  inline void set_next_signup_status_timestamp(::google::protobuf::uint32 value);

  // optional uint32 next_schedule_status_timestamp = 5;
  inline bool has_next_schedule_status_timestamp() const;
  inline void clear_next_schedule_status_timestamp();
  static const int kNextScheduleStatusTimestampFieldNumber = 5;
  inline ::google::protobuf::uint32 next_schedule_status_timestamp() const;
  inline void set_next_schedule_status_timestamp(::google::protobuf::uint32 value);

  // optional uint32 next_battle_status_timestamp = 6;
  inline bool has_next_battle_status_timestamp() const;
  inline void clear_next_battle_status_timestamp();
  static const int kNextBattleStatusTimestampFieldNumber = 6;
  inline ::google::protobuf::uint32 next_battle_status_timestamp() const;
  inline void set_next_battle_status_timestamp(::google::protobuf::uint32 value);

  // optional uint32 next_calculate_status_timestamp = 7;
  inline bool has_next_calculate_status_timestamp() const;
  inline void clear_next_calculate_status_timestamp();
  static const int kNextCalculateStatusTimestampFieldNumber = 7;
  inline ::google::protobuf::uint32 next_calculate_status_timestamp() const;
  inline void set_next_calculate_status_timestamp(::google::protobuf::uint32 value);

  // optional uint32 next_rest_status_timestamp = 8;
  inline bool has_next_rest_status_timestamp() const;
  inline void clear_next_rest_status_timestamp();
  static const int kNextRestStatusTimestampFieldNumber = 8;
  inline ::google::protobuf::uint32 next_rest_status_timestamp() const;
  inline void set_next_rest_status_timestamp(::google::protobuf::uint32 value);

  // optional int32 robot_index_generator = 9;
  inline bool has_robot_index_generator() const;
  inline void clear_robot_index_generator();
  static const int kRobotIndexGeneratorFieldNumber = 9;
  inline ::google::protobuf::int32 robot_index_generator() const;
  inline void set_robot_index_generator(::google::protobuf::int32 value);

  // optional uint32 round_battle_start_timestamp = 10;
  inline bool has_round_battle_start_timestamp() const;
  inline void clear_round_battle_start_timestamp();
  static const int kRoundBattleStartTimestampFieldNumber = 10;
  inline ::google::protobuf::uint32 round_battle_start_timestamp() const;
  inline void set_round_battle_start_timestamp(::google::protobuf::uint32 value);

  // optional uint32 next_round_battle_start_timestamp = 11;
  inline bool has_next_round_battle_start_timestamp() const;
  inline void clear_next_round_battle_start_timestamp();
  static const int kNextRoundBattleStartTimestampFieldNumber = 11;
  inline ::google::protobuf::uint32 next_round_battle_start_timestamp() const;
  inline void set_next_round_battle_start_timestamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB_WorldArenaBaseData)
 private:
  inline void set_has_cur_status();
  inline void clear_has_cur_status();
  inline void set_has_season_index();
  inline void clear_has_season_index();
  inline void set_has_next_status_timestamp();
  inline void clear_has_next_status_timestamp();
  inline void set_has_next_signup_status_timestamp();
  inline void clear_has_next_signup_status_timestamp();
  inline void set_has_next_schedule_status_timestamp();
  inline void clear_has_next_schedule_status_timestamp();
  inline void set_has_next_battle_status_timestamp();
  inline void clear_has_next_battle_status_timestamp();
  inline void set_has_next_calculate_status_timestamp();
  inline void clear_has_next_calculate_status_timestamp();
  inline void set_has_next_rest_status_timestamp();
  inline void clear_has_next_rest_status_timestamp();
  inline void set_has_robot_index_generator();
  inline void clear_has_robot_index_generator();
  inline void set_has_round_battle_start_timestamp();
  inline void clear_has_round_battle_start_timestamp();
  inline void set_has_next_round_battle_start_timestamp();
  inline void clear_has_next_round_battle_start_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 cur_status_;
  ::google::protobuf::int32 season_index_;
  ::google::protobuf::uint32 next_status_timestamp_;
  ::google::protobuf::uint32 next_signup_status_timestamp_;
  ::google::protobuf::uint32 next_schedule_status_timestamp_;
  ::google::protobuf::uint32 next_battle_status_timestamp_;
  ::google::protobuf::uint32 next_calculate_status_timestamp_;
  ::google::protobuf::uint32 next_rest_status_timestamp_;
  ::google::protobuf::int32 robot_index_generator_;
  ::google::protobuf::uint32 round_battle_start_timestamp_;
  ::google::protobuf::uint32 next_round_battle_start_timestamp_;
  friend void  protobuf_AddDesc_worldarena_5fbase_5fdata_2eproto();
  friend void protobuf_AssignDesc_worldarena_5fbase_5fdata_2eproto();
  friend void protobuf_ShutdownFile_worldarena_5fbase_5fdata_2eproto();

  void InitAsDefaultInstance();
  static PB_WorldArenaBaseData* default_instance_;
};
// ===================================================================


// ===================================================================

// PB_WorldArenaBaseData

// optional int32 cur_status = 1;
inline bool PB_WorldArenaBaseData::has_cur_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_WorldArenaBaseData::set_has_cur_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB_WorldArenaBaseData::clear_has_cur_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB_WorldArenaBaseData::clear_cur_status() {
  cur_status_ = 0;
  clear_has_cur_status();
}
inline ::google::protobuf::int32 PB_WorldArenaBaseData::cur_status() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaBaseData.cur_status)
  return cur_status_;
}
inline void PB_WorldArenaBaseData::set_cur_status(::google::protobuf::int32 value) {
  set_has_cur_status();
  cur_status_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaBaseData.cur_status)
}

// optional int32 season_index = 2;
inline bool PB_WorldArenaBaseData::has_season_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_WorldArenaBaseData::set_has_season_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PB_WorldArenaBaseData::clear_has_season_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PB_WorldArenaBaseData::clear_season_index() {
  season_index_ = 0;
  clear_has_season_index();
}
inline ::google::protobuf::int32 PB_WorldArenaBaseData::season_index() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaBaseData.season_index)
  return season_index_;
}
inline void PB_WorldArenaBaseData::set_season_index(::google::protobuf::int32 value) {
  set_has_season_index();
  season_index_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaBaseData.season_index)
}

// optional uint32 next_status_timestamp = 3;
inline bool PB_WorldArenaBaseData::has_next_status_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PB_WorldArenaBaseData::set_has_next_status_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PB_WorldArenaBaseData::clear_has_next_status_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PB_WorldArenaBaseData::clear_next_status_timestamp() {
  next_status_timestamp_ = 0u;
  clear_has_next_status_timestamp();
}
inline ::google::protobuf::uint32 PB_WorldArenaBaseData::next_status_timestamp() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaBaseData.next_status_timestamp)
  return next_status_timestamp_;
}
inline void PB_WorldArenaBaseData::set_next_status_timestamp(::google::protobuf::uint32 value) {
  set_has_next_status_timestamp();
  next_status_timestamp_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaBaseData.next_status_timestamp)
}

// optional uint32 next_signup_status_timestamp = 4;
inline bool PB_WorldArenaBaseData::has_next_signup_status_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PB_WorldArenaBaseData::set_has_next_signup_status_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PB_WorldArenaBaseData::clear_has_next_signup_status_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PB_WorldArenaBaseData::clear_next_signup_status_timestamp() {
  next_signup_status_timestamp_ = 0u;
  clear_has_next_signup_status_timestamp();
}
inline ::google::protobuf::uint32 PB_WorldArenaBaseData::next_signup_status_timestamp() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaBaseData.next_signup_status_timestamp)
  return next_signup_status_timestamp_;
}
inline void PB_WorldArenaBaseData::set_next_signup_status_timestamp(::google::protobuf::uint32 value) {
  set_has_next_signup_status_timestamp();
  next_signup_status_timestamp_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaBaseData.next_signup_status_timestamp)
}

// optional uint32 next_schedule_status_timestamp = 5;
inline bool PB_WorldArenaBaseData::has_next_schedule_status_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PB_WorldArenaBaseData::set_has_next_schedule_status_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PB_WorldArenaBaseData::clear_has_next_schedule_status_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PB_WorldArenaBaseData::clear_next_schedule_status_timestamp() {
  next_schedule_status_timestamp_ = 0u;
  clear_has_next_schedule_status_timestamp();
}
inline ::google::protobuf::uint32 PB_WorldArenaBaseData::next_schedule_status_timestamp() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaBaseData.next_schedule_status_timestamp)
  return next_schedule_status_timestamp_;
}
inline void PB_WorldArenaBaseData::set_next_schedule_status_timestamp(::google::protobuf::uint32 value) {
  set_has_next_schedule_status_timestamp();
  next_schedule_status_timestamp_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaBaseData.next_schedule_status_timestamp)
}

// optional uint32 next_battle_status_timestamp = 6;
inline bool PB_WorldArenaBaseData::has_next_battle_status_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PB_WorldArenaBaseData::set_has_next_battle_status_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PB_WorldArenaBaseData::clear_has_next_battle_status_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PB_WorldArenaBaseData::clear_next_battle_status_timestamp() {
  next_battle_status_timestamp_ = 0u;
  clear_has_next_battle_status_timestamp();
}
inline ::google::protobuf::uint32 PB_WorldArenaBaseData::next_battle_status_timestamp() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaBaseData.next_battle_status_timestamp)
  return next_battle_status_timestamp_;
}
inline void PB_WorldArenaBaseData::set_next_battle_status_timestamp(::google::protobuf::uint32 value) {
  set_has_next_battle_status_timestamp();
  next_battle_status_timestamp_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaBaseData.next_battle_status_timestamp)
}

// optional uint32 next_calculate_status_timestamp = 7;
inline bool PB_WorldArenaBaseData::has_next_calculate_status_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PB_WorldArenaBaseData::set_has_next_calculate_status_timestamp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PB_WorldArenaBaseData::clear_has_next_calculate_status_timestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PB_WorldArenaBaseData::clear_next_calculate_status_timestamp() {
  next_calculate_status_timestamp_ = 0u;
  clear_has_next_calculate_status_timestamp();
}
inline ::google::protobuf::uint32 PB_WorldArenaBaseData::next_calculate_status_timestamp() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaBaseData.next_calculate_status_timestamp)
  return next_calculate_status_timestamp_;
}
inline void PB_WorldArenaBaseData::set_next_calculate_status_timestamp(::google::protobuf::uint32 value) {
  set_has_next_calculate_status_timestamp();
  next_calculate_status_timestamp_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaBaseData.next_calculate_status_timestamp)
}

// optional uint32 next_rest_status_timestamp = 8;
inline bool PB_WorldArenaBaseData::has_next_rest_status_timestamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PB_WorldArenaBaseData::set_has_next_rest_status_timestamp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PB_WorldArenaBaseData::clear_has_next_rest_status_timestamp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PB_WorldArenaBaseData::clear_next_rest_status_timestamp() {
  next_rest_status_timestamp_ = 0u;
  clear_has_next_rest_status_timestamp();
}
inline ::google::protobuf::uint32 PB_WorldArenaBaseData::next_rest_status_timestamp() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaBaseData.next_rest_status_timestamp)
  return next_rest_status_timestamp_;
}
inline void PB_WorldArenaBaseData::set_next_rest_status_timestamp(::google::protobuf::uint32 value) {
  set_has_next_rest_status_timestamp();
  next_rest_status_timestamp_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaBaseData.next_rest_status_timestamp)
}

// optional int32 robot_index_generator = 9;
inline bool PB_WorldArenaBaseData::has_robot_index_generator() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PB_WorldArenaBaseData::set_has_robot_index_generator() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PB_WorldArenaBaseData::clear_has_robot_index_generator() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PB_WorldArenaBaseData::clear_robot_index_generator() {
  robot_index_generator_ = 0;
  clear_has_robot_index_generator();
}
inline ::google::protobuf::int32 PB_WorldArenaBaseData::robot_index_generator() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaBaseData.robot_index_generator)
  return robot_index_generator_;
}
inline void PB_WorldArenaBaseData::set_robot_index_generator(::google::protobuf::int32 value) {
  set_has_robot_index_generator();
  robot_index_generator_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaBaseData.robot_index_generator)
}

// optional uint32 round_battle_start_timestamp = 10;
inline bool PB_WorldArenaBaseData::has_round_battle_start_timestamp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PB_WorldArenaBaseData::set_has_round_battle_start_timestamp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PB_WorldArenaBaseData::clear_has_round_battle_start_timestamp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PB_WorldArenaBaseData::clear_round_battle_start_timestamp() {
  round_battle_start_timestamp_ = 0u;
  clear_has_round_battle_start_timestamp();
}
inline ::google::protobuf::uint32 PB_WorldArenaBaseData::round_battle_start_timestamp() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaBaseData.round_battle_start_timestamp)
  return round_battle_start_timestamp_;
}
inline void PB_WorldArenaBaseData::set_round_battle_start_timestamp(::google::protobuf::uint32 value) {
  set_has_round_battle_start_timestamp();
  round_battle_start_timestamp_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaBaseData.round_battle_start_timestamp)
}

// optional uint32 next_round_battle_start_timestamp = 11;
inline bool PB_WorldArenaBaseData::has_next_round_battle_start_timestamp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PB_WorldArenaBaseData::set_has_next_round_battle_start_timestamp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PB_WorldArenaBaseData::clear_has_next_round_battle_start_timestamp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PB_WorldArenaBaseData::clear_next_round_battle_start_timestamp() {
  next_round_battle_start_timestamp_ = 0u;
  clear_has_next_round_battle_start_timestamp();
}
inline ::google::protobuf::uint32 PB_WorldArenaBaseData::next_round_battle_start_timestamp() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaBaseData.next_round_battle_start_timestamp)
  return next_round_battle_start_timestamp_;
}
inline void PB_WorldArenaBaseData::set_next_round_battle_start_timestamp(::google::protobuf::uint32 value) {
  set_has_next_round_battle_start_timestamp();
  next_round_battle_start_timestamp_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaBaseData.next_round_battle_start_timestamp)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_worldarena_5fbase_5fdata_2eproto__INCLUDED
