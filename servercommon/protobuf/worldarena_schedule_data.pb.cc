// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: worldarena_schedule_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "worldarena_schedule_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PB_WorldArenaScheduleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_WorldArenaScheduleData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_worldarena_5fschedule_5fdata_2eproto() {
  protobuf_AddDesc_worldarena_5fschedule_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "worldarena_schedule_data.proto");
  GOOGLE_CHECK(file != NULL);
  PB_WorldArenaScheduleData_descriptor_ = file->message_type(0);
  static const int PB_WorldArenaScheduleData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaScheduleData, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaScheduleData, schedule_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaScheduleData, attacker_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaScheduleData, defender_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaScheduleData, round_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaScheduleData, fight_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaScheduleData, check_result_timestamp_),
  };
  PB_WorldArenaScheduleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_WorldArenaScheduleData_descriptor_,
      PB_WorldArenaScheduleData::default_instance_,
      PB_WorldArenaScheduleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaScheduleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaScheduleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_WorldArenaScheduleData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_worldarena_5fschedule_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_WorldArenaScheduleData_descriptor_, &PB_WorldArenaScheduleData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_worldarena_5fschedule_5fdata_2eproto() {
  delete PB_WorldArenaScheduleData::default_instance_;
  delete PB_WorldArenaScheduleData_reflection_;
}

void protobuf_AddDesc_worldarena_5fschedule_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036worldarena_schedule_data.proto\"\273\001\n\031PB_"
    "WorldArenaScheduleData\022\020\n\010group_id\030\001 \001(\003"
    "\022\023\n\013schedule_id\030\002 \001(\003\022\025\n\rattacker_uuid\030\003"
    " \001(\003\022\025\n\rdefender_uuid\030\004 \001(\003\022\023\n\013round_ind"
    "ex\030\005 \001(\005\022\024\n\014fight_result\030\006 \001(\005\022\036\n\026check_"
    "result_timestamp\030\007 \001(\r", 222);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "worldarena_schedule_data.proto", &protobuf_RegisterTypes);
  PB_WorldArenaScheduleData::default_instance_ = new PB_WorldArenaScheduleData();
  PB_WorldArenaScheduleData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_worldarena_5fschedule_5fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_worldarena_5fschedule_5fdata_2eproto {
  StaticDescriptorInitializer_worldarena_5fschedule_5fdata_2eproto() {
    protobuf_AddDesc_worldarena_5fschedule_5fdata_2eproto();
  }
} static_descriptor_initializer_worldarena_5fschedule_5fdata_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PB_WorldArenaScheduleData::kGroupIdFieldNumber;
const int PB_WorldArenaScheduleData::kScheduleIdFieldNumber;
const int PB_WorldArenaScheduleData::kAttackerUuidFieldNumber;
const int PB_WorldArenaScheduleData::kDefenderUuidFieldNumber;
const int PB_WorldArenaScheduleData::kRoundIndexFieldNumber;
const int PB_WorldArenaScheduleData::kFightResultFieldNumber;
const int PB_WorldArenaScheduleData::kCheckResultTimestampFieldNumber;
#endif  // !_MSC_VER

PB_WorldArenaScheduleData::PB_WorldArenaScheduleData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PB_WorldArenaScheduleData)
}

void PB_WorldArenaScheduleData::InitAsDefaultInstance() {
}

PB_WorldArenaScheduleData::PB_WorldArenaScheduleData(const PB_WorldArenaScheduleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PB_WorldArenaScheduleData)
}

void PB_WorldArenaScheduleData::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = GOOGLE_LONGLONG(0);
  schedule_id_ = GOOGLE_LONGLONG(0);
  attacker_uuid_ = GOOGLE_LONGLONG(0);
  defender_uuid_ = GOOGLE_LONGLONG(0);
  round_index_ = 0;
  fight_result_ = 0;
  check_result_timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_WorldArenaScheduleData::~PB_WorldArenaScheduleData() {
  // @@protoc_insertion_point(destructor:PB_WorldArenaScheduleData)
  SharedDtor();
}

void PB_WorldArenaScheduleData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_WorldArenaScheduleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_WorldArenaScheduleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_WorldArenaScheduleData_descriptor_;
}

const PB_WorldArenaScheduleData& PB_WorldArenaScheduleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worldarena_5fschedule_5fdata_2eproto();
  return *default_instance_;
}

PB_WorldArenaScheduleData* PB_WorldArenaScheduleData::default_instance_ = NULL;

PB_WorldArenaScheduleData* PB_WorldArenaScheduleData::New() const {
  return new PB_WorldArenaScheduleData;
}

void PB_WorldArenaScheduleData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PB_WorldArenaScheduleData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(group_id_, check_result_timestamp_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_WorldArenaScheduleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PB_WorldArenaScheduleData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_schedule_id;
        break;
      }

      // optional int64 schedule_id = 2;
      case 2: {
        if (tag == 16) {
         parse_schedule_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &schedule_id_)));
          set_has_schedule_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_attacker_uuid;
        break;
      }

      // optional int64 attacker_uuid = 3;
      case 3: {
        if (tag == 24) {
         parse_attacker_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &attacker_uuid_)));
          set_has_attacker_uuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_defender_uuid;
        break;
      }

      // optional int64 defender_uuid = 4;
      case 4: {
        if (tag == 32) {
         parse_defender_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &defender_uuid_)));
          set_has_defender_uuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_round_index;
        break;
      }

      // optional int32 round_index = 5;
      case 5: {
        if (tag == 40) {
         parse_round_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_index_)));
          set_has_round_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_fight_result;
        break;
      }

      // optional int32 fight_result = 6;
      case 6: {
        if (tag == 48) {
         parse_fight_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_result_)));
          set_has_fight_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_check_result_timestamp;
        break;
      }

      // optional uint32 check_result_timestamp = 7;
      case 7: {
        if (tag == 56) {
         parse_check_result_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &check_result_timestamp_)));
          set_has_check_result_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PB_WorldArenaScheduleData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PB_WorldArenaScheduleData)
  return false;
#undef DO_
}

void PB_WorldArenaScheduleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PB_WorldArenaScheduleData)
  // optional int64 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->group_id(), output);
  }

  // optional int64 schedule_id = 2;
  if (has_schedule_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->schedule_id(), output);
  }

  // optional int64 attacker_uuid = 3;
  if (has_attacker_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->attacker_uuid(), output);
  }

  // optional int64 defender_uuid = 4;
  if (has_defender_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->defender_uuid(), output);
  }

  // optional int32 round_index = 5;
  if (has_round_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->round_index(), output);
  }

  // optional int32 fight_result = 6;
  if (has_fight_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fight_result(), output);
  }

  // optional uint32 check_result_timestamp = 7;
  if (has_check_result_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->check_result_timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PB_WorldArenaScheduleData)
}

::google::protobuf::uint8* PB_WorldArenaScheduleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_WorldArenaScheduleData)
  // optional int64 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->group_id(), target);
  }

  // optional int64 schedule_id = 2;
  if (has_schedule_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->schedule_id(), target);
  }

  // optional int64 attacker_uuid = 3;
  if (has_attacker_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->attacker_uuid(), target);
  }

  // optional int64 defender_uuid = 4;
  if (has_defender_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->defender_uuid(), target);
  }

  // optional int32 round_index = 5;
  if (has_round_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->round_index(), target);
  }

  // optional int32 fight_result = 6;
  if (has_fight_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->fight_result(), target);
  }

  // optional uint32 check_result_timestamp = 7;
  if (has_check_result_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->check_result_timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_WorldArenaScheduleData)
  return target;
}

int PB_WorldArenaScheduleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->group_id());
    }

    // optional int64 schedule_id = 2;
    if (has_schedule_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->schedule_id());
    }

    // optional int64 attacker_uuid = 3;
    if (has_attacker_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->attacker_uuid());
    }

    // optional int64 defender_uuid = 4;
    if (has_defender_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->defender_uuid());
    }

    // optional int32 round_index = 5;
    if (has_round_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round_index());
    }

    // optional int32 fight_result = 6;
    if (has_fight_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight_result());
    }

    // optional uint32 check_result_timestamp = 7;
    if (has_check_result_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->check_result_timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_WorldArenaScheduleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_WorldArenaScheduleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_WorldArenaScheduleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_WorldArenaScheduleData::MergeFrom(const PB_WorldArenaScheduleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_schedule_id()) {
      set_schedule_id(from.schedule_id());
    }
    if (from.has_attacker_uuid()) {
      set_attacker_uuid(from.attacker_uuid());
    }
    if (from.has_defender_uuid()) {
      set_defender_uuid(from.defender_uuid());
    }
    if (from.has_round_index()) {
      set_round_index(from.round_index());
    }
    if (from.has_fight_result()) {
      set_fight_result(from.fight_result());
    }
    if (from.has_check_result_timestamp()) {
      set_check_result_timestamp(from.check_result_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_WorldArenaScheduleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_WorldArenaScheduleData::CopyFrom(const PB_WorldArenaScheduleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_WorldArenaScheduleData::IsInitialized() const {

  return true;
}

void PB_WorldArenaScheduleData::Swap(PB_WorldArenaScheduleData* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(schedule_id_, other->schedule_id_);
    std::swap(attacker_uuid_, other->attacker_uuid_);
    std::swap(defender_uuid_, other->defender_uuid_);
    std::swap(round_index_, other->round_index_);
    std::swap(fight_result_, other->fight_result_);
    std::swap(check_result_timestamp_, other->check_result_timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_WorldArenaScheduleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_WorldArenaScheduleData_descriptor_;
  metadata.reflection = PB_WorldArenaScheduleData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
