// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: worldarena_schedule_data.proto

#ifndef PROTOBUF_worldarena_5fschedule_5fdata_2eproto__INCLUDED
#define PROTOBUF_worldarena_5fschedule_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_worldarena_5fschedule_5fdata_2eproto();
void protobuf_AssignDesc_worldarena_5fschedule_5fdata_2eproto();
void protobuf_ShutdownFile_worldarena_5fschedule_5fdata_2eproto();

class PB_WorldArenaScheduleData;

// ===================================================================

class PB_WorldArenaScheduleData : public ::google::protobuf::Message {
 public:
  PB_WorldArenaScheduleData();
  virtual ~PB_WorldArenaScheduleData();

  PB_WorldArenaScheduleData(const PB_WorldArenaScheduleData& from);

  inline PB_WorldArenaScheduleData& operator=(const PB_WorldArenaScheduleData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PB_WorldArenaScheduleData& default_instance();

  void Swap(PB_WorldArenaScheduleData* other);

  // implements Message ----------------------------------------------

  PB_WorldArenaScheduleData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB_WorldArenaScheduleData& from);
  void MergeFrom(const PB_WorldArenaScheduleData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::int64 group_id() const;
  inline void set_group_id(::google::protobuf::int64 value);

  // optional int64 schedule_id = 2;
  inline bool has_schedule_id() const;
  inline void clear_schedule_id();
  static const int kScheduleIdFieldNumber = 2;
  inline ::google::protobuf::int64 schedule_id() const;
  inline void set_schedule_id(::google::protobuf::int64 value);

  // optional int64 attacker_uuid = 3;
  inline bool has_attacker_uuid() const;
  inline void clear_attacker_uuid();
  static const int kAttackerUuidFieldNumber = 3;
  inline ::google::protobuf::int64 attacker_uuid() const;
  inline void set_attacker_uuid(::google::protobuf::int64 value);

  // optional int64 defender_uuid = 4;
  inline bool has_defender_uuid() const;
  inline void clear_defender_uuid();
  static const int kDefenderUuidFieldNumber = 4;
  inline ::google::protobuf::int64 defender_uuid() const;
  inline void set_defender_uuid(::google::protobuf::int64 value);

  // optional int32 round_index = 5;
  inline bool has_round_index() const;
  inline void clear_round_index();
  static const int kRoundIndexFieldNumber = 5;
  inline ::google::protobuf::int32 round_index() const;
  inline void set_round_index(::google::protobuf::int32 value);

  // optional int32 fight_result = 6;
  inline bool has_fight_result() const;
  inline void clear_fight_result();
  static const int kFightResultFieldNumber = 6;
  inline ::google::protobuf::int32 fight_result() const;
  inline void set_fight_result(::google::protobuf::int32 value);

  // optional uint32 check_result_timestamp = 7;
  inline bool has_check_result_timestamp() const;
  inline void clear_check_result_timestamp();
  static const int kCheckResultTimestampFieldNumber = 7;
  inline ::google::protobuf::uint32 check_result_timestamp() const;
  inline void set_check_result_timestamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB_WorldArenaScheduleData)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_schedule_id();
  inline void clear_has_schedule_id();
  inline void set_has_attacker_uuid();
  inline void clear_has_attacker_uuid();
  inline void set_has_defender_uuid();
  inline void clear_has_defender_uuid();
  inline void set_has_round_index();
  inline void clear_has_round_index();
  inline void set_has_fight_result();
  inline void clear_has_fight_result();
  inline void set_has_check_result_timestamp();
  inline void clear_has_check_result_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 group_id_;
  ::google::protobuf::int64 schedule_id_;
  ::google::protobuf::int64 attacker_uuid_;
  ::google::protobuf::int64 defender_uuid_;
  ::google::protobuf::int32 round_index_;
  ::google::protobuf::int32 fight_result_;
  ::google::protobuf::uint32 check_result_timestamp_;
  friend void  protobuf_AddDesc_worldarena_5fschedule_5fdata_2eproto();
  friend void protobuf_AssignDesc_worldarena_5fschedule_5fdata_2eproto();
  friend void protobuf_ShutdownFile_worldarena_5fschedule_5fdata_2eproto();

  void InitAsDefaultInstance();
  static PB_WorldArenaScheduleData* default_instance_;
};
// ===================================================================


// ===================================================================

// PB_WorldArenaScheduleData

// optional int64 group_id = 1;
inline bool PB_WorldArenaScheduleData::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_WorldArenaScheduleData::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB_WorldArenaScheduleData::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB_WorldArenaScheduleData::clear_group_id() {
  group_id_ = GOOGLE_LONGLONG(0);
  clear_has_group_id();
}
inline ::google::protobuf::int64 PB_WorldArenaScheduleData::group_id() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaScheduleData.group_id)
  return group_id_;
}
inline void PB_WorldArenaScheduleData::set_group_id(::google::protobuf::int64 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaScheduleData.group_id)
}

// optional int64 schedule_id = 2;
inline bool PB_WorldArenaScheduleData::has_schedule_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_WorldArenaScheduleData::set_has_schedule_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PB_WorldArenaScheduleData::clear_has_schedule_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PB_WorldArenaScheduleData::clear_schedule_id() {
  schedule_id_ = GOOGLE_LONGLONG(0);
  clear_has_schedule_id();
}
inline ::google::protobuf::int64 PB_WorldArenaScheduleData::schedule_id() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaScheduleData.schedule_id)
  return schedule_id_;
}
inline void PB_WorldArenaScheduleData::set_schedule_id(::google::protobuf::int64 value) {
  set_has_schedule_id();
  schedule_id_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaScheduleData.schedule_id)
}

// optional int64 attacker_uuid = 3;
inline bool PB_WorldArenaScheduleData::has_attacker_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PB_WorldArenaScheduleData::set_has_attacker_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PB_WorldArenaScheduleData::clear_has_attacker_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PB_WorldArenaScheduleData::clear_attacker_uuid() {
  attacker_uuid_ = GOOGLE_LONGLONG(0);
  clear_has_attacker_uuid();
}
inline ::google::protobuf::int64 PB_WorldArenaScheduleData::attacker_uuid() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaScheduleData.attacker_uuid)
  return attacker_uuid_;
}
inline void PB_WorldArenaScheduleData::set_attacker_uuid(::google::protobuf::int64 value) {
  set_has_attacker_uuid();
  attacker_uuid_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaScheduleData.attacker_uuid)
}

// optional int64 defender_uuid = 4;
inline bool PB_WorldArenaScheduleData::has_defender_uuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PB_WorldArenaScheduleData::set_has_defender_uuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PB_WorldArenaScheduleData::clear_has_defender_uuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PB_WorldArenaScheduleData::clear_defender_uuid() {
  defender_uuid_ = GOOGLE_LONGLONG(0);
  clear_has_defender_uuid();
}
inline ::google::protobuf::int64 PB_WorldArenaScheduleData::defender_uuid() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaScheduleData.defender_uuid)
  return defender_uuid_;
}
inline void PB_WorldArenaScheduleData::set_defender_uuid(::google::protobuf::int64 value) {
  set_has_defender_uuid();
  defender_uuid_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaScheduleData.defender_uuid)
}

// optional int32 round_index = 5;
inline bool PB_WorldArenaScheduleData::has_round_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PB_WorldArenaScheduleData::set_has_round_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PB_WorldArenaScheduleData::clear_has_round_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PB_WorldArenaScheduleData::clear_round_index() {
  round_index_ = 0;
  clear_has_round_index();
}
inline ::google::protobuf::int32 PB_WorldArenaScheduleData::round_index() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaScheduleData.round_index)
  return round_index_;
}
inline void PB_WorldArenaScheduleData::set_round_index(::google::protobuf::int32 value) {
  set_has_round_index();
  round_index_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaScheduleData.round_index)
}

// optional int32 fight_result = 6;
inline bool PB_WorldArenaScheduleData::has_fight_result() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PB_WorldArenaScheduleData::set_has_fight_result() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PB_WorldArenaScheduleData::clear_has_fight_result() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PB_WorldArenaScheduleData::clear_fight_result() {
  fight_result_ = 0;
  clear_has_fight_result();
}
inline ::google::protobuf::int32 PB_WorldArenaScheduleData::fight_result() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaScheduleData.fight_result)
  return fight_result_;
}
inline void PB_WorldArenaScheduleData::set_fight_result(::google::protobuf::int32 value) {
  set_has_fight_result();
  fight_result_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaScheduleData.fight_result)
}

// optional uint32 check_result_timestamp = 7;
inline bool PB_WorldArenaScheduleData::has_check_result_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PB_WorldArenaScheduleData::set_has_check_result_timestamp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PB_WorldArenaScheduleData::clear_has_check_result_timestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PB_WorldArenaScheduleData::clear_check_result_timestamp() {
  check_result_timestamp_ = 0u;
  clear_has_check_result_timestamp();
}
inline ::google::protobuf::uint32 PB_WorldArenaScheduleData::check_result_timestamp() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaScheduleData.check_result_timestamp)
  return check_result_timestamp_;
}
inline void PB_WorldArenaScheduleData::set_check_result_timestamp(::google::protobuf::uint32 value) {
  set_has_check_result_timestamp();
  check_result_timestamp_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaScheduleData.check_result_timestamp)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_worldarena_5fschedule_5fdata_2eproto__INCLUDED
