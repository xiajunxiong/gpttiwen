// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: worldarena_user_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "worldarena_user_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PB_WorldArenaUserSignupData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_WorldArenaUserSignupData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_WorldArenaUserScoreData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_WorldArenaUserScoreData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_WorldArenaUserScheduleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_WorldArenaUserScheduleData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_WorldArenaUserData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_WorldArenaUserData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_worldarena_5fuser_5fdata_2eproto() {
  protobuf_AddDesc_worldarena_5fuser_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "worldarena_user_data.proto");
  GOOGLE_CHECK(file != NULL);
  PB_WorldArenaUserSignupData_descriptor_ = file->message_type(0);
  static const int PB_WorldArenaUserSignupData_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaUserSignupData, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaUserSignupData, plat_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaUserSignupData, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaUserSignupData, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaUserSignupData, avatar_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaUserSignupData, headshot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaUserSignupData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaUserSignupData, season_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaUserSignupData, top_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaUserSignupData, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaUserSignupData, guild_name_),
  };
  PB_WorldArenaUserSignupData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_WorldArenaUserSignupData_descriptor_,
      PB_WorldArenaUserSignupData::default_instance_,
      PB_WorldArenaUserSignupData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaUserSignupData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaUserSignupData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_WorldArenaUserSignupData));
  PB_WorldArenaUserScoreData_descriptor_ = file->message_type(1);
  static const int PB_WorldArenaUserScoreData_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaUserScoreData, win_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaUserScoreData, lose_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaUserScoreData, draw_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaUserScoreData, total_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaUserScoreData, win_box_reward_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaUserScoreData, giveup_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaUserScoreData, today_giveup_notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaUserScoreData, total_battle_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaUserScoreData, has_fetch_signup_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaUserScoreData, daily_reward_fetch_flag_),
  };
  PB_WorldArenaUserScoreData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_WorldArenaUserScoreData_descriptor_,
      PB_WorldArenaUserScoreData::default_instance_,
      PB_WorldArenaUserScoreData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaUserScoreData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaUserScoreData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_WorldArenaUserScoreData));
  PB_WorldArenaUserScheduleData_descriptor_ = file->message_type(2);
  static const int PB_WorldArenaUserScheduleData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaUserScheduleData, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaUserScheduleData, schedule_list_),
  };
  PB_WorldArenaUserScheduleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_WorldArenaUserScheduleData_descriptor_,
      PB_WorldArenaUserScheduleData::default_instance_,
      PB_WorldArenaUserScheduleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaUserScheduleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaUserScheduleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_WorldArenaUserScheduleData));
  PB_WorldArenaUserData_descriptor_ = file->message_type(3);
  static const int PB_WorldArenaUserData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaUserData, signup_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaUserData, score_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaUserData, schedule_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaUserData, role_battle_data_),
  };
  PB_WorldArenaUserData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_WorldArenaUserData_descriptor_,
      PB_WorldArenaUserData::default_instance_,
      PB_WorldArenaUserData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaUserData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_WorldArenaUserData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_WorldArenaUserData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_worldarena_5fuser_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_WorldArenaUserSignupData_descriptor_, &PB_WorldArenaUserSignupData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_WorldArenaUserScoreData_descriptor_, &PB_WorldArenaUserScoreData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_WorldArenaUserScheduleData_descriptor_, &PB_WorldArenaUserScheduleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_WorldArenaUserData_descriptor_, &PB_WorldArenaUserData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_worldarena_5fuser_5fdata_2eproto() {
  delete PB_WorldArenaUserSignupData::default_instance_;
  delete PB_WorldArenaUserSignupData_reflection_;
  delete PB_WorldArenaUserScoreData::default_instance_;
  delete PB_WorldArenaUserScoreData_reflection_;
  delete PB_WorldArenaUserScheduleData::default_instance_;
  delete PB_WorldArenaUserScheduleData_reflection_;
  delete PB_WorldArenaUserData::default_instance_;
  delete PB_WorldArenaUserData_reflection_;
}

void protobuf_AddDesc_worldarena_5fuser_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_role_5fbattle_5fdata_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032worldarena_user_data.proto\032\026role_battl"
    "e_data.proto\"\350\001\n\033PB_WorldArenaUserSignup"
    "Data\022\013\n\003uid\030\001 \001(\005\022\021\n\tplat_type\030\002 \001(\005\022\014\n\004"
    "uuid\030\003 \001(\003\022\022\n\nprofession\030\004 \001(\005\022\023\n\013avatar"
    "_type\030\005 \001(\005\022\023\n\013headshot_id\030\006 \001(\005\022\r\n\005leve"
    "l\030\007 \001(\005\022\024\n\014season_index\030\010 \001(\005\022\021\n\ttop_lev"
    "el\030\t \001(\005\022\021\n\trole_name\030\n \001(\t\022\022\n\nguild_nam"
    "e\030\013 \001(\t\"\222\002\n\032PB_WorldArenaUserScoreData\022\017"
    "\n\007win_num\030\001 \001(\005\022\020\n\010lose_num\030\002 \001(\005\022\020\n\010dra"
    "w_num\030\003 \001(\005\022\023\n\013total_score\030\004 \001(\005\022\033\n\023win_"
    "box_reward_flag\030\005 \001(\005\022\022\n\ngiveup_num\030\006 \001("
    "\005\022\033\n\023today_giveup_notice\030\007 \001(\010\022\032\n\022total_"
    "battle_round\030\010 \001(\005\022\037\n\027has_fetch_signup_r"
    "eward\030\t \001(\010\022\037\n\027daily_reward_fetch_flag\030\n"
    " \001(\005\"H\n\035PB_WorldArenaUserScheduleData\022\020\n"
    "\010group_id\030\001 \001(\003\022\025\n\rschedule_list\030\002 \003(\003\"\340"
    "\001\n\025PB_WorldArenaUserData\0221\n\013signup_data\030"
    "\001 \001(\0132\034.PB_WorldArenaUserSignupData\022/\n\ns"
    "core_data\030\002 \001(\0132\033.PB_WorldArenaUserScore"
    "Data\0225\n\rschedule_data\030\003 \001(\0132\036.PB_WorldAr"
    "enaUserScheduleData\022,\n\020role_battle_data\030"
    "\004 \001(\0132\022.PB_RoleBattleData", 865);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "worldarena_user_data.proto", &protobuf_RegisterTypes);
  PB_WorldArenaUserSignupData::default_instance_ = new PB_WorldArenaUserSignupData();
  PB_WorldArenaUserScoreData::default_instance_ = new PB_WorldArenaUserScoreData();
  PB_WorldArenaUserScheduleData::default_instance_ = new PB_WorldArenaUserScheduleData();
  PB_WorldArenaUserData::default_instance_ = new PB_WorldArenaUserData();
  PB_WorldArenaUserSignupData::default_instance_->InitAsDefaultInstance();
  PB_WorldArenaUserScoreData::default_instance_->InitAsDefaultInstance();
  PB_WorldArenaUserScheduleData::default_instance_->InitAsDefaultInstance();
  PB_WorldArenaUserData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_worldarena_5fuser_5fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_worldarena_5fuser_5fdata_2eproto {
  StaticDescriptorInitializer_worldarena_5fuser_5fdata_2eproto() {
    protobuf_AddDesc_worldarena_5fuser_5fdata_2eproto();
  }
} static_descriptor_initializer_worldarena_5fuser_5fdata_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PB_WorldArenaUserSignupData::kUidFieldNumber;
const int PB_WorldArenaUserSignupData::kPlatTypeFieldNumber;
const int PB_WorldArenaUserSignupData::kUuidFieldNumber;
const int PB_WorldArenaUserSignupData::kProfessionFieldNumber;
const int PB_WorldArenaUserSignupData::kAvatarTypeFieldNumber;
const int PB_WorldArenaUserSignupData::kHeadshotIdFieldNumber;
const int PB_WorldArenaUserSignupData::kLevelFieldNumber;
const int PB_WorldArenaUserSignupData::kSeasonIndexFieldNumber;
const int PB_WorldArenaUserSignupData::kTopLevelFieldNumber;
const int PB_WorldArenaUserSignupData::kRoleNameFieldNumber;
const int PB_WorldArenaUserSignupData::kGuildNameFieldNumber;
#endif  // !_MSC_VER

PB_WorldArenaUserSignupData::PB_WorldArenaUserSignupData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PB_WorldArenaUserSignupData)
}

void PB_WorldArenaUserSignupData::InitAsDefaultInstance() {
}

PB_WorldArenaUserSignupData::PB_WorldArenaUserSignupData(const PB_WorldArenaUserSignupData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PB_WorldArenaUserSignupData)
}

void PB_WorldArenaUserSignupData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0;
  plat_type_ = 0;
  uuid_ = GOOGLE_LONGLONG(0);
  profession_ = 0;
  avatar_type_ = 0;
  headshot_id_ = 0;
  level_ = 0;
  season_index_ = 0;
  top_level_ = 0;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_WorldArenaUserSignupData::~PB_WorldArenaUserSignupData() {
  // @@protoc_insertion_point(destructor:PB_WorldArenaUserSignupData)
  SharedDtor();
}

void PB_WorldArenaUserSignupData::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete role_name_;
  }
  if (guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guild_name_;
  }
  if (this != default_instance_) {
  }
}

void PB_WorldArenaUserSignupData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_WorldArenaUserSignupData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_WorldArenaUserSignupData_descriptor_;
}

const PB_WorldArenaUserSignupData& PB_WorldArenaUserSignupData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worldarena_5fuser_5fdata_2eproto();
  return *default_instance_;
}

PB_WorldArenaUserSignupData* PB_WorldArenaUserSignupData::default_instance_ = NULL;

PB_WorldArenaUserSignupData* PB_WorldArenaUserSignupData::New() const {
  return new PB_WorldArenaUserSignupData;
}

void PB_WorldArenaUserSignupData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PB_WorldArenaUserSignupData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uid_, season_index_);
  }
  if (_has_bits_[8 / 32] & 1792) {
    top_level_ = 0;
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        role_name_->clear();
      }
    }
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guild_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_WorldArenaUserSignupData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PB_WorldArenaUserSignupData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_plat_type;
        break;
      }

      // optional int32 plat_type = 2;
      case 2: {
        if (tag == 16) {
         parse_plat_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plat_type_)));
          set_has_plat_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uuid;
        break;
      }

      // optional int64 uuid = 3;
      case 3: {
        if (tag == 24) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_profession;
        break;
      }

      // optional int32 profession = 4;
      case 4: {
        if (tag == 32) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_avatar_type;
        break;
      }

      // optional int32 avatar_type = 5;
      case 5: {
        if (tag == 40) {
         parse_avatar_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avatar_type_)));
          set_has_avatar_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_headshot_id;
        break;
      }

      // optional int32 headshot_id = 6;
      case 6: {
        if (tag == 48) {
         parse_headshot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headshot_id_)));
          set_has_headshot_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional int32 level = 7;
      case 7: {
        if (tag == 56) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_season_index;
        break;
      }

      // optional int32 season_index = 8;
      case 8: {
        if (tag == 64) {
         parse_season_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &season_index_)));
          set_has_season_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_top_level;
        break;
      }

      // optional int32 top_level = 9;
      case 9: {
        if (tag == 72) {
         parse_top_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_level_)));
          set_has_top_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_role_name;
        break;
      }

      // optional string role_name = 10;
      case 10: {
        if (tag == 82) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "role_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_guild_name;
        break;
      }

      // optional string guild_name = 11;
      case 11: {
        if (tag == 90) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guild_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PB_WorldArenaUserSignupData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PB_WorldArenaUserSignupData)
  return false;
#undef DO_
}

void PB_WorldArenaUserSignupData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PB_WorldArenaUserSignupData)
  // optional int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int32 plat_type = 2;
  if (has_plat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->plat_type(), output);
  }

  // optional int64 uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->uuid(), output);
  }

  // optional int32 profession = 4;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->profession(), output);
  }

  // optional int32 avatar_type = 5;
  if (has_avatar_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->avatar_type(), output);
  }

  // optional int32 headshot_id = 6;
  if (has_headshot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->headshot_id(), output);
  }

  // optional int32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->level(), output);
  }

  // optional int32 season_index = 8;
  if (has_season_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->season_index(), output);
  }

  // optional int32 top_level = 9;
  if (has_top_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->top_level(), output);
  }

  // optional string role_name = 10;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "role_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->role_name(), output);
  }

  // optional string guild_name = 11;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guild_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->guild_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PB_WorldArenaUserSignupData)
}

::google::protobuf::uint8* PB_WorldArenaUserSignupData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_WorldArenaUserSignupData)
  // optional int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int32 plat_type = 2;
  if (has_plat_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->plat_type(), target);
  }

  // optional int64 uuid = 3;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->uuid(), target);
  }

  // optional int32 profession = 4;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->profession(), target);
  }

  // optional int32 avatar_type = 5;
  if (has_avatar_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->avatar_type(), target);
  }

  // optional int32 headshot_id = 6;
  if (has_headshot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->headshot_id(), target);
  }

  // optional int32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->level(), target);
  }

  // optional int32 season_index = 8;
  if (has_season_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->season_index(), target);
  }

  // optional int32 top_level = 9;
  if (has_top_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->top_level(), target);
  }

  // optional string role_name = 10;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "role_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->role_name(), target);
  }

  // optional string guild_name = 11;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guild_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->guild_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_WorldArenaUserSignupData)
  return target;
}

int PB_WorldArenaUserSignupData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 plat_type = 2;
    if (has_plat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plat_type());
    }

    // optional int64 uuid = 3;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uuid());
    }

    // optional int32 profession = 4;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

    // optional int32 avatar_type = 5;
    if (has_avatar_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avatar_type());
    }

    // optional int32 headshot_id = 6;
    if (has_headshot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headshot_id());
    }

    // optional int32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 season_index = 8;
    if (has_season_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->season_index());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 top_level = 9;
    if (has_top_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->top_level());
    }

    // optional string role_name = 10;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional string guild_name = 11;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_WorldArenaUserSignupData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_WorldArenaUserSignupData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_WorldArenaUserSignupData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_WorldArenaUserSignupData::MergeFrom(const PB_WorldArenaUserSignupData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_plat_type()) {
      set_plat_type(from.plat_type());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_avatar_type()) {
      set_avatar_type(from.avatar_type());
    }
    if (from.has_headshot_id()) {
      set_headshot_id(from.headshot_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_season_index()) {
      set_season_index(from.season_index());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_top_level()) {
      set_top_level(from.top_level());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_WorldArenaUserSignupData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_WorldArenaUserSignupData::CopyFrom(const PB_WorldArenaUserSignupData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_WorldArenaUserSignupData::IsInitialized() const {

  return true;
}

void PB_WorldArenaUserSignupData::Swap(PB_WorldArenaUserSignupData* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(plat_type_, other->plat_type_);
    std::swap(uuid_, other->uuid_);
    std::swap(profession_, other->profession_);
    std::swap(avatar_type_, other->avatar_type_);
    std::swap(headshot_id_, other->headshot_id_);
    std::swap(level_, other->level_);
    std::swap(season_index_, other->season_index_);
    std::swap(top_level_, other->top_level_);
    std::swap(role_name_, other->role_name_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_WorldArenaUserSignupData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_WorldArenaUserSignupData_descriptor_;
  metadata.reflection = PB_WorldArenaUserSignupData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_WorldArenaUserScoreData::kWinNumFieldNumber;
const int PB_WorldArenaUserScoreData::kLoseNumFieldNumber;
const int PB_WorldArenaUserScoreData::kDrawNumFieldNumber;
const int PB_WorldArenaUserScoreData::kTotalScoreFieldNumber;
const int PB_WorldArenaUserScoreData::kWinBoxRewardFlagFieldNumber;
const int PB_WorldArenaUserScoreData::kGiveupNumFieldNumber;
const int PB_WorldArenaUserScoreData::kTodayGiveupNoticeFieldNumber;
const int PB_WorldArenaUserScoreData::kTotalBattleRoundFieldNumber;
const int PB_WorldArenaUserScoreData::kHasFetchSignupRewardFieldNumber;
const int PB_WorldArenaUserScoreData::kDailyRewardFetchFlagFieldNumber;
#endif  // !_MSC_VER

PB_WorldArenaUserScoreData::PB_WorldArenaUserScoreData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PB_WorldArenaUserScoreData)
}

void PB_WorldArenaUserScoreData::InitAsDefaultInstance() {
}

PB_WorldArenaUserScoreData::PB_WorldArenaUserScoreData(const PB_WorldArenaUserScoreData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PB_WorldArenaUserScoreData)
}

void PB_WorldArenaUserScoreData::SharedCtor() {
  _cached_size_ = 0;
  win_num_ = 0;
  lose_num_ = 0;
  draw_num_ = 0;
  total_score_ = 0;
  win_box_reward_flag_ = 0;
  giveup_num_ = 0;
  today_giveup_notice_ = false;
  total_battle_round_ = 0;
  has_fetch_signup_reward_ = false;
  daily_reward_fetch_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_WorldArenaUserScoreData::~PB_WorldArenaUserScoreData() {
  // @@protoc_insertion_point(destructor:PB_WorldArenaUserScoreData)
  SharedDtor();
}

void PB_WorldArenaUserScoreData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_WorldArenaUserScoreData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_WorldArenaUserScoreData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_WorldArenaUserScoreData_descriptor_;
}

const PB_WorldArenaUserScoreData& PB_WorldArenaUserScoreData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worldarena_5fuser_5fdata_2eproto();
  return *default_instance_;
}

PB_WorldArenaUserScoreData* PB_WorldArenaUserScoreData::default_instance_ = NULL;

PB_WorldArenaUserScoreData* PB_WorldArenaUserScoreData::New() const {
  return new PB_WorldArenaUserScoreData;
}

void PB_WorldArenaUserScoreData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PB_WorldArenaUserScoreData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(win_num_, today_giveup_notice_);
  }
  ZR_(has_fetch_signup_reward_, daily_reward_fetch_flag_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_WorldArenaUserScoreData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PB_WorldArenaUserScoreData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 win_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_num_)));
          set_has_win_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lose_num;
        break;
      }

      // optional int32 lose_num = 2;
      case 2: {
        if (tag == 16) {
         parse_lose_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lose_num_)));
          set_has_lose_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_draw_num;
        break;
      }

      // optional int32 draw_num = 3;
      case 3: {
        if (tag == 24) {
         parse_draw_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &draw_num_)));
          set_has_draw_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_total_score;
        break;
      }

      // optional int32 total_score = 4;
      case 4: {
        if (tag == 32) {
         parse_total_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_score_)));
          set_has_total_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_win_box_reward_flag;
        break;
      }

      // optional int32 win_box_reward_flag = 5;
      case 5: {
        if (tag == 40) {
         parse_win_box_reward_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_box_reward_flag_)));
          set_has_win_box_reward_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_giveup_num;
        break;
      }

      // optional int32 giveup_num = 6;
      case 6: {
        if (tag == 48) {
         parse_giveup_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &giveup_num_)));
          set_has_giveup_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_today_giveup_notice;
        break;
      }

      // optional bool today_giveup_notice = 7;
      case 7: {
        if (tag == 56) {
         parse_today_giveup_notice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &today_giveup_notice_)));
          set_has_today_giveup_notice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_total_battle_round;
        break;
      }

      // optional int32 total_battle_round = 8;
      case 8: {
        if (tag == 64) {
         parse_total_battle_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_battle_round_)));
          set_has_total_battle_round();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_has_fetch_signup_reward;
        break;
      }

      // optional bool has_fetch_signup_reward = 9;
      case 9: {
        if (tag == 72) {
         parse_has_fetch_signup_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_fetch_signup_reward_)));
          set_has_has_fetch_signup_reward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_daily_reward_fetch_flag;
        break;
      }

      // optional int32 daily_reward_fetch_flag = 10;
      case 10: {
        if (tag == 80) {
         parse_daily_reward_fetch_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daily_reward_fetch_flag_)));
          set_has_daily_reward_fetch_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PB_WorldArenaUserScoreData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PB_WorldArenaUserScoreData)
  return false;
#undef DO_
}

void PB_WorldArenaUserScoreData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PB_WorldArenaUserScoreData)
  // optional int32 win_num = 1;
  if (has_win_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->win_num(), output);
  }

  // optional int32 lose_num = 2;
  if (has_lose_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lose_num(), output);
  }

  // optional int32 draw_num = 3;
  if (has_draw_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->draw_num(), output);
  }

  // optional int32 total_score = 4;
  if (has_total_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->total_score(), output);
  }

  // optional int32 win_box_reward_flag = 5;
  if (has_win_box_reward_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->win_box_reward_flag(), output);
  }

  // optional int32 giveup_num = 6;
  if (has_giveup_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->giveup_num(), output);
  }

  // optional bool today_giveup_notice = 7;
  if (has_today_giveup_notice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->today_giveup_notice(), output);
  }

  // optional int32 total_battle_round = 8;
  if (has_total_battle_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->total_battle_round(), output);
  }

  // optional bool has_fetch_signup_reward = 9;
  if (has_has_fetch_signup_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->has_fetch_signup_reward(), output);
  }

  // optional int32 daily_reward_fetch_flag = 10;
  if (has_daily_reward_fetch_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->daily_reward_fetch_flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PB_WorldArenaUserScoreData)
}

::google::protobuf::uint8* PB_WorldArenaUserScoreData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_WorldArenaUserScoreData)
  // optional int32 win_num = 1;
  if (has_win_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->win_num(), target);
  }

  // optional int32 lose_num = 2;
  if (has_lose_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lose_num(), target);
  }

  // optional int32 draw_num = 3;
  if (has_draw_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->draw_num(), target);
  }

  // optional int32 total_score = 4;
  if (has_total_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->total_score(), target);
  }

  // optional int32 win_box_reward_flag = 5;
  if (has_win_box_reward_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->win_box_reward_flag(), target);
  }

  // optional int32 giveup_num = 6;
  if (has_giveup_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->giveup_num(), target);
  }

  // optional bool today_giveup_notice = 7;
  if (has_today_giveup_notice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->today_giveup_notice(), target);
  }

  // optional int32 total_battle_round = 8;
  if (has_total_battle_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->total_battle_round(), target);
  }

  // optional bool has_fetch_signup_reward = 9;
  if (has_has_fetch_signup_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->has_fetch_signup_reward(), target);
  }

  // optional int32 daily_reward_fetch_flag = 10;
  if (has_daily_reward_fetch_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->daily_reward_fetch_flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_WorldArenaUserScoreData)
  return target;
}

int PB_WorldArenaUserScoreData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 win_num = 1;
    if (has_win_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_num());
    }

    // optional int32 lose_num = 2;
    if (has_lose_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lose_num());
    }

    // optional int32 draw_num = 3;
    if (has_draw_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->draw_num());
    }

    // optional int32 total_score = 4;
    if (has_total_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_score());
    }

    // optional int32 win_box_reward_flag = 5;
    if (has_win_box_reward_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_box_reward_flag());
    }

    // optional int32 giveup_num = 6;
    if (has_giveup_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giveup_num());
    }

    // optional bool today_giveup_notice = 7;
    if (has_today_giveup_notice()) {
      total_size += 1 + 1;
    }

    // optional int32 total_battle_round = 8;
    if (has_total_battle_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_battle_round());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool has_fetch_signup_reward = 9;
    if (has_has_fetch_signup_reward()) {
      total_size += 1 + 1;
    }

    // optional int32 daily_reward_fetch_flag = 10;
    if (has_daily_reward_fetch_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daily_reward_fetch_flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_WorldArenaUserScoreData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_WorldArenaUserScoreData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_WorldArenaUserScoreData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_WorldArenaUserScoreData::MergeFrom(const PB_WorldArenaUserScoreData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_win_num()) {
      set_win_num(from.win_num());
    }
    if (from.has_lose_num()) {
      set_lose_num(from.lose_num());
    }
    if (from.has_draw_num()) {
      set_draw_num(from.draw_num());
    }
    if (from.has_total_score()) {
      set_total_score(from.total_score());
    }
    if (from.has_win_box_reward_flag()) {
      set_win_box_reward_flag(from.win_box_reward_flag());
    }
    if (from.has_giveup_num()) {
      set_giveup_num(from.giveup_num());
    }
    if (from.has_today_giveup_notice()) {
      set_today_giveup_notice(from.today_giveup_notice());
    }
    if (from.has_total_battle_round()) {
      set_total_battle_round(from.total_battle_round());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_has_fetch_signup_reward()) {
      set_has_fetch_signup_reward(from.has_fetch_signup_reward());
    }
    if (from.has_daily_reward_fetch_flag()) {
      set_daily_reward_fetch_flag(from.daily_reward_fetch_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_WorldArenaUserScoreData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_WorldArenaUserScoreData::CopyFrom(const PB_WorldArenaUserScoreData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_WorldArenaUserScoreData::IsInitialized() const {

  return true;
}

void PB_WorldArenaUserScoreData::Swap(PB_WorldArenaUserScoreData* other) {
  if (other != this) {
    std::swap(win_num_, other->win_num_);
    std::swap(lose_num_, other->lose_num_);
    std::swap(draw_num_, other->draw_num_);
    std::swap(total_score_, other->total_score_);
    std::swap(win_box_reward_flag_, other->win_box_reward_flag_);
    std::swap(giveup_num_, other->giveup_num_);
    std::swap(today_giveup_notice_, other->today_giveup_notice_);
    std::swap(total_battle_round_, other->total_battle_round_);
    std::swap(has_fetch_signup_reward_, other->has_fetch_signup_reward_);
    std::swap(daily_reward_fetch_flag_, other->daily_reward_fetch_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_WorldArenaUserScoreData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_WorldArenaUserScoreData_descriptor_;
  metadata.reflection = PB_WorldArenaUserScoreData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_WorldArenaUserScheduleData::kGroupIdFieldNumber;
const int PB_WorldArenaUserScheduleData::kScheduleListFieldNumber;
#endif  // !_MSC_VER

PB_WorldArenaUserScheduleData::PB_WorldArenaUserScheduleData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PB_WorldArenaUserScheduleData)
}

void PB_WorldArenaUserScheduleData::InitAsDefaultInstance() {
}

PB_WorldArenaUserScheduleData::PB_WorldArenaUserScheduleData(const PB_WorldArenaUserScheduleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PB_WorldArenaUserScheduleData)
}

void PB_WorldArenaUserScheduleData::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_WorldArenaUserScheduleData::~PB_WorldArenaUserScheduleData() {
  // @@protoc_insertion_point(destructor:PB_WorldArenaUserScheduleData)
  SharedDtor();
}

void PB_WorldArenaUserScheduleData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_WorldArenaUserScheduleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_WorldArenaUserScheduleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_WorldArenaUserScheduleData_descriptor_;
}

const PB_WorldArenaUserScheduleData& PB_WorldArenaUserScheduleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worldarena_5fuser_5fdata_2eproto();
  return *default_instance_;
}

PB_WorldArenaUserScheduleData* PB_WorldArenaUserScheduleData::default_instance_ = NULL;

PB_WorldArenaUserScheduleData* PB_WorldArenaUserScheduleData::New() const {
  return new PB_WorldArenaUserScheduleData;
}

void PB_WorldArenaUserScheduleData::Clear() {
  group_id_ = GOOGLE_LONGLONG(0);
  schedule_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_WorldArenaUserScheduleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PB_WorldArenaUserScheduleData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_schedule_list;
        break;
      }

      // repeated int64 schedule_list = 2;
      case 2: {
        if (tag == 16) {
         parse_schedule_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_schedule_list())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_schedule_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_schedule_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PB_WorldArenaUserScheduleData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PB_WorldArenaUserScheduleData)
  return false;
#undef DO_
}

void PB_WorldArenaUserScheduleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PB_WorldArenaUserScheduleData)
  // optional int64 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->group_id(), output);
  }

  // repeated int64 schedule_list = 2;
  for (int i = 0; i < this->schedule_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->schedule_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PB_WorldArenaUserScheduleData)
}

::google::protobuf::uint8* PB_WorldArenaUserScheduleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_WorldArenaUserScheduleData)
  // optional int64 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->group_id(), target);
  }

  // repeated int64 schedule_list = 2;
  for (int i = 0; i < this->schedule_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->schedule_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_WorldArenaUserScheduleData)
  return target;
}

int PB_WorldArenaUserScheduleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->group_id());
    }

  }
  // repeated int64 schedule_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->schedule_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->schedule_list(i));
    }
    total_size += 1 * this->schedule_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_WorldArenaUserScheduleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_WorldArenaUserScheduleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_WorldArenaUserScheduleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_WorldArenaUserScheduleData::MergeFrom(const PB_WorldArenaUserScheduleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  schedule_list_.MergeFrom(from.schedule_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_WorldArenaUserScheduleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_WorldArenaUserScheduleData::CopyFrom(const PB_WorldArenaUserScheduleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_WorldArenaUserScheduleData::IsInitialized() const {

  return true;
}

void PB_WorldArenaUserScheduleData::Swap(PB_WorldArenaUserScheduleData* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    schedule_list_.Swap(&other->schedule_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_WorldArenaUserScheduleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_WorldArenaUserScheduleData_descriptor_;
  metadata.reflection = PB_WorldArenaUserScheduleData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_WorldArenaUserData::kSignupDataFieldNumber;
const int PB_WorldArenaUserData::kScoreDataFieldNumber;
const int PB_WorldArenaUserData::kScheduleDataFieldNumber;
const int PB_WorldArenaUserData::kRoleBattleDataFieldNumber;
#endif  // !_MSC_VER

PB_WorldArenaUserData::PB_WorldArenaUserData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PB_WorldArenaUserData)
}

void PB_WorldArenaUserData::InitAsDefaultInstance() {
  signup_data_ = const_cast< ::PB_WorldArenaUserSignupData*>(&::PB_WorldArenaUserSignupData::default_instance());
  score_data_ = const_cast< ::PB_WorldArenaUserScoreData*>(&::PB_WorldArenaUserScoreData::default_instance());
  schedule_data_ = const_cast< ::PB_WorldArenaUserScheduleData*>(&::PB_WorldArenaUserScheduleData::default_instance());
  role_battle_data_ = const_cast< ::PB_RoleBattleData*>(&::PB_RoleBattleData::default_instance());
}

PB_WorldArenaUserData::PB_WorldArenaUserData(const PB_WorldArenaUserData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PB_WorldArenaUserData)
}

void PB_WorldArenaUserData::SharedCtor() {
  _cached_size_ = 0;
  signup_data_ = NULL;
  score_data_ = NULL;
  schedule_data_ = NULL;
  role_battle_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_WorldArenaUserData::~PB_WorldArenaUserData() {
  // @@protoc_insertion_point(destructor:PB_WorldArenaUserData)
  SharedDtor();
}

void PB_WorldArenaUserData::SharedDtor() {
  if (this != default_instance_) {
    delete signup_data_;
    delete score_data_;
    delete schedule_data_;
    delete role_battle_data_;
  }
}

void PB_WorldArenaUserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_WorldArenaUserData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_WorldArenaUserData_descriptor_;
}

const PB_WorldArenaUserData& PB_WorldArenaUserData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worldarena_5fuser_5fdata_2eproto();
  return *default_instance_;
}

PB_WorldArenaUserData* PB_WorldArenaUserData::default_instance_ = NULL;

PB_WorldArenaUserData* PB_WorldArenaUserData::New() const {
  return new PB_WorldArenaUserData;
}

void PB_WorldArenaUserData::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_signup_data()) {
      if (signup_data_ != NULL) signup_data_->::PB_WorldArenaUserSignupData::Clear();
    }
    if (has_score_data()) {
      if (score_data_ != NULL) score_data_->::PB_WorldArenaUserScoreData::Clear();
    }
    if (has_schedule_data()) {
      if (schedule_data_ != NULL) schedule_data_->::PB_WorldArenaUserScheduleData::Clear();
    }
    if (has_role_battle_data()) {
      if (role_battle_data_ != NULL) role_battle_data_->::PB_RoleBattleData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_WorldArenaUserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PB_WorldArenaUserData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB_WorldArenaUserSignupData signup_data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signup_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_score_data;
        break;
      }

      // optional .PB_WorldArenaUserScoreData score_data = 2;
      case 2: {
        if (tag == 18) {
         parse_score_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_score_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_schedule_data;
        break;
      }

      // optional .PB_WorldArenaUserScheduleData schedule_data = 3;
      case 3: {
        if (tag == 26) {
         parse_schedule_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_schedule_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_role_battle_data;
        break;
      }

      // optional .PB_RoleBattleData role_battle_data = 4;
      case 4: {
        if (tag == 34) {
         parse_role_battle_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_battle_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PB_WorldArenaUserData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PB_WorldArenaUserData)
  return false;
#undef DO_
}

void PB_WorldArenaUserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PB_WorldArenaUserData)
  // optional .PB_WorldArenaUserSignupData signup_data = 1;
  if (has_signup_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signup_data(), output);
  }

  // optional .PB_WorldArenaUserScoreData score_data = 2;
  if (has_score_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->score_data(), output);
  }

  // optional .PB_WorldArenaUserScheduleData schedule_data = 3;
  if (has_schedule_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->schedule_data(), output);
  }

  // optional .PB_RoleBattleData role_battle_data = 4;
  if (has_role_battle_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->role_battle_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PB_WorldArenaUserData)
}

::google::protobuf::uint8* PB_WorldArenaUserData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_WorldArenaUserData)
  // optional .PB_WorldArenaUserSignupData signup_data = 1;
  if (has_signup_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signup_data(), target);
  }

  // optional .PB_WorldArenaUserScoreData score_data = 2;
  if (has_score_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->score_data(), target);
  }

  // optional .PB_WorldArenaUserScheduleData schedule_data = 3;
  if (has_schedule_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->schedule_data(), target);
  }

  // optional .PB_RoleBattleData role_battle_data = 4;
  if (has_role_battle_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->role_battle_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_WorldArenaUserData)
  return target;
}

int PB_WorldArenaUserData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB_WorldArenaUserSignupData signup_data = 1;
    if (has_signup_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signup_data());
    }

    // optional .PB_WorldArenaUserScoreData score_data = 2;
    if (has_score_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->score_data());
    }

    // optional .PB_WorldArenaUserScheduleData schedule_data = 3;
    if (has_schedule_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->schedule_data());
    }

    // optional .PB_RoleBattleData role_battle_data = 4;
    if (has_role_battle_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_battle_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_WorldArenaUserData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_WorldArenaUserData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_WorldArenaUserData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_WorldArenaUserData::MergeFrom(const PB_WorldArenaUserData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signup_data()) {
      mutable_signup_data()->::PB_WorldArenaUserSignupData::MergeFrom(from.signup_data());
    }
    if (from.has_score_data()) {
      mutable_score_data()->::PB_WorldArenaUserScoreData::MergeFrom(from.score_data());
    }
    if (from.has_schedule_data()) {
      mutable_schedule_data()->::PB_WorldArenaUserScheduleData::MergeFrom(from.schedule_data());
    }
    if (from.has_role_battle_data()) {
      mutable_role_battle_data()->::PB_RoleBattleData::MergeFrom(from.role_battle_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_WorldArenaUserData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_WorldArenaUserData::CopyFrom(const PB_WorldArenaUserData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_WorldArenaUserData::IsInitialized() const {

  return true;
}

void PB_WorldArenaUserData::Swap(PB_WorldArenaUserData* other) {
  if (other != this) {
    std::swap(signup_data_, other->signup_data_);
    std::swap(score_data_, other->score_data_);
    std::swap(schedule_data_, other->schedule_data_);
    std::swap(role_battle_data_, other->role_battle_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_WorldArenaUserData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_WorldArenaUserData_descriptor_;
  metadata.reflection = PB_WorldArenaUserData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
