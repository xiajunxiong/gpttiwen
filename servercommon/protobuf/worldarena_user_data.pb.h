// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: worldarena_user_data.proto

#ifndef PROTOBUF_worldarena_5fuser_5fdata_2eproto__INCLUDED
#define PROTOBUF_worldarena_5fuser_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "role_battle_data.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_worldarena_5fuser_5fdata_2eproto();
void protobuf_AssignDesc_worldarena_5fuser_5fdata_2eproto();
void protobuf_ShutdownFile_worldarena_5fuser_5fdata_2eproto();

class PB_WorldArenaUserSignupData;
class PB_WorldArenaUserScoreData;
class PB_WorldArenaUserScheduleData;
class PB_WorldArenaUserData;

// ===================================================================

class PB_WorldArenaUserSignupData : public ::google::protobuf::Message {
 public:
  PB_WorldArenaUserSignupData();
  virtual ~PB_WorldArenaUserSignupData();

  PB_WorldArenaUserSignupData(const PB_WorldArenaUserSignupData& from);

  inline PB_WorldArenaUserSignupData& operator=(const PB_WorldArenaUserSignupData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PB_WorldArenaUserSignupData& default_instance();

  void Swap(PB_WorldArenaUserSignupData* other);

  // implements Message ----------------------------------------------

  PB_WorldArenaUserSignupData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB_WorldArenaUserSignupData& from);
  void MergeFrom(const PB_WorldArenaUserSignupData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional int32 plat_type = 2;
  inline bool has_plat_type() const;
  inline void clear_plat_type();
  static const int kPlatTypeFieldNumber = 2;
  inline ::google::protobuf::int32 plat_type() const;
  inline void set_plat_type(::google::protobuf::int32 value);

  // optional int64 uuid = 3;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 3;
  inline ::google::protobuf::int64 uuid() const;
  inline void set_uuid(::google::protobuf::int64 value);

  // optional int32 profession = 4;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 4;
  inline ::google::protobuf::int32 profession() const;
  inline void set_profession(::google::protobuf::int32 value);

  // optional int32 avatar_type = 5;
  inline bool has_avatar_type() const;
  inline void clear_avatar_type();
  static const int kAvatarTypeFieldNumber = 5;
  inline ::google::protobuf::int32 avatar_type() const;
  inline void set_avatar_type(::google::protobuf::int32 value);

  // optional int32 headshot_id = 6;
  inline bool has_headshot_id() const;
  inline void clear_headshot_id();
  static const int kHeadshotIdFieldNumber = 6;
  inline ::google::protobuf::int32 headshot_id() const;
  inline void set_headshot_id(::google::protobuf::int32 value);

  // optional int32 level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 season_index = 8;
  inline bool has_season_index() const;
  inline void clear_season_index();
  static const int kSeasonIndexFieldNumber = 8;
  inline ::google::protobuf::int32 season_index() const;
  inline void set_season_index(::google::protobuf::int32 value);

  // optional int32 top_level = 9;
  inline bool has_top_level() const;
  inline void clear_top_level();
  static const int kTopLevelFieldNumber = 9;
  inline ::google::protobuf::int32 top_level() const;
  inline void set_top_level(::google::protobuf::int32 value);

  // optional string role_name = 10;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 10;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional string guild_name = 11;
  inline bool has_guild_name() const;
  inline void clear_guild_name();
  static const int kGuildNameFieldNumber = 11;
  inline const ::std::string& guild_name() const;
  inline void set_guild_name(const ::std::string& value);
  inline void set_guild_name(const char* value);
  inline void set_guild_name(const char* value, size_t size);
  inline ::std::string* mutable_guild_name();
  inline ::std::string* release_guild_name();
  inline void set_allocated_guild_name(::std::string* guild_name);

  // @@protoc_insertion_point(class_scope:PB_WorldArenaUserSignupData)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_plat_type();
  inline void clear_has_plat_type();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_avatar_type();
  inline void clear_has_avatar_type();
  inline void set_has_headshot_id();
  inline void clear_has_headshot_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_season_index();
  inline void clear_has_season_index();
  inline void set_has_top_level();
  inline void clear_has_top_level();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_guild_name();
  inline void clear_has_guild_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 plat_type_;
  ::google::protobuf::int64 uuid_;
  ::google::protobuf::int32 profession_;
  ::google::protobuf::int32 avatar_type_;
  ::google::protobuf::int32 headshot_id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 season_index_;
  ::google::protobuf::int32 top_level_;
  ::std::string* role_name_;
  ::std::string* guild_name_;
  friend void  protobuf_AddDesc_worldarena_5fuser_5fdata_2eproto();
  friend void protobuf_AssignDesc_worldarena_5fuser_5fdata_2eproto();
  friend void protobuf_ShutdownFile_worldarena_5fuser_5fdata_2eproto();

  void InitAsDefaultInstance();
  static PB_WorldArenaUserSignupData* default_instance_;
};
// -------------------------------------------------------------------

class PB_WorldArenaUserScoreData : public ::google::protobuf::Message {
 public:
  PB_WorldArenaUserScoreData();
  virtual ~PB_WorldArenaUserScoreData();

  PB_WorldArenaUserScoreData(const PB_WorldArenaUserScoreData& from);

  inline PB_WorldArenaUserScoreData& operator=(const PB_WorldArenaUserScoreData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PB_WorldArenaUserScoreData& default_instance();

  void Swap(PB_WorldArenaUserScoreData* other);

  // implements Message ----------------------------------------------

  PB_WorldArenaUserScoreData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB_WorldArenaUserScoreData& from);
  void MergeFrom(const PB_WorldArenaUserScoreData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 win_num = 1;
  inline bool has_win_num() const;
  inline void clear_win_num();
  static const int kWinNumFieldNumber = 1;
  inline ::google::protobuf::int32 win_num() const;
  inline void set_win_num(::google::protobuf::int32 value);

  // optional int32 lose_num = 2;
  inline bool has_lose_num() const;
  inline void clear_lose_num();
  static const int kLoseNumFieldNumber = 2;
  inline ::google::protobuf::int32 lose_num() const;
  inline void set_lose_num(::google::protobuf::int32 value);

  // optional int32 draw_num = 3;
  inline bool has_draw_num() const;
  inline void clear_draw_num();
  static const int kDrawNumFieldNumber = 3;
  inline ::google::protobuf::int32 draw_num() const;
  inline void set_draw_num(::google::protobuf::int32 value);

  // optional int32 total_score = 4;
  inline bool has_total_score() const;
  inline void clear_total_score();
  static const int kTotalScoreFieldNumber = 4;
  inline ::google::protobuf::int32 total_score() const;
  inline void set_total_score(::google::protobuf::int32 value);

  // optional int32 win_box_reward_flag = 5;
  inline bool has_win_box_reward_flag() const;
  inline void clear_win_box_reward_flag();
  static const int kWinBoxRewardFlagFieldNumber = 5;
  inline ::google::protobuf::int32 win_box_reward_flag() const;
  inline void set_win_box_reward_flag(::google::protobuf::int32 value);

  // optional int32 giveup_num = 6;
  inline bool has_giveup_num() const;
  inline void clear_giveup_num();
  static const int kGiveupNumFieldNumber = 6;
  inline ::google::protobuf::int32 giveup_num() const;
  inline void set_giveup_num(::google::protobuf::int32 value);

  // optional bool today_giveup_notice = 7;
  inline bool has_today_giveup_notice() const;
  inline void clear_today_giveup_notice();
  static const int kTodayGiveupNoticeFieldNumber = 7;
  inline bool today_giveup_notice() const;
  inline void set_today_giveup_notice(bool value);

  // optional int32 total_battle_round = 8;
  inline bool has_total_battle_round() const;
  inline void clear_total_battle_round();
  static const int kTotalBattleRoundFieldNumber = 8;
  inline ::google::protobuf::int32 total_battle_round() const;
  inline void set_total_battle_round(::google::protobuf::int32 value);

  // optional bool has_fetch_signup_reward = 9;
  inline bool has_has_fetch_signup_reward() const;
  inline void clear_has_fetch_signup_reward();
  static const int kHasFetchSignupRewardFieldNumber = 9;
  inline bool has_fetch_signup_reward() const;
  inline void set_has_fetch_signup_reward(bool value);

  // optional int32 daily_reward_fetch_flag = 10;
  inline bool has_daily_reward_fetch_flag() const;
  inline void clear_daily_reward_fetch_flag();
  static const int kDailyRewardFetchFlagFieldNumber = 10;
  inline ::google::protobuf::int32 daily_reward_fetch_flag() const;
  inline void set_daily_reward_fetch_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB_WorldArenaUserScoreData)
 private:
  inline void set_has_win_num();
  inline void clear_has_win_num();
  inline void set_has_lose_num();
  inline void clear_has_lose_num();
  inline void set_has_draw_num();
  inline void clear_has_draw_num();
  inline void set_has_total_score();
  inline void clear_has_total_score();
  inline void set_has_win_box_reward_flag();
  inline void clear_has_win_box_reward_flag();
  inline void set_has_giveup_num();
  inline void clear_has_giveup_num();
  inline void set_has_today_giveup_notice();
  inline void clear_has_today_giveup_notice();
  inline void set_has_total_battle_round();
  inline void clear_has_total_battle_round();
  inline void set_has_has_fetch_signup_reward();
  inline void clear_has_has_fetch_signup_reward();
  inline void set_has_daily_reward_fetch_flag();
  inline void clear_has_daily_reward_fetch_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 win_num_;
  ::google::protobuf::int32 lose_num_;
  ::google::protobuf::int32 draw_num_;
  ::google::protobuf::int32 total_score_;
  ::google::protobuf::int32 win_box_reward_flag_;
  ::google::protobuf::int32 giveup_num_;
  ::google::protobuf::int32 total_battle_round_;
  bool today_giveup_notice_;
  bool has_fetch_signup_reward_;
  ::google::protobuf::int32 daily_reward_fetch_flag_;
  friend void  protobuf_AddDesc_worldarena_5fuser_5fdata_2eproto();
  friend void protobuf_AssignDesc_worldarena_5fuser_5fdata_2eproto();
  friend void protobuf_ShutdownFile_worldarena_5fuser_5fdata_2eproto();

  void InitAsDefaultInstance();
  static PB_WorldArenaUserScoreData* default_instance_;
};
// -------------------------------------------------------------------

class PB_WorldArenaUserScheduleData : public ::google::protobuf::Message {
 public:
  PB_WorldArenaUserScheduleData();
  virtual ~PB_WorldArenaUserScheduleData();

  PB_WorldArenaUserScheduleData(const PB_WorldArenaUserScheduleData& from);

  inline PB_WorldArenaUserScheduleData& operator=(const PB_WorldArenaUserScheduleData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PB_WorldArenaUserScheduleData& default_instance();

  void Swap(PB_WorldArenaUserScheduleData* other);

  // implements Message ----------------------------------------------

  PB_WorldArenaUserScheduleData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB_WorldArenaUserScheduleData& from);
  void MergeFrom(const PB_WorldArenaUserScheduleData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::int64 group_id() const;
  inline void set_group_id(::google::protobuf::int64 value);

  // repeated int64 schedule_list = 2;
  inline int schedule_list_size() const;
  inline void clear_schedule_list();
  static const int kScheduleListFieldNumber = 2;
  inline ::google::protobuf::int64 schedule_list(int index) const;
  inline void set_schedule_list(int index, ::google::protobuf::int64 value);
  inline void add_schedule_list(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      schedule_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_schedule_list();

  // @@protoc_insertion_point(class_scope:PB_WorldArenaUserScheduleData)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 group_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > schedule_list_;
  friend void  protobuf_AddDesc_worldarena_5fuser_5fdata_2eproto();
  friend void protobuf_AssignDesc_worldarena_5fuser_5fdata_2eproto();
  friend void protobuf_ShutdownFile_worldarena_5fuser_5fdata_2eproto();

  void InitAsDefaultInstance();
  static PB_WorldArenaUserScheduleData* default_instance_;
};
// -------------------------------------------------------------------

class PB_WorldArenaUserData : public ::google::protobuf::Message {
 public:
  PB_WorldArenaUserData();
  virtual ~PB_WorldArenaUserData();

  PB_WorldArenaUserData(const PB_WorldArenaUserData& from);

  inline PB_WorldArenaUserData& operator=(const PB_WorldArenaUserData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PB_WorldArenaUserData& default_instance();

  void Swap(PB_WorldArenaUserData* other);

  // implements Message ----------------------------------------------

  PB_WorldArenaUserData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB_WorldArenaUserData& from);
  void MergeFrom(const PB_WorldArenaUserData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB_WorldArenaUserSignupData signup_data = 1;
  inline bool has_signup_data() const;
  inline void clear_signup_data();
  static const int kSignupDataFieldNumber = 1;
  inline const ::PB_WorldArenaUserSignupData& signup_data() const;
  inline ::PB_WorldArenaUserSignupData* mutable_signup_data();
  inline ::PB_WorldArenaUserSignupData* release_signup_data();
  inline void set_allocated_signup_data(::PB_WorldArenaUserSignupData* signup_data);

  // optional .PB_WorldArenaUserScoreData score_data = 2;
  inline bool has_score_data() const;
  inline void clear_score_data();
  static const int kScoreDataFieldNumber = 2;
  inline const ::PB_WorldArenaUserScoreData& score_data() const;
  inline ::PB_WorldArenaUserScoreData* mutable_score_data();
  inline ::PB_WorldArenaUserScoreData* release_score_data();
  inline void set_allocated_score_data(::PB_WorldArenaUserScoreData* score_data);

  // optional .PB_WorldArenaUserScheduleData schedule_data = 3;
  inline bool has_schedule_data() const;
  inline void clear_schedule_data();
  static const int kScheduleDataFieldNumber = 3;
  inline const ::PB_WorldArenaUserScheduleData& schedule_data() const;
  inline ::PB_WorldArenaUserScheduleData* mutable_schedule_data();
  inline ::PB_WorldArenaUserScheduleData* release_schedule_data();
  inline void set_allocated_schedule_data(::PB_WorldArenaUserScheduleData* schedule_data);

  // optional .PB_RoleBattleData role_battle_data = 4;
  inline bool has_role_battle_data() const;
  inline void clear_role_battle_data();
  static const int kRoleBattleDataFieldNumber = 4;
  inline const ::PB_RoleBattleData& role_battle_data() const;
  inline ::PB_RoleBattleData* mutable_role_battle_data();
  inline ::PB_RoleBattleData* release_role_battle_data();
  inline void set_allocated_role_battle_data(::PB_RoleBattleData* role_battle_data);

  // @@protoc_insertion_point(class_scope:PB_WorldArenaUserData)
 private:
  inline void set_has_signup_data();
  inline void clear_has_signup_data();
  inline void set_has_score_data();
  inline void clear_has_score_data();
  inline void set_has_schedule_data();
  inline void clear_has_schedule_data();
  inline void set_has_role_battle_data();
  inline void clear_has_role_battle_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::PB_WorldArenaUserSignupData* signup_data_;
  ::PB_WorldArenaUserScoreData* score_data_;
  ::PB_WorldArenaUserScheduleData* schedule_data_;
  ::PB_RoleBattleData* role_battle_data_;
  friend void  protobuf_AddDesc_worldarena_5fuser_5fdata_2eproto();
  friend void protobuf_AssignDesc_worldarena_5fuser_5fdata_2eproto();
  friend void protobuf_ShutdownFile_worldarena_5fuser_5fdata_2eproto();

  void InitAsDefaultInstance();
  static PB_WorldArenaUserData* default_instance_;
};
// ===================================================================


// ===================================================================

// PB_WorldArenaUserSignupData

// optional int32 uid = 1;
inline bool PB_WorldArenaUserSignupData::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_WorldArenaUserSignupData::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB_WorldArenaUserSignupData::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB_WorldArenaUserSignupData::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 PB_WorldArenaUserSignupData::uid() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaUserSignupData.uid)
  return uid_;
}
inline void PB_WorldArenaUserSignupData::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaUserSignupData.uid)
}

// optional int32 plat_type = 2;
inline bool PB_WorldArenaUserSignupData::has_plat_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_WorldArenaUserSignupData::set_has_plat_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PB_WorldArenaUserSignupData::clear_has_plat_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PB_WorldArenaUserSignupData::clear_plat_type() {
  plat_type_ = 0;
  clear_has_plat_type();
}
inline ::google::protobuf::int32 PB_WorldArenaUserSignupData::plat_type() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaUserSignupData.plat_type)
  return plat_type_;
}
inline void PB_WorldArenaUserSignupData::set_plat_type(::google::protobuf::int32 value) {
  set_has_plat_type();
  plat_type_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaUserSignupData.plat_type)
}

// optional int64 uuid = 3;
inline bool PB_WorldArenaUserSignupData::has_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PB_WorldArenaUserSignupData::set_has_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PB_WorldArenaUserSignupData::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PB_WorldArenaUserSignupData::clear_uuid() {
  uuid_ = GOOGLE_LONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::int64 PB_WorldArenaUserSignupData::uuid() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaUserSignupData.uuid)
  return uuid_;
}
inline void PB_WorldArenaUserSignupData::set_uuid(::google::protobuf::int64 value) {
  set_has_uuid();
  uuid_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaUserSignupData.uuid)
}

// optional int32 profession = 4;
inline bool PB_WorldArenaUserSignupData::has_profession() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PB_WorldArenaUserSignupData::set_has_profession() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PB_WorldArenaUserSignupData::clear_has_profession() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PB_WorldArenaUserSignupData::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::google::protobuf::int32 PB_WorldArenaUserSignupData::profession() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaUserSignupData.profession)
  return profession_;
}
inline void PB_WorldArenaUserSignupData::set_profession(::google::protobuf::int32 value) {
  set_has_profession();
  profession_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaUserSignupData.profession)
}

// optional int32 avatar_type = 5;
inline bool PB_WorldArenaUserSignupData::has_avatar_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PB_WorldArenaUserSignupData::set_has_avatar_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PB_WorldArenaUserSignupData::clear_has_avatar_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PB_WorldArenaUserSignupData::clear_avatar_type() {
  avatar_type_ = 0;
  clear_has_avatar_type();
}
inline ::google::protobuf::int32 PB_WorldArenaUserSignupData::avatar_type() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaUserSignupData.avatar_type)
  return avatar_type_;
}
inline void PB_WorldArenaUserSignupData::set_avatar_type(::google::protobuf::int32 value) {
  set_has_avatar_type();
  avatar_type_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaUserSignupData.avatar_type)
}

// optional int32 headshot_id = 6;
inline bool PB_WorldArenaUserSignupData::has_headshot_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PB_WorldArenaUserSignupData::set_has_headshot_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PB_WorldArenaUserSignupData::clear_has_headshot_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PB_WorldArenaUserSignupData::clear_headshot_id() {
  headshot_id_ = 0;
  clear_has_headshot_id();
}
inline ::google::protobuf::int32 PB_WorldArenaUserSignupData::headshot_id() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaUserSignupData.headshot_id)
  return headshot_id_;
}
inline void PB_WorldArenaUserSignupData::set_headshot_id(::google::protobuf::int32 value) {
  set_has_headshot_id();
  headshot_id_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaUserSignupData.headshot_id)
}

// optional int32 level = 7;
inline bool PB_WorldArenaUserSignupData::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PB_WorldArenaUserSignupData::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PB_WorldArenaUserSignupData::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PB_WorldArenaUserSignupData::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 PB_WorldArenaUserSignupData::level() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaUserSignupData.level)
  return level_;
}
inline void PB_WorldArenaUserSignupData::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaUserSignupData.level)
}

// optional int32 season_index = 8;
inline bool PB_WorldArenaUserSignupData::has_season_index() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PB_WorldArenaUserSignupData::set_has_season_index() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PB_WorldArenaUserSignupData::clear_has_season_index() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PB_WorldArenaUserSignupData::clear_season_index() {
  season_index_ = 0;
  clear_has_season_index();
}
inline ::google::protobuf::int32 PB_WorldArenaUserSignupData::season_index() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaUserSignupData.season_index)
  return season_index_;
}
inline void PB_WorldArenaUserSignupData::set_season_index(::google::protobuf::int32 value) {
  set_has_season_index();
  season_index_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaUserSignupData.season_index)
}

// optional int32 top_level = 9;
inline bool PB_WorldArenaUserSignupData::has_top_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PB_WorldArenaUserSignupData::set_has_top_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PB_WorldArenaUserSignupData::clear_has_top_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PB_WorldArenaUserSignupData::clear_top_level() {
  top_level_ = 0;
  clear_has_top_level();
}
inline ::google::protobuf::int32 PB_WorldArenaUserSignupData::top_level() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaUserSignupData.top_level)
  return top_level_;
}
inline void PB_WorldArenaUserSignupData::set_top_level(::google::protobuf::int32 value) {
  set_has_top_level();
  top_level_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaUserSignupData.top_level)
}

// optional string role_name = 10;
inline bool PB_WorldArenaUserSignupData::has_role_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PB_WorldArenaUserSignupData::set_has_role_name() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PB_WorldArenaUserSignupData::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PB_WorldArenaUserSignupData::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& PB_WorldArenaUserSignupData::role_name() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaUserSignupData.role_name)
  return *role_name_;
}
inline void PB_WorldArenaUserSignupData::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
  // @@protoc_insertion_point(field_set:PB_WorldArenaUserSignupData.role_name)
}
inline void PB_WorldArenaUserSignupData::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:PB_WorldArenaUserSignupData.role_name)
}
inline void PB_WorldArenaUserSignupData::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PB_WorldArenaUserSignupData.role_name)
}
inline ::std::string* PB_WorldArenaUserSignupData::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    role_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PB_WorldArenaUserSignupData.role_name)
  return role_name_;
}
inline ::std::string* PB_WorldArenaUserSignupData::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PB_WorldArenaUserSignupData::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PB_WorldArenaUserSignupData.role_name)
}

// optional string guild_name = 11;
inline bool PB_WorldArenaUserSignupData::has_guild_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PB_WorldArenaUserSignupData::set_has_guild_name() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PB_WorldArenaUserSignupData::clear_has_guild_name() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PB_WorldArenaUserSignupData::clear_guild_name() {
  if (guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_name_->clear();
  }
  clear_has_guild_name();
}
inline const ::std::string& PB_WorldArenaUserSignupData::guild_name() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaUserSignupData.guild_name)
  return *guild_name_;
}
inline void PB_WorldArenaUserSignupData::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
  // @@protoc_insertion_point(field_set:PB_WorldArenaUserSignupData.guild_name)
}
inline void PB_WorldArenaUserSignupData::set_guild_name(const char* value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:PB_WorldArenaUserSignupData.guild_name)
}
inline void PB_WorldArenaUserSignupData::set_guild_name(const char* value, size_t size) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PB_WorldArenaUserSignupData.guild_name)
}
inline ::std::string* PB_WorldArenaUserSignupData::mutable_guild_name() {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PB_WorldArenaUserSignupData.guild_name)
  return guild_name_;
}
inline ::std::string* PB_WorldArenaUserSignupData::release_guild_name() {
  clear_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guild_name_;
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PB_WorldArenaUserSignupData::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guild_name_;
  }
  if (guild_name) {
    set_has_guild_name();
    guild_name_ = guild_name;
  } else {
    clear_has_guild_name();
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PB_WorldArenaUserSignupData.guild_name)
}

// -------------------------------------------------------------------

// PB_WorldArenaUserScoreData

// optional int32 win_num = 1;
inline bool PB_WorldArenaUserScoreData::has_win_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_WorldArenaUserScoreData::set_has_win_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB_WorldArenaUserScoreData::clear_has_win_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB_WorldArenaUserScoreData::clear_win_num() {
  win_num_ = 0;
  clear_has_win_num();
}
inline ::google::protobuf::int32 PB_WorldArenaUserScoreData::win_num() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaUserScoreData.win_num)
  return win_num_;
}
inline void PB_WorldArenaUserScoreData::set_win_num(::google::protobuf::int32 value) {
  set_has_win_num();
  win_num_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaUserScoreData.win_num)
}

// optional int32 lose_num = 2;
inline bool PB_WorldArenaUserScoreData::has_lose_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_WorldArenaUserScoreData::set_has_lose_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PB_WorldArenaUserScoreData::clear_has_lose_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PB_WorldArenaUserScoreData::clear_lose_num() {
  lose_num_ = 0;
  clear_has_lose_num();
}
inline ::google::protobuf::int32 PB_WorldArenaUserScoreData::lose_num() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaUserScoreData.lose_num)
  return lose_num_;
}
inline void PB_WorldArenaUserScoreData::set_lose_num(::google::protobuf::int32 value) {
  set_has_lose_num();
  lose_num_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaUserScoreData.lose_num)
}

// optional int32 draw_num = 3;
inline bool PB_WorldArenaUserScoreData::has_draw_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PB_WorldArenaUserScoreData::set_has_draw_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PB_WorldArenaUserScoreData::clear_has_draw_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PB_WorldArenaUserScoreData::clear_draw_num() {
  draw_num_ = 0;
  clear_has_draw_num();
}
inline ::google::protobuf::int32 PB_WorldArenaUserScoreData::draw_num() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaUserScoreData.draw_num)
  return draw_num_;
}
inline void PB_WorldArenaUserScoreData::set_draw_num(::google::protobuf::int32 value) {
  set_has_draw_num();
  draw_num_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaUserScoreData.draw_num)
}

// optional int32 total_score = 4;
inline bool PB_WorldArenaUserScoreData::has_total_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PB_WorldArenaUserScoreData::set_has_total_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PB_WorldArenaUserScoreData::clear_has_total_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PB_WorldArenaUserScoreData::clear_total_score() {
  total_score_ = 0;
  clear_has_total_score();
}
inline ::google::protobuf::int32 PB_WorldArenaUserScoreData::total_score() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaUserScoreData.total_score)
  return total_score_;
}
inline void PB_WorldArenaUserScoreData::set_total_score(::google::protobuf::int32 value) {
  set_has_total_score();
  total_score_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaUserScoreData.total_score)
}

// optional int32 win_box_reward_flag = 5;
inline bool PB_WorldArenaUserScoreData::has_win_box_reward_flag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PB_WorldArenaUserScoreData::set_has_win_box_reward_flag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PB_WorldArenaUserScoreData::clear_has_win_box_reward_flag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PB_WorldArenaUserScoreData::clear_win_box_reward_flag() {
  win_box_reward_flag_ = 0;
  clear_has_win_box_reward_flag();
}
inline ::google::protobuf::int32 PB_WorldArenaUserScoreData::win_box_reward_flag() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaUserScoreData.win_box_reward_flag)
  return win_box_reward_flag_;
}
inline void PB_WorldArenaUserScoreData::set_win_box_reward_flag(::google::protobuf::int32 value) {
  set_has_win_box_reward_flag();
  win_box_reward_flag_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaUserScoreData.win_box_reward_flag)
}

// optional int32 giveup_num = 6;
inline bool PB_WorldArenaUserScoreData::has_giveup_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PB_WorldArenaUserScoreData::set_has_giveup_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PB_WorldArenaUserScoreData::clear_has_giveup_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PB_WorldArenaUserScoreData::clear_giveup_num() {
  giveup_num_ = 0;
  clear_has_giveup_num();
}
inline ::google::protobuf::int32 PB_WorldArenaUserScoreData::giveup_num() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaUserScoreData.giveup_num)
  return giveup_num_;
}
inline void PB_WorldArenaUserScoreData::set_giveup_num(::google::protobuf::int32 value) {
  set_has_giveup_num();
  giveup_num_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaUserScoreData.giveup_num)
}

// optional bool today_giveup_notice = 7;
inline bool PB_WorldArenaUserScoreData::has_today_giveup_notice() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PB_WorldArenaUserScoreData::set_has_today_giveup_notice() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PB_WorldArenaUserScoreData::clear_has_today_giveup_notice() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PB_WorldArenaUserScoreData::clear_today_giveup_notice() {
  today_giveup_notice_ = false;
  clear_has_today_giveup_notice();
}
inline bool PB_WorldArenaUserScoreData::today_giveup_notice() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaUserScoreData.today_giveup_notice)
  return today_giveup_notice_;
}
inline void PB_WorldArenaUserScoreData::set_today_giveup_notice(bool value) {
  set_has_today_giveup_notice();
  today_giveup_notice_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaUserScoreData.today_giveup_notice)
}

// optional int32 total_battle_round = 8;
inline bool PB_WorldArenaUserScoreData::has_total_battle_round() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PB_WorldArenaUserScoreData::set_has_total_battle_round() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PB_WorldArenaUserScoreData::clear_has_total_battle_round() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PB_WorldArenaUserScoreData::clear_total_battle_round() {
  total_battle_round_ = 0;
  clear_has_total_battle_round();
}
inline ::google::protobuf::int32 PB_WorldArenaUserScoreData::total_battle_round() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaUserScoreData.total_battle_round)
  return total_battle_round_;
}
inline void PB_WorldArenaUserScoreData::set_total_battle_round(::google::protobuf::int32 value) {
  set_has_total_battle_round();
  total_battle_round_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaUserScoreData.total_battle_round)
}

// optional bool has_fetch_signup_reward = 9;
inline bool PB_WorldArenaUserScoreData::has_has_fetch_signup_reward() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PB_WorldArenaUserScoreData::set_has_has_fetch_signup_reward() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PB_WorldArenaUserScoreData::clear_has_has_fetch_signup_reward() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PB_WorldArenaUserScoreData::clear_has_fetch_signup_reward() {
  has_fetch_signup_reward_ = false;
  clear_has_has_fetch_signup_reward();
}
inline bool PB_WorldArenaUserScoreData::has_fetch_signup_reward() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaUserScoreData.has_fetch_signup_reward)
  return has_fetch_signup_reward_;
}
inline void PB_WorldArenaUserScoreData::set_has_fetch_signup_reward(bool value) {
  set_has_has_fetch_signup_reward();
  has_fetch_signup_reward_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaUserScoreData.has_fetch_signup_reward)
}

// optional int32 daily_reward_fetch_flag = 10;
inline bool PB_WorldArenaUserScoreData::has_daily_reward_fetch_flag() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PB_WorldArenaUserScoreData::set_has_daily_reward_fetch_flag() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PB_WorldArenaUserScoreData::clear_has_daily_reward_fetch_flag() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PB_WorldArenaUserScoreData::clear_daily_reward_fetch_flag() {
  daily_reward_fetch_flag_ = 0;
  clear_has_daily_reward_fetch_flag();
}
inline ::google::protobuf::int32 PB_WorldArenaUserScoreData::daily_reward_fetch_flag() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaUserScoreData.daily_reward_fetch_flag)
  return daily_reward_fetch_flag_;
}
inline void PB_WorldArenaUserScoreData::set_daily_reward_fetch_flag(::google::protobuf::int32 value) {
  set_has_daily_reward_fetch_flag();
  daily_reward_fetch_flag_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaUserScoreData.daily_reward_fetch_flag)
}

// -------------------------------------------------------------------

// PB_WorldArenaUserScheduleData

// optional int64 group_id = 1;
inline bool PB_WorldArenaUserScheduleData::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_WorldArenaUserScheduleData::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB_WorldArenaUserScheduleData::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB_WorldArenaUserScheduleData::clear_group_id() {
  group_id_ = GOOGLE_LONGLONG(0);
  clear_has_group_id();
}
inline ::google::protobuf::int64 PB_WorldArenaUserScheduleData::group_id() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaUserScheduleData.group_id)
  return group_id_;
}
inline void PB_WorldArenaUserScheduleData::set_group_id(::google::protobuf::int64 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:PB_WorldArenaUserScheduleData.group_id)
}

// repeated int64 schedule_list = 2;
inline int PB_WorldArenaUserScheduleData::schedule_list_size() const {
  return schedule_list_.size();
}
inline void PB_WorldArenaUserScheduleData::clear_schedule_list() {
  schedule_list_.Clear();
}
inline ::google::protobuf::int64 PB_WorldArenaUserScheduleData::schedule_list(int index) const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaUserScheduleData.schedule_list)
  return schedule_list_.Get(index);
}
inline void PB_WorldArenaUserScheduleData::set_schedule_list(int index, ::google::protobuf::int64 value) {
  schedule_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:PB_WorldArenaUserScheduleData.schedule_list)
}
inline void PB_WorldArenaUserScheduleData::add_schedule_list(::google::protobuf::int64 value) {
  schedule_list_.Add(value);
  // @@protoc_insertion_point(field_add:PB_WorldArenaUserScheduleData.schedule_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
PB_WorldArenaUserScheduleData::schedule_list() const {
  // @@protoc_insertion_point(field_list:PB_WorldArenaUserScheduleData.schedule_list)
  return schedule_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
PB_WorldArenaUserScheduleData::mutable_schedule_list() {
  // @@protoc_insertion_point(field_mutable_list:PB_WorldArenaUserScheduleData.schedule_list)
  return &schedule_list_;
}

// -------------------------------------------------------------------

// PB_WorldArenaUserData

// optional .PB_WorldArenaUserSignupData signup_data = 1;
inline bool PB_WorldArenaUserData::has_signup_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_WorldArenaUserData::set_has_signup_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB_WorldArenaUserData::clear_has_signup_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB_WorldArenaUserData::clear_signup_data() {
  if (signup_data_ != NULL) signup_data_->::PB_WorldArenaUserSignupData::Clear();
  clear_has_signup_data();
}
inline const ::PB_WorldArenaUserSignupData& PB_WorldArenaUserData::signup_data() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaUserData.signup_data)
  return signup_data_ != NULL ? *signup_data_ : *default_instance_->signup_data_;
}
inline ::PB_WorldArenaUserSignupData* PB_WorldArenaUserData::mutable_signup_data() {
  set_has_signup_data();
  if (signup_data_ == NULL) signup_data_ = new ::PB_WorldArenaUserSignupData;
  // @@protoc_insertion_point(field_mutable:PB_WorldArenaUserData.signup_data)
  return signup_data_;
}
inline ::PB_WorldArenaUserSignupData* PB_WorldArenaUserData::release_signup_data() {
  clear_has_signup_data();
  ::PB_WorldArenaUserSignupData* temp = signup_data_;
  signup_data_ = NULL;
  return temp;
}
inline void PB_WorldArenaUserData::set_allocated_signup_data(::PB_WorldArenaUserSignupData* signup_data) {
  delete signup_data_;
  signup_data_ = signup_data;
  if (signup_data) {
    set_has_signup_data();
  } else {
    clear_has_signup_data();
  }
  // @@protoc_insertion_point(field_set_allocated:PB_WorldArenaUserData.signup_data)
}

// optional .PB_WorldArenaUserScoreData score_data = 2;
inline bool PB_WorldArenaUserData::has_score_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_WorldArenaUserData::set_has_score_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PB_WorldArenaUserData::clear_has_score_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PB_WorldArenaUserData::clear_score_data() {
  if (score_data_ != NULL) score_data_->::PB_WorldArenaUserScoreData::Clear();
  clear_has_score_data();
}
inline const ::PB_WorldArenaUserScoreData& PB_WorldArenaUserData::score_data() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaUserData.score_data)
  return score_data_ != NULL ? *score_data_ : *default_instance_->score_data_;
}
inline ::PB_WorldArenaUserScoreData* PB_WorldArenaUserData::mutable_score_data() {
  set_has_score_data();
  if (score_data_ == NULL) score_data_ = new ::PB_WorldArenaUserScoreData;
  // @@protoc_insertion_point(field_mutable:PB_WorldArenaUserData.score_data)
  return score_data_;
}
inline ::PB_WorldArenaUserScoreData* PB_WorldArenaUserData::release_score_data() {
  clear_has_score_data();
  ::PB_WorldArenaUserScoreData* temp = score_data_;
  score_data_ = NULL;
  return temp;
}
inline void PB_WorldArenaUserData::set_allocated_score_data(::PB_WorldArenaUserScoreData* score_data) {
  delete score_data_;
  score_data_ = score_data;
  if (score_data) {
    set_has_score_data();
  } else {
    clear_has_score_data();
  }
  // @@protoc_insertion_point(field_set_allocated:PB_WorldArenaUserData.score_data)
}

// optional .PB_WorldArenaUserScheduleData schedule_data = 3;
inline bool PB_WorldArenaUserData::has_schedule_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PB_WorldArenaUserData::set_has_schedule_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PB_WorldArenaUserData::clear_has_schedule_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PB_WorldArenaUserData::clear_schedule_data() {
  if (schedule_data_ != NULL) schedule_data_->::PB_WorldArenaUserScheduleData::Clear();
  clear_has_schedule_data();
}
inline const ::PB_WorldArenaUserScheduleData& PB_WorldArenaUserData::schedule_data() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaUserData.schedule_data)
  return schedule_data_ != NULL ? *schedule_data_ : *default_instance_->schedule_data_;
}
inline ::PB_WorldArenaUserScheduleData* PB_WorldArenaUserData::mutable_schedule_data() {
  set_has_schedule_data();
  if (schedule_data_ == NULL) schedule_data_ = new ::PB_WorldArenaUserScheduleData;
  // @@protoc_insertion_point(field_mutable:PB_WorldArenaUserData.schedule_data)
  return schedule_data_;
}
inline ::PB_WorldArenaUserScheduleData* PB_WorldArenaUserData::release_schedule_data() {
  clear_has_schedule_data();
  ::PB_WorldArenaUserScheduleData* temp = schedule_data_;
  schedule_data_ = NULL;
  return temp;
}
inline void PB_WorldArenaUserData::set_allocated_schedule_data(::PB_WorldArenaUserScheduleData* schedule_data) {
  delete schedule_data_;
  schedule_data_ = schedule_data;
  if (schedule_data) {
    set_has_schedule_data();
  } else {
    clear_has_schedule_data();
  }
  // @@protoc_insertion_point(field_set_allocated:PB_WorldArenaUserData.schedule_data)
}

// optional .PB_RoleBattleData role_battle_data = 4;
inline bool PB_WorldArenaUserData::has_role_battle_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PB_WorldArenaUserData::set_has_role_battle_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PB_WorldArenaUserData::clear_has_role_battle_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PB_WorldArenaUserData::clear_role_battle_data() {
  if (role_battle_data_ != NULL) role_battle_data_->::PB_RoleBattleData::Clear();
  clear_has_role_battle_data();
}
inline const ::PB_RoleBattleData& PB_WorldArenaUserData::role_battle_data() const {
  // @@protoc_insertion_point(field_get:PB_WorldArenaUserData.role_battle_data)
  return role_battle_data_ != NULL ? *role_battle_data_ : *default_instance_->role_battle_data_;
}
inline ::PB_RoleBattleData* PB_WorldArenaUserData::mutable_role_battle_data() {
  set_has_role_battle_data();
  if (role_battle_data_ == NULL) role_battle_data_ = new ::PB_RoleBattleData;
  // @@protoc_insertion_point(field_mutable:PB_WorldArenaUserData.role_battle_data)
  return role_battle_data_;
}
inline ::PB_RoleBattleData* PB_WorldArenaUserData::release_role_battle_data() {
  clear_has_role_battle_data();
  ::PB_RoleBattleData* temp = role_battle_data_;
  role_battle_data_ = NULL;
  return temp;
}
inline void PB_WorldArenaUserData::set_allocated_role_battle_data(::PB_RoleBattleData* role_battle_data) {
  delete role_battle_data_;
  role_battle_data_ = role_battle_data;
  if (role_battle_data) {
    set_has_role_battle_data();
  } else {
    clear_has_role_battle_data();
  }
  // @@protoc_insertion_point(field_set_allocated:PB_WorldArenaUserData.role_battle_data)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_worldarena_5fuser_5fdata_2eproto__INCLUDED
